/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package course

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type TermListRequest struct {
}

func NewTermListRequest() *TermListRequest {
	return &TermListRequest{}
}

func (p *TermListRequest) InitDefault() {
}

func (p *TermListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListRequest(%+v)", *p)
}

var fieldIDToName_TermListRequest = map[int16]string{}

type TermListResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data []string        `thrift:"data,2,required" frugal:"2,required,list<string>" json:"data"`
}

func NewTermListResponse() *TermListResponse {
	return &TermListResponse{}
}

func (p *TermListResponse) InitDefault() {
}

var TermListResponse_Base_DEFAULT *model.BaseResp

func (p *TermListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return TermListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *TermListResponse) GetData() (v []string) {
	return p.Data
}
func (p *TermListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *TermListResponse) SetData(val []string) {
	p.Data = val
}

func (p *TermListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *TermListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListResponse(%+v)", *p)
}

var fieldIDToName_TermListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type CourseListRequest struct {
	Term      string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
	IsRefresh *bool  `thrift:"isRefresh,2,optional" frugal:"2,optional,bool" json:"isRefresh,omitempty"`
}

func NewCourseListRequest() *CourseListRequest {
	return &CourseListRequest{}
}

func (p *CourseListRequest) InitDefault() {
}

func (p *CourseListRequest) GetTerm() (v string) {
	return p.Term
}

var CourseListRequest_IsRefresh_DEFAULT bool

func (p *CourseListRequest) GetIsRefresh() (v bool) {
	if !p.IsSetIsRefresh() {
		return CourseListRequest_IsRefresh_DEFAULT
	}
	return *p.IsRefresh
}
func (p *CourseListRequest) SetTerm(val string) {
	p.Term = val
}
func (p *CourseListRequest) SetIsRefresh(val *bool) {
	p.IsRefresh = val
}

func (p *CourseListRequest) IsSetIsRefresh() bool {
	return p.IsRefresh != nil
}

func (p *CourseListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseListRequest(%+v)", *p)
}

var fieldIDToName_CourseListRequest = map[int16]string{
	1: "term",
	2: "isRefresh",
}

type CourseListResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data []*model.Course `thrift:"data,2,required" frugal:"2,required,list<model.Course>" json:"data"`
}

func NewCourseListResponse() *CourseListResponse {
	return &CourseListResponse{}
}

func (p *CourseListResponse) InitDefault() {
}

var CourseListResponse_Base_DEFAULT *model.BaseResp

func (p *CourseListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CourseListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CourseListResponse) GetData() (v []*model.Course) {
	return p.Data
}
func (p *CourseListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CourseListResponse) SetData(val []*model.Course) {
	p.Data = val
}

func (p *CourseListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CourseListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseListResponse(%+v)", *p)
}

var fieldIDToName_CourseListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetCalendarRequest struct {
	StuId string `thrift:"stu_id,1,required" frugal:"1,required,string" json:"stu_id"`
}

func NewGetCalendarRequest() *GetCalendarRequest {
	return &GetCalendarRequest{}
}

func (p *GetCalendarRequest) InitDefault() {
}

func (p *GetCalendarRequest) GetStuId() (v string) {
	return p.StuId
}
func (p *GetCalendarRequest) SetStuId(val string) {
	p.StuId = val
}

func (p *GetCalendarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCalendarRequest(%+v)", *p)
}

var fieldIDToName_GetCalendarRequest = map[int16]string{
	1: "stu_id",
}

type GetCalendarResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Ics  []byte          `thrift:"ics,2" frugal:"2,default,binary" json:"ics"`
}

func NewGetCalendarResponse() *GetCalendarResponse {
	return &GetCalendarResponse{}
}

func (p *GetCalendarResponse) InitDefault() {
}

var GetCalendarResponse_Base_DEFAULT *model.BaseResp

func (p *GetCalendarResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetCalendarResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCalendarResponse) GetIcs() (v []byte) {
	return p.Ics
}
func (p *GetCalendarResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetCalendarResponse) SetIcs(val []byte) {
	p.Ics = val
}

func (p *GetCalendarResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCalendarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCalendarResponse(%+v)", *p)
}

var fieldIDToName_GetCalendarResponse = map[int16]string{
	1: "base",
	2: "ics",
}

type GetLocateDateRequest struct {
}

func NewGetLocateDateRequest() *GetLocateDateRequest {
	return &GetLocateDateRequest{}
}

func (p *GetLocateDateRequest) InitDefault() {
}

func (p *GetLocateDateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLocateDateRequest(%+v)", *p)
}

var fieldIDToName_GetLocateDateRequest = map[int16]string{}

type GetLocateDateResponse struct {
	Base       *model.BaseResp   `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	LocateDate *model.LocateDate `thrift:"locateDate,2,optional" frugal:"2,optional,model.LocateDate" json:"locateDate,omitempty"`
}

func NewGetLocateDateResponse() *GetLocateDateResponse {
	return &GetLocateDateResponse{}
}

func (p *GetLocateDateResponse) InitDefault() {
}

var GetLocateDateResponse_Base_DEFAULT *model.BaseResp

func (p *GetLocateDateResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetLocateDateResponse_Base_DEFAULT
	}
	return p.Base
}

var GetLocateDateResponse_LocateDate_DEFAULT *model.LocateDate

func (p *GetLocateDateResponse) GetLocateDate() (v *model.LocateDate) {
	if !p.IsSetLocateDate() {
		return GetLocateDateResponse_LocateDate_DEFAULT
	}
	return p.LocateDate
}
func (p *GetLocateDateResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetLocateDateResponse) SetLocateDate(val *model.LocateDate) {
	p.LocateDate = val
}

func (p *GetLocateDateResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLocateDateResponse) IsSetLocateDate() bool {
	return p.LocateDate != nil
}

func (p *GetLocateDateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLocateDateResponse(%+v)", *p)
}

var fieldIDToName_GetLocateDateResponse = map[int16]string{
	1: "base",
	2: "locateDate",
}

type CourseService interface {
	GetCourseList(ctx context.Context, req *CourseListRequest) (r *CourseListResponse, err error)

	GetTermList(ctx context.Context, req *TermListRequest) (r *TermListResponse, err error)

	GetCalendar(ctx context.Context, req *GetCalendarRequest) (r *GetCalendarResponse, err error)

	GetLocateDate(ctx context.Context, req *GetLocateDateRequest) (r *GetLocateDateResponse, err error)
}

type CourseServiceGetCourseListArgs struct {
	Req *CourseListRequest `thrift:"req,1" frugal:"1,default,CourseListRequest" json:"req"`
}

func NewCourseServiceGetCourseListArgs() *CourseServiceGetCourseListArgs {
	return &CourseServiceGetCourseListArgs{}
}

func (p *CourseServiceGetCourseListArgs) InitDefault() {
}

var CourseServiceGetCourseListArgs_Req_DEFAULT *CourseListRequest

func (p *CourseServiceGetCourseListArgs) GetReq() (v *CourseListRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetCourseListArgs) SetReq(val *CourseListRequest) {
	p.Req = val
}

func (p *CourseServiceGetCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCourseListArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCourseListArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetCourseListResult struct {
	Success *CourseListResponse `thrift:"success,0,optional" frugal:"0,optional,CourseListResponse" json:"success,omitempty"`
}

func NewCourseServiceGetCourseListResult() *CourseServiceGetCourseListResult {
	return &CourseServiceGetCourseListResult{}
}

func (p *CourseServiceGetCourseListResult) InitDefault() {
}

var CourseServiceGetCourseListResult_Success_DEFAULT *CourseListResponse

func (p *CourseServiceGetCourseListResult) GetSuccess() (v *CourseListResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CourseListResponse)
}

func (p *CourseServiceGetCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCourseListResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCourseListResult = map[int16]string{
	0: "success",
}

type CourseServiceGetTermListArgs struct {
	Req *TermListRequest `thrift:"req,1" frugal:"1,default,TermListRequest" json:"req"`
}

func NewCourseServiceGetTermListArgs() *CourseServiceGetTermListArgs {
	return &CourseServiceGetTermListArgs{}
}

func (p *CourseServiceGetTermListArgs) InitDefault() {
}

var CourseServiceGetTermListArgs_Req_DEFAULT *TermListRequest

func (p *CourseServiceGetTermListArgs) GetReq() (v *TermListRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetTermListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetTermListArgs) SetReq(val *TermListRequest) {
	p.Req = val
}

func (p *CourseServiceGetTermListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetTermListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetTermListArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetTermListArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetTermListResult struct {
	Success *TermListResponse `thrift:"success,0,optional" frugal:"0,optional,TermListResponse" json:"success,omitempty"`
}

func NewCourseServiceGetTermListResult() *CourseServiceGetTermListResult {
	return &CourseServiceGetTermListResult{}
}

func (p *CourseServiceGetTermListResult) InitDefault() {
}

var CourseServiceGetTermListResult_Success_DEFAULT *TermListResponse

func (p *CourseServiceGetTermListResult) GetSuccess() (v *TermListResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetTermListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetTermListResult) SetSuccess(x interface{}) {
	p.Success = x.(*TermListResponse)
}

func (p *CourseServiceGetTermListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetTermListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetTermListResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetTermListResult = map[int16]string{
	0: "success",
}

type CourseServiceGetCalendarArgs struct {
	Req *GetCalendarRequest `thrift:"req,1" frugal:"1,default,GetCalendarRequest" json:"req"`
}

func NewCourseServiceGetCalendarArgs() *CourseServiceGetCalendarArgs {
	return &CourseServiceGetCalendarArgs{}
}

func (p *CourseServiceGetCalendarArgs) InitDefault() {
}

var CourseServiceGetCalendarArgs_Req_DEFAULT *GetCalendarRequest

func (p *CourseServiceGetCalendarArgs) GetReq() (v *GetCalendarRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetCalendarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetCalendarArgs) SetReq(val *GetCalendarRequest) {
	p.Req = val
}

func (p *CourseServiceGetCalendarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetCalendarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCalendarArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCalendarArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetCalendarResult struct {
	Success *GetCalendarResponse `thrift:"success,0,optional" frugal:"0,optional,GetCalendarResponse" json:"success,omitempty"`
}

func NewCourseServiceGetCalendarResult() *CourseServiceGetCalendarResult {
	return &CourseServiceGetCalendarResult{}
}

func (p *CourseServiceGetCalendarResult) InitDefault() {
}

var CourseServiceGetCalendarResult_Success_DEFAULT *GetCalendarResponse

func (p *CourseServiceGetCalendarResult) GetSuccess() (v *GetCalendarResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetCalendarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetCalendarResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCalendarResponse)
}

func (p *CourseServiceGetCalendarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetCalendarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCalendarResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCalendarResult = map[int16]string{
	0: "success",
}

type CourseServiceGetLocateDateArgs struct {
	Req *GetLocateDateRequest `thrift:"req,1" frugal:"1,default,GetLocateDateRequest" json:"req"`
}

func NewCourseServiceGetLocateDateArgs() *CourseServiceGetLocateDateArgs {
	return &CourseServiceGetLocateDateArgs{}
}

func (p *CourseServiceGetLocateDateArgs) InitDefault() {
}

var CourseServiceGetLocateDateArgs_Req_DEFAULT *GetLocateDateRequest

func (p *CourseServiceGetLocateDateArgs) GetReq() (v *GetLocateDateRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetLocateDateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetLocateDateArgs) SetReq(val *GetLocateDateRequest) {
	p.Req = val
}

func (p *CourseServiceGetLocateDateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetLocateDateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetLocateDateArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetLocateDateArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetLocateDateResult struct {
	Success *GetLocateDateResponse `thrift:"success,0,optional" frugal:"0,optional,GetLocateDateResponse" json:"success,omitempty"`
}

func NewCourseServiceGetLocateDateResult() *CourseServiceGetLocateDateResult {
	return &CourseServiceGetLocateDateResult{}
}

func (p *CourseServiceGetLocateDateResult) InitDefault() {
}

var CourseServiceGetLocateDateResult_Success_DEFAULT *GetLocateDateResponse

func (p *CourseServiceGetLocateDateResult) GetSuccess() (v *GetLocateDateResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetLocateDateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetLocateDateResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLocateDateResponse)
}

func (p *CourseServiceGetLocateDateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetLocateDateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetLocateDateResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetLocateDateResult = map[int16]string{
	0: "success",
}
