/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.11.3. DO NOT EDIT.

package launchscreenservice

import (
	"context"
	"errors"
	"fmt"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"

	launch_screen "github.com/west2-online/fzuhelper-server/kitex_gen/launch_screen"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateImage": kitex.NewMethodInfo(
		createImageHandler,
		newLaunchScreenServiceCreateImageArgs,
		newLaunchScreenServiceCreateImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"GetImage": kitex.NewMethodInfo(
		getImageHandler,
		newLaunchScreenServiceGetImageArgs,
		newLaunchScreenServiceGetImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeImageProperty": kitex.NewMethodInfo(
		changeImagePropertyHandler,
		newLaunchScreenServiceChangeImagePropertyArgs,
		newLaunchScreenServiceChangeImagePropertyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeImage": kitex.NewMethodInfo(
		changeImageHandler,
		newLaunchScreenServiceChangeImageArgs,
		newLaunchScreenServiceChangeImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"DeleteImage": kitex.NewMethodInfo(
		deleteImageHandler,
		newLaunchScreenServiceDeleteImageArgs,
		newLaunchScreenServiceDeleteImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MobileGetImage": kitex.NewMethodInfo(
		mobileGetImageHandler,
		newLaunchScreenServiceMobileGetImageArgs,
		newLaunchScreenServiceMobileGetImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddImagePointTime": kitex.NewMethodInfo(
		addImagePointTimeHandler,
		newLaunchScreenServiceAddImagePointTimeArgs,
		newLaunchScreenServiceAddImagePointTimeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	launchScreenServiceServiceInfo                = NewServiceInfo()
	launchScreenServiceServiceInfoForClient       = NewServiceInfoForClient()
	launchScreenServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LaunchScreenService"
	handlerType := (*launch_screen.LaunchScreenService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "launch_screen",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("LaunchScreenService.CreateImage is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &launchScreenServiceCreateImageServer{st.Stream}
	return handler.(launch_screen.LaunchScreenService).CreateImage(stream)
}

type launchScreenServiceCreateImageClient struct {
	streaming.Stream
}

func (x *launchScreenServiceCreateImageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *launchScreenServiceCreateImageClient) Send(m *launch_screen.CreateImageRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *launchScreenServiceCreateImageClient) CloseAndRecv() (*launch_screen.CreateImageResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(launch_screen.CreateImageResponse)
	return m, x.Stream.RecvMsg(m)
}

type launchScreenServiceCreateImageServer struct {
	streaming.Stream
}

func (x *launchScreenServiceCreateImageServer) SendAndClose(m *launch_screen.CreateImageResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *launchScreenServiceCreateImageServer) Recv() (*launch_screen.CreateImageRequest, error) {
	m := new(launch_screen.CreateImageRequest)
	return m, x.Stream.RecvMsg(m)
}

func newLaunchScreenServiceCreateImageArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceCreateImageArgs()
}

func newLaunchScreenServiceCreateImageResult() interface{} {
	return launch_screen.NewLaunchScreenServiceCreateImageResult()
}

func getImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*launch_screen.LaunchScreenServiceGetImageArgs)
	realResult := result.(*launch_screen.LaunchScreenServiceGetImageResult)
	success, err := handler.(launch_screen.LaunchScreenService).GetImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceGetImageArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceGetImageArgs()
}

func newLaunchScreenServiceGetImageResult() interface{} {
	return launch_screen.NewLaunchScreenServiceGetImageResult()
}

func changeImagePropertyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*launch_screen.LaunchScreenServiceChangeImagePropertyArgs)
	realResult := result.(*launch_screen.LaunchScreenServiceChangeImagePropertyResult)
	success, err := handler.(launch_screen.LaunchScreenService).ChangeImageProperty(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceChangeImagePropertyArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceChangeImagePropertyArgs()
}

func newLaunchScreenServiceChangeImagePropertyResult() interface{} {
	return launch_screen.NewLaunchScreenServiceChangeImagePropertyResult()
}

func changeImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("LaunchScreenService.ChangeImage is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &launchScreenServiceChangeImageServer{st.Stream}
	return handler.(launch_screen.LaunchScreenService).ChangeImage(stream)
}

type launchScreenServiceChangeImageClient struct {
	streaming.Stream
}

func (x *launchScreenServiceChangeImageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *launchScreenServiceChangeImageClient) Send(m *launch_screen.ChangeImageRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *launchScreenServiceChangeImageClient) CloseAndRecv() (*launch_screen.ChangeImageResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(launch_screen.ChangeImageResponse)
	return m, x.Stream.RecvMsg(m)
}

type launchScreenServiceChangeImageServer struct {
	streaming.Stream
}

func (x *launchScreenServiceChangeImageServer) SendAndClose(m *launch_screen.ChangeImageResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *launchScreenServiceChangeImageServer) Recv() (*launch_screen.ChangeImageRequest, error) {
	m := new(launch_screen.ChangeImageRequest)
	return m, x.Stream.RecvMsg(m)
}

func newLaunchScreenServiceChangeImageArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceChangeImageArgs()
}

func newLaunchScreenServiceChangeImageResult() interface{} {
	return launch_screen.NewLaunchScreenServiceChangeImageResult()
}

func deleteImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*launch_screen.LaunchScreenServiceDeleteImageArgs)
	realResult := result.(*launch_screen.LaunchScreenServiceDeleteImageResult)
	success, err := handler.(launch_screen.LaunchScreenService).DeleteImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceDeleteImageArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceDeleteImageArgs()
}

func newLaunchScreenServiceDeleteImageResult() interface{} {
	return launch_screen.NewLaunchScreenServiceDeleteImageResult()
}

func mobileGetImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*launch_screen.LaunchScreenServiceMobileGetImageArgs)
	realResult := result.(*launch_screen.LaunchScreenServiceMobileGetImageResult)
	success, err := handler.(launch_screen.LaunchScreenService).MobileGetImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceMobileGetImageArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceMobileGetImageArgs()
}

func newLaunchScreenServiceMobileGetImageResult() interface{} {
	return launch_screen.NewLaunchScreenServiceMobileGetImageResult()
}

func addImagePointTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*launch_screen.LaunchScreenServiceAddImagePointTimeArgs)
	realResult := result.(*launch_screen.LaunchScreenServiceAddImagePointTimeResult)
	success, err := handler.(launch_screen.LaunchScreenService).AddImagePointTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceAddImagePointTimeArgs() interface{} {
	return launch_screen.NewLaunchScreenServiceAddImagePointTimeArgs()
}

func newLaunchScreenServiceAddImagePointTimeResult() interface{} {
	return launch_screen.NewLaunchScreenServiceAddImagePointTimeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateImage(ctx context.Context) (LaunchScreenService_CreateImageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "CreateImage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &launchScreenServiceCreateImageClient{res.Stream}
	return stream, nil
}

func (p *kClient) GetImage(ctx context.Context, req *launch_screen.GetImageRequest) (r *launch_screen.GetImageResponse, err error) {
	var _args launch_screen.LaunchScreenServiceGetImageArgs
	_args.Req = req
	var _result launch_screen.LaunchScreenServiceGetImageResult
	if err = p.c.Call(ctx, "GetImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeImageProperty(ctx context.Context, req *launch_screen.ChangeImagePropertyRequest) (r *launch_screen.ChangeImagePropertyResponse, err error) {
	var _args launch_screen.LaunchScreenServiceChangeImagePropertyArgs
	_args.Req = req
	var _result launch_screen.LaunchScreenServiceChangeImagePropertyResult
	if err = p.c.Call(ctx, "ChangeImageProperty", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeImage(ctx context.Context) (LaunchScreenService_ChangeImageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ChangeImage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &launchScreenServiceChangeImageClient{res.Stream}
	return stream, nil
}

func (p *kClient) DeleteImage(ctx context.Context, req *launch_screen.DeleteImageRequest) (r *launch_screen.DeleteImageResponse, err error) {
	var _args launch_screen.LaunchScreenServiceDeleteImageArgs
	_args.Req = req
	var _result launch_screen.LaunchScreenServiceDeleteImageResult
	if err = p.c.Call(ctx, "DeleteImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MobileGetImage(ctx context.Context, req *launch_screen.MobileGetImageRequest) (r *launch_screen.MobileGetImageResponse, err error) {
	var _args launch_screen.LaunchScreenServiceMobileGetImageArgs
	_args.Req = req
	var _result launch_screen.LaunchScreenServiceMobileGetImageResult
	if err = p.c.Call(ctx, "MobileGetImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddImagePointTime(ctx context.Context, req *launch_screen.AddImagePointTimeRequest) (r *launch_screen.AddImagePointTimeResponse, err error) {
	var _args launch_screen.LaunchScreenServiceAddImagePointTimeArgs
	_args.Req = req
	var _result launch_screen.LaunchScreenServiceAddImagePointTimeResult
	if err = p.c.Call(ctx, "AddImagePointTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
