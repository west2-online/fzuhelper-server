/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package launchscreenservice

import (
	"context"

	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"

	launch_screen "github.com/west2-online/fzuhelper-server/kitex_gen/launch_screen"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetImage(ctx context.Context, req *launch_screen.GetImageRequest, callOptions ...callopt.Option) (r *launch_screen.GetImageResponse, err error)
	ChangeImageProperty(ctx context.Context, req *launch_screen.ChangeImagePropertyRequest, callOptions ...callopt.Option) (r *launch_screen.ChangeImagePropertyResponse, err error)
	DeleteImage(ctx context.Context, req *launch_screen.DeleteImageRequest, callOptions ...callopt.Option) (r *launch_screen.DeleteImageResponse, err error)
	MobileGetImage(ctx context.Context, req *launch_screen.MobileGetImageRequest, callOptions ...callopt.Option) (r *launch_screen.MobileGetImageResponse, err error)
	AddImagePointTime(ctx context.Context, req *launch_screen.AddImagePointTimeRequest, callOptions ...callopt.Option) (r *launch_screen.AddImagePointTimeResponse, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	CreateImage(ctx context.Context, callOptions ...streamcall.Option) (stream LaunchScreenService_CreateImageClient, err error)
	ChangeImage(ctx context.Context, callOptions ...streamcall.Option) (stream LaunchScreenService_ChangeImageClient, err error)
}

type LaunchScreenService_CreateImageClient interface {
	streaming.Stream
	Send(*launch_screen.CreateImageRequest) error
	CloseAndRecv() (*launch_screen.CreateImageResponse, error)
}

type LaunchScreenService_ChangeImageClient interface {
	streaming.Stream
	Send(*launch_screen.ChangeImageRequest) error
	CloseAndRecv() (*launch_screen.ChangeImageResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kLaunchScreenServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLaunchScreenServiceClient struct {
	*kClient
}

func (p *kLaunchScreenServiceClient) GetImage(ctx context.Context, req *launch_screen.GetImageRequest, callOptions ...callopt.Option) (r *launch_screen.GetImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) ChangeImageProperty(ctx context.Context, req *launch_screen.ChangeImagePropertyRequest, callOptions ...callopt.Option) (r *launch_screen.ChangeImagePropertyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeImageProperty(ctx, req)
}

func (p *kLaunchScreenServiceClient) DeleteImage(ctx context.Context, req *launch_screen.DeleteImageRequest, callOptions ...callopt.Option) (r *launch_screen.DeleteImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) MobileGetImage(ctx context.Context, req *launch_screen.MobileGetImageRequest, callOptions ...callopt.Option) (r *launch_screen.MobileGetImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MobileGetImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) AddImagePointTime(ctx context.Context, req *launch_screen.AddImagePointTimeRequest, callOptions ...callopt.Option) (r *launch_screen.AddImagePointTimeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddImagePointTime(ctx, req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kLaunchScreenServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLaunchScreenServiceStreamClient struct {
	*kClient
}

func (p *kLaunchScreenServiceStreamClient) CreateImage(ctx context.Context, callOptions ...streamcall.Option) (stream LaunchScreenService_CreateImageClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.CreateImage(ctx)
}

func (p *kLaunchScreenServiceStreamClient) ChangeImage(ctx context.Context, callOptions ...streamcall.Option) (stream LaunchScreenService_ChangeImageClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.ChangeImage(ctx)
}
