/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package launch_screen

import (
	"bytes"
	"context"
	"fmt"
	"strings"

	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"github.com/cloudwego/kitex/pkg/streaming"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type CreateImageRequest struct {
	PicType     int64  `thrift:"pic_type,1,required" frugal:"1,required,i64" json:"pic_type"`
	Duration    *int64 `thrift:"duration,2,optional" frugal:"2,optional,i64" json:"duration,omitempty"`
	Href        string `thrift:"href,3" frugal:"3,default,string" json:"href"`
	Image       []byte `thrift:"image,4,required" frugal:"4,required,binary" json:"image"`
	StartAt     int64  `thrift:"start_at,5,required" frugal:"5,required,i64" json:"start_at"`
	EndAt       int64  `thrift:"end_at,6,required" frugal:"6,required,i64" json:"end_at"`
	SType       int64  `thrift:"s_type,7,required" frugal:"7,required,i64" json:"s_type"`
	Frequency   int64  `thrift:"frequency,8,required" frugal:"8,required,i64" json:"frequency"`
	StartTime   int64  `thrift:"start_time,9,required" frugal:"9,required,i64" json:"start_time"`
	EndTime     int64  `thrift:"end_time,10,required" frugal:"10,required,i64" json:"end_time"`
	Text        string `thrift:"text,11,required" frugal:"11,required,string" json:"text"`
	Regex       string `thrift:"regex,12,required" frugal:"12,required,string" json:"regex"`
	BufferCount int64  `thrift:"buffer_count,13" frugal:"13,default,i64" json:"buffer_count"`
}

func NewCreateImageRequest() *CreateImageRequest {
	return &CreateImageRequest{}
}

func (p *CreateImageRequest) InitDefault() {
}

func (p *CreateImageRequest) GetPicType() (v int64) {
	return p.PicType
}

var CreateImageRequest_Duration_DEFAULT int64

func (p *CreateImageRequest) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return CreateImageRequest_Duration_DEFAULT
	}
	return *p.Duration
}

func (p *CreateImageRequest) GetHref() (v string) {
	return p.Href
}

func (p *CreateImageRequest) GetImage() (v []byte) {
	return p.Image
}

func (p *CreateImageRequest) GetStartAt() (v int64) {
	return p.StartAt
}

func (p *CreateImageRequest) GetEndAt() (v int64) {
	return p.EndAt
}

func (p *CreateImageRequest) GetSType() (v int64) {
	return p.SType
}

func (p *CreateImageRequest) GetFrequency() (v int64) {
	return p.Frequency
}

func (p *CreateImageRequest) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *CreateImageRequest) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *CreateImageRequest) GetText() (v string) {
	return p.Text
}

func (p *CreateImageRequest) GetRegex() (v string) {
	return p.Regex
}

func (p *CreateImageRequest) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *CreateImageRequest) SetPicType(val int64) {
	p.PicType = val
}
func (p *CreateImageRequest) SetDuration(val *int64) {
	p.Duration = val
}
func (p *CreateImageRequest) SetHref(val string) {
	p.Href = val
}
func (p *CreateImageRequest) SetImage(val []byte) {
	p.Image = val
}
func (p *CreateImageRequest) SetStartAt(val int64) {
	p.StartAt = val
}
func (p *CreateImageRequest) SetEndAt(val int64) {
	p.EndAt = val
}
func (p *CreateImageRequest) SetSType(val int64) {
	p.SType = val
}
func (p *CreateImageRequest) SetFrequency(val int64) {
	p.Frequency = val
}
func (p *CreateImageRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *CreateImageRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *CreateImageRequest) SetText(val string) {
	p.Text = val
}
func (p *CreateImageRequest) SetRegex(val string) {
	p.Regex = val
}
func (p *CreateImageRequest) SetBufferCount(val int64) {
	p.BufferCount = val
}

var fieldIDToName_CreateImageRequest = map[int16]string{
	1:  "pic_type",
	2:  "duration",
	3:  "href",
	4:  "image",
	5:  "start_at",
	6:  "end_at",
	7:  "s_type",
	8:  "frequency",
	9:  "start_time",
	10: "end_time",
	11: "text",
	12: "regex",
	13: "buffer_count",
}

func (p *CreateImageRequest) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *CreateImageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPicType bool = false
	var issetImage bool = false
	var issetStartAt bool = false
	var issetEndAt bool = false
	var issetSType bool = false
	var issetFrequency bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetText bool = false
	var issetRegex bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetSType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrequency = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetText = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetRegex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPicType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStartAt {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetEndAt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetSType {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetFrequency {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetText {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetRegex {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateImageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateImageRequest[fieldId]))
}

func (p *CreateImageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PicType = _field
	return nil
}
func (p *CreateImageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Duration = _field
	return nil
}
func (p *CreateImageRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Href = _field
	return nil
}
func (p *CreateImageRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Image = _field
	return nil
}
func (p *CreateImageRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *CreateImageRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *CreateImageRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SType = _field
	return nil
}
func (p *CreateImageRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Frequency = _field
	return nil
}
func (p *CreateImageRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *CreateImageRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *CreateImageRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *CreateImageRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Regex = _field
	return nil
}
func (p *CreateImageRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BufferCount = _field
	return nil
}

func (p *CreateImageRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateImageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateImageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pic_type", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PicType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateImageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err = oprot.WriteFieldBegin("duration", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Duration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateImageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("href", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Href); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateImageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("image", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Image)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateImageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_at", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateImageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_at", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateImageRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("s_type", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateImageRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("frequency", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Frequency); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateImageRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateImageRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateImageRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateImageRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("regex", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Regex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateImageRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("buffer_count", thrift.I64, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BufferCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateImageRequest(%+v)", *p)

}

func (p *CreateImageRequest) DeepEqual(ano *CreateImageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PicType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Duration) {
		return false
	}
	if !p.Field3DeepEqual(ano.Href) {
		return false
	}
	if !p.Field4DeepEqual(ano.Image) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.EndAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.SType) {
		return false
	}
	if !p.Field8DeepEqual(ano.Frequency) {
		return false
	}
	if !p.Field9DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.Text) {
		return false
	}
	if !p.Field12DeepEqual(ano.Regex) {
		return false
	}
	if !p.Field13DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *CreateImageRequest) Field1DeepEqual(src int64) bool {

	if p.PicType != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field2DeepEqual(src *int64) bool {

	if p.Duration == src {
		return true
	} else if p.Duration == nil || src == nil {
		return false
	}
	if *p.Duration != *src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Href, src) != 0 {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field5DeepEqual(src int64) bool {

	if p.StartAt != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field6DeepEqual(src int64) bool {

	if p.EndAt != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field7DeepEqual(src int64) bool {

	if p.SType != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field8DeepEqual(src int64) bool {

	if p.Frequency != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field9DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field10DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Regex, src) != 0 {
		return false
	}
	return true
}
func (p *CreateImageRequest) Field13DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

type CreateImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewCreateImageResponse() *CreateImageResponse {
	return &CreateImageResponse{}
}

func (p *CreateImageResponse) InitDefault() {
}

var CreateImageResponse_Base_DEFAULT *model.BaseResp

func (p *CreateImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateImageResponse_Base_DEFAULT
	}
	return p.Base
}

var CreateImageResponse_Picture_DEFAULT *model.Picture

func (p *CreateImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return CreateImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *CreateImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

var fieldIDToName_CreateImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

func (p *CreateImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *CreateImageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateImageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateImageResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *CreateImageResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewPicture()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Picture = _field
	return nil
}

func (p *CreateImageResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateImageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateImageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateImageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Picture.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateImageResponse(%+v)", *p)

}

func (p *CreateImageResponse) DeepEqual(ano *CreateImageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *CreateImageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateImageResponse) Field2DeepEqual(src *model.Picture) bool {

	if !p.Picture.DeepEqual(src) {
		return false
	}
	return true
}

type GetImageRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewGetImageRequest() *GetImageRequest {
	return &GetImageRequest{}
}

func (p *GetImageRequest) InitDefault() {
}

func (p *GetImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *GetImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}

var fieldIDToName_GetImageRequest = map[int16]string{
	1: "picture_id",
}

func (p *GetImageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPictureId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPictureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPictureId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetImageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetImageRequest[fieldId]))
}

func (p *GetImageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PictureId = _field
	return nil
}

func (p *GetImageRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetImageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetImageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PictureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetImageRequest(%+v)", *p)

}

func (p *GetImageRequest) DeepEqual(ano *GetImageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PictureId) {
		return false
	}
	return true
}

func (p *GetImageRequest) Field1DeepEqual(src int64) bool {

	if p.PictureId != src {
		return false
	}
	return true
}

type GetImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewGetImageResponse() *GetImageResponse {
	return &GetImageResponse{}
}

func (p *GetImageResponse) InitDefault() {
}

var GetImageResponse_Base_DEFAULT *model.BaseResp

func (p *GetImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetImageResponse_Base_DEFAULT
	}
	return p.Base
}

var GetImageResponse_Picture_DEFAULT *model.Picture

func (p *GetImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return GetImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *GetImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

var fieldIDToName_GetImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

func (p *GetImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *GetImageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetImageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetImageResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetImageResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewPicture()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Picture = _field
	return nil
}

func (p *GetImageResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetImageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetImageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetImageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Picture.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetImageResponse(%+v)", *p)

}

func (p *GetImageResponse) DeepEqual(ano *GetImageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *GetImageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetImageResponse) Field2DeepEqual(src *model.Picture) bool {

	if !p.Picture.DeepEqual(src) {
		return false
	}
	return true
}

type ChangeImagePropertyRequest struct {
	PicType   int64   `thrift:"pic_type,1,required" frugal:"1,required,i64" json:"pic_type"`
	Duration  *int64  `thrift:"duration,2,optional" frugal:"2,optional,i64" json:"duration,omitempty"`
	Href      *string `thrift:"href,3,optional" frugal:"3,optional,string" json:"href,omitempty"`
	StartAt   int64   `thrift:"start_at,4,required" frugal:"4,required,i64" json:"start_at"`
	EndAt     int64   `thrift:"end_at,5,required" frugal:"5,required,i64" json:"end_at"`
	SType     int64   `thrift:"s_type,6,required" frugal:"6,required,i64" json:"s_type"`
	Frequency int64   `thrift:"frequency,7,required" frugal:"7,required,i64" json:"frequency"`
	StartTime int64   `thrift:"start_time,8,required" frugal:"8,required,i64" json:"start_time"`
	EndTime   int64   `thrift:"end_time,9,required" frugal:"9,required,i64" json:"end_time"`
	Text      string  `thrift:"text,10,required" frugal:"10,required,string" json:"text"`
	PictureId int64   `thrift:"picture_id,11,required" frugal:"11,required,i64" json:"picture_id"`
	Regex     string  `thrift:"regex,12,required" frugal:"12,required,string" json:"regex"`
}

func NewChangeImagePropertyRequest() *ChangeImagePropertyRequest {
	return &ChangeImagePropertyRequest{}
}

func (p *ChangeImagePropertyRequest) InitDefault() {
}

func (p *ChangeImagePropertyRequest) GetPicType() (v int64) {
	return p.PicType
}

var ChangeImagePropertyRequest_Duration_DEFAULT int64

func (p *ChangeImagePropertyRequest) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return ChangeImagePropertyRequest_Duration_DEFAULT
	}
	return *p.Duration
}

var ChangeImagePropertyRequest_Href_DEFAULT string

func (p *ChangeImagePropertyRequest) GetHref() (v string) {
	if !p.IsSetHref() {
		return ChangeImagePropertyRequest_Href_DEFAULT
	}
	return *p.Href
}

func (p *ChangeImagePropertyRequest) GetStartAt() (v int64) {
	return p.StartAt
}

func (p *ChangeImagePropertyRequest) GetEndAt() (v int64) {
	return p.EndAt
}

func (p *ChangeImagePropertyRequest) GetSType() (v int64) {
	return p.SType
}

func (p *ChangeImagePropertyRequest) GetFrequency() (v int64) {
	return p.Frequency
}

func (p *ChangeImagePropertyRequest) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *ChangeImagePropertyRequest) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *ChangeImagePropertyRequest) GetText() (v string) {
	return p.Text
}

func (p *ChangeImagePropertyRequest) GetPictureId() (v int64) {
	return p.PictureId
}

func (p *ChangeImagePropertyRequest) GetRegex() (v string) {
	return p.Regex
}
func (p *ChangeImagePropertyRequest) SetPicType(val int64) {
	p.PicType = val
}
func (p *ChangeImagePropertyRequest) SetDuration(val *int64) {
	p.Duration = val
}
func (p *ChangeImagePropertyRequest) SetHref(val *string) {
	p.Href = val
}
func (p *ChangeImagePropertyRequest) SetStartAt(val int64) {
	p.StartAt = val
}
func (p *ChangeImagePropertyRequest) SetEndAt(val int64) {
	p.EndAt = val
}
func (p *ChangeImagePropertyRequest) SetSType(val int64) {
	p.SType = val
}
func (p *ChangeImagePropertyRequest) SetFrequency(val int64) {
	p.Frequency = val
}
func (p *ChangeImagePropertyRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *ChangeImagePropertyRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *ChangeImagePropertyRequest) SetText(val string) {
	p.Text = val
}
func (p *ChangeImagePropertyRequest) SetPictureId(val int64) {
	p.PictureId = val
}
func (p *ChangeImagePropertyRequest) SetRegex(val string) {
	p.Regex = val
}

var fieldIDToName_ChangeImagePropertyRequest = map[int16]string{
	1:  "pic_type",
	2:  "duration",
	3:  "href",
	4:  "start_at",
	5:  "end_at",
	6:  "s_type",
	7:  "frequency",
	8:  "start_time",
	9:  "end_time",
	10: "text",
	11: "picture_id",
	12: "regex",
}

func (p *ChangeImagePropertyRequest) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *ChangeImagePropertyRequest) IsSetHref() bool {
	return p.Href != nil
}

func (p *ChangeImagePropertyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPicType bool = false
	var issetStartAt bool = false
	var issetEndAt bool = false
	var issetSType bool = false
	var issetFrequency bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetText bool = false
	var issetPictureId bool = false
	var issetRegex bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetSType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrequency = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetText = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPictureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetRegex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPicType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartAt {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetEndAt {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFrequency {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetText {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPictureId {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetRegex {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeImagePropertyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChangeImagePropertyRequest[fieldId]))
}

func (p *ChangeImagePropertyRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PicType = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Duration = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Href = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SType = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Frequency = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PictureId = _field
	return nil
}
func (p *ChangeImagePropertyRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Regex = _field
	return nil
}

func (p *ChangeImagePropertyRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImagePropertyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pic_type", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PicType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err = oprot.WriteFieldBegin("duration", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Duration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHref() {
		if err = oprot.WriteFieldBegin("href", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Href); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_at", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_at", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("s_type", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("frequency", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Frequency); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture_id", thrift.I64, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PictureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("regex", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Regex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ChangeImagePropertyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImagePropertyRequest(%+v)", *p)

}

func (p *ChangeImagePropertyRequest) DeepEqual(ano *ChangeImagePropertyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PicType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Duration) {
		return false
	}
	if !p.Field3DeepEqual(ano.Href) {
		return false
	}
	if !p.Field4DeepEqual(ano.StartAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.EndAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.SType) {
		return false
	}
	if !p.Field7DeepEqual(ano.Frequency) {
		return false
	}
	if !p.Field8DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.Text) {
		return false
	}
	if !p.Field11DeepEqual(ano.PictureId) {
		return false
	}
	if !p.Field12DeepEqual(ano.Regex) {
		return false
	}
	return true
}

func (p *ChangeImagePropertyRequest) Field1DeepEqual(src int64) bool {

	if p.PicType != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field2DeepEqual(src *int64) bool {

	if p.Duration == src {
		return true
	} else if p.Duration == nil || src == nil {
		return false
	}
	if *p.Duration != *src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field3DeepEqual(src *string) bool {

	if p.Href == src {
		return true
	} else if p.Href == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Href, *src) != 0 {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field4DeepEqual(src int64) bool {

	if p.StartAt != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field5DeepEqual(src int64) bool {

	if p.EndAt != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field6DeepEqual(src int64) bool {

	if p.SType != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field7DeepEqual(src int64) bool {

	if p.Frequency != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field8DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field9DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field11DeepEqual(src int64) bool {

	if p.PictureId != src {
		return false
	}
	return true
}
func (p *ChangeImagePropertyRequest) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Regex, src) != 0 {
		return false
	}
	return true
}

type ChangeImagePropertyResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewChangeImagePropertyResponse() *ChangeImagePropertyResponse {
	return &ChangeImagePropertyResponse{}
}

func (p *ChangeImagePropertyResponse) InitDefault() {
}

var ChangeImagePropertyResponse_Base_DEFAULT *model.BaseResp

func (p *ChangeImagePropertyResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ChangeImagePropertyResponse_Base_DEFAULT
	}
	return p.Base
}

var ChangeImagePropertyResponse_Picture_DEFAULT *model.Picture

func (p *ChangeImagePropertyResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return ChangeImagePropertyResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *ChangeImagePropertyResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ChangeImagePropertyResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

var fieldIDToName_ChangeImagePropertyResponse = map[int16]string{
	1: "base",
	2: "picture",
}

func (p *ChangeImagePropertyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeImagePropertyResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ChangeImagePropertyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeImagePropertyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChangeImagePropertyResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *ChangeImagePropertyResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewPicture()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Picture = _field
	return nil
}

func (p *ChangeImagePropertyResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImagePropertyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeImagePropertyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeImagePropertyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Picture.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeImagePropertyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImagePropertyResponse(%+v)", *p)

}

func (p *ChangeImagePropertyResponse) DeepEqual(ano *ChangeImagePropertyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *ChangeImagePropertyResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChangeImagePropertyResponse) Field2DeepEqual(src *model.Picture) bool {

	if !p.Picture.DeepEqual(src) {
		return false
	}
	return true
}

type ChangeImageRequest struct {
	PictureId   int64  `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
	Image       []byte `thrift:"image,2,required" frugal:"2,required,binary" json:"image"`
	BufferCount int64  `thrift:"buffer_count,3" frugal:"3,default,i64" json:"buffer_count"`
}

func NewChangeImageRequest() *ChangeImageRequest {
	return &ChangeImageRequest{}
}

func (p *ChangeImageRequest) InitDefault() {
}

func (p *ChangeImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}

func (p *ChangeImageRequest) GetImage() (v []byte) {
	return p.Image
}

func (p *ChangeImageRequest) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *ChangeImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}
func (p *ChangeImageRequest) SetImage(val []byte) {
	p.Image = val
}
func (p *ChangeImageRequest) SetBufferCount(val int64) {
	p.BufferCount = val
}

var fieldIDToName_ChangeImageRequest = map[int16]string{
	1: "picture_id",
	2: "image",
	3: "buffer_count",
}

func (p *ChangeImageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPictureId bool = false
	var issetImage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPictureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPictureId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeImageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChangeImageRequest[fieldId]))
}

func (p *ChangeImageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PictureId = _field
	return nil
}
func (p *ChangeImageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Image = _field
	return nil
}
func (p *ChangeImageRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BufferCount = _field
	return nil
}

func (p *ChangeImageRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeImageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PictureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeImageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("image", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Image)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeImageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("buffer_count", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BufferCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChangeImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImageRequest(%+v)", *p)

}

func (p *ChangeImageRequest) DeepEqual(ano *ChangeImageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PictureId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Image) {
		return false
	}
	if !p.Field3DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *ChangeImageRequest) Field1DeepEqual(src int64) bool {

	if p.PictureId != src {
		return false
	}
	return true
}
func (p *ChangeImageRequest) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}
func (p *ChangeImageRequest) Field3DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

type ChangeImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewChangeImageResponse() *ChangeImageResponse {
	return &ChangeImageResponse{}
}

func (p *ChangeImageResponse) InitDefault() {
}

var ChangeImageResponse_Base_DEFAULT *model.BaseResp

func (p *ChangeImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ChangeImageResponse_Base_DEFAULT
	}
	return p.Base
}

var ChangeImageResponse_Picture_DEFAULT *model.Picture

func (p *ChangeImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return ChangeImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *ChangeImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ChangeImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

var fieldIDToName_ChangeImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

func (p *ChangeImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ChangeImageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeImageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChangeImageResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *ChangeImageResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewPicture()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Picture = _field
	return nil
}

func (p *ChangeImageResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeImageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeImageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Picture.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImageResponse(%+v)", *p)

}

func (p *ChangeImageResponse) DeepEqual(ano *ChangeImageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *ChangeImageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChangeImageResponse) Field2DeepEqual(src *model.Picture) bool {

	if !p.Picture.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteImageRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewDeleteImageRequest() *DeleteImageRequest {
	return &DeleteImageRequest{}
}

func (p *DeleteImageRequest) InitDefault() {
}

func (p *DeleteImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *DeleteImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}

var fieldIDToName_DeleteImageRequest = map[int16]string{
	1: "picture_id",
}

func (p *DeleteImageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPictureId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPictureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPictureId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteImageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteImageRequest[fieldId]))
}

func (p *DeleteImageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PictureId = _field
	return nil
}

func (p *DeleteImageRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteImageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteImageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PictureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteImageRequest(%+v)", *p)

}

func (p *DeleteImageRequest) DeepEqual(ano *DeleteImageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PictureId) {
		return false
	}
	return true
}

func (p *DeleteImageRequest) Field1DeepEqual(src int64) bool {

	if p.PictureId != src {
		return false
	}
	return true
}

type DeleteImageResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewDeleteImageResponse() *DeleteImageResponse {
	return &DeleteImageResponse{}
}

func (p *DeleteImageResponse) InitDefault() {
}

var DeleteImageResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteImageResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

var fieldIDToName_DeleteImageResponse = map[int16]string{
	1: "base",
}

func (p *DeleteImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteImageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteImageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteImageResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteImageResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteImageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteImageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteImageResponse(%+v)", *p)

}

func (p *DeleteImageResponse) DeepEqual(ano *DeleteImageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteImageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type MobileGetImageRequest struct {
	SType     int64   `thrift:"s_type,1,required" frugal:"1,required,i64" json:"s_type"`
	StudentId string  `thrift:"student_id,2,required" frugal:"2,required,string" json:"student_id"`
	College   *string `thrift:"college,3,optional" frugal:"3,optional,string" json:"college,omitempty"`
	Device    string  `thrift:"device,4,required" frugal:"4,required,string" json:"device"`
}

func NewMobileGetImageRequest() *MobileGetImageRequest {
	return &MobileGetImageRequest{}
}

func (p *MobileGetImageRequest) InitDefault() {
}

func (p *MobileGetImageRequest) GetSType() (v int64) {
	return p.SType
}

func (p *MobileGetImageRequest) GetStudentId() (v string) {
	return p.StudentId
}

var MobileGetImageRequest_College_DEFAULT string

func (p *MobileGetImageRequest) GetCollege() (v string) {
	if !p.IsSetCollege() {
		return MobileGetImageRequest_College_DEFAULT
	}
	return *p.College
}

func (p *MobileGetImageRequest) GetDevice() (v string) {
	return p.Device
}
func (p *MobileGetImageRequest) SetSType(val int64) {
	p.SType = val
}
func (p *MobileGetImageRequest) SetStudentId(val string) {
	p.StudentId = val
}
func (p *MobileGetImageRequest) SetCollege(val *string) {
	p.College = val
}
func (p *MobileGetImageRequest) SetDevice(val string) {
	p.Device = val
}

var fieldIDToName_MobileGetImageRequest = map[int16]string{
	1: "s_type",
	2: "student_id",
	3: "college",
	4: "device",
}

func (p *MobileGetImageRequest) IsSetCollege() bool {
	return p.College != nil
}

func (p *MobileGetImageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSType bool = false
	var issetStudentId bool = false
	var issetDevice bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStudentId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDevice = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStudentId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDevice {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MobileGetImageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MobileGetImageRequest[fieldId]))
}

func (p *MobileGetImageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SType = _field
	return nil
}
func (p *MobileGetImageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentId = _field
	return nil
}
func (p *MobileGetImageRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.College = _field
	return nil
}
func (p *MobileGetImageRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Device = _field
	return nil
}

func (p *MobileGetImageRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MobileGetImageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MobileGetImageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("s_type", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MobileGetImageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StudentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MobileGetImageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollege() {
		if err = oprot.WriteFieldBegin("college", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.College); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MobileGetImageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("device", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Device); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MobileGetImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MobileGetImageRequest(%+v)", *p)

}

func (p *MobileGetImageRequest) DeepEqual(ano *MobileGetImageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SType) {
		return false
	}
	if !p.Field2DeepEqual(ano.StudentId) {
		return false
	}
	if !p.Field3DeepEqual(ano.College) {
		return false
	}
	if !p.Field4DeepEqual(ano.Device) {
		return false
	}
	return true
}

func (p *MobileGetImageRequest) Field1DeepEqual(src int64) bool {

	if p.SType != src {
		return false
	}
	return true
}
func (p *MobileGetImageRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StudentId, src) != 0 {
		return false
	}
	return true
}
func (p *MobileGetImageRequest) Field3DeepEqual(src *string) bool {

	if p.College == src {
		return true
	} else if p.College == nil || src == nil {
		return false
	}
	if strings.Compare(*p.College, *src) != 0 {
		return false
	}
	return true
}
func (p *MobileGetImageRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Device, src) != 0 {
		return false
	}
	return true
}

type MobileGetImageResponse struct {
	Base        *model.BaseResp  `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Count       *int64           `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
	PictureList []*model.Picture `thrift:"picture_list,3,optional" frugal:"3,optional,list<model.Picture>" json:"picture_list,omitempty"`
}

func NewMobileGetImageResponse() *MobileGetImageResponse {
	return &MobileGetImageResponse{}
}

func (p *MobileGetImageResponse) InitDefault() {
}

var MobileGetImageResponse_Base_DEFAULT *model.BaseResp

func (p *MobileGetImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return MobileGetImageResponse_Base_DEFAULT
	}
	return p.Base
}

var MobileGetImageResponse_Count_DEFAULT int64

func (p *MobileGetImageResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return MobileGetImageResponse_Count_DEFAULT
	}
	return *p.Count
}

var MobileGetImageResponse_PictureList_DEFAULT []*model.Picture

func (p *MobileGetImageResponse) GetPictureList() (v []*model.Picture) {
	if !p.IsSetPictureList() {
		return MobileGetImageResponse_PictureList_DEFAULT
	}
	return p.PictureList
}
func (p *MobileGetImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *MobileGetImageResponse) SetCount(val *int64) {
	p.Count = val
}
func (p *MobileGetImageResponse) SetPictureList(val []*model.Picture) {
	p.PictureList = val
}

var fieldIDToName_MobileGetImageResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "picture_list",
}

func (p *MobileGetImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MobileGetImageResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *MobileGetImageResponse) IsSetPictureList() bool {
	return p.PictureList != nil
}

func (p *MobileGetImageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MobileGetImageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MobileGetImageResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *MobileGetImageResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Count = _field
	return nil
}
func (p *MobileGetImageResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*model.Picture, 0, size)
	values := make([]model.Picture, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PictureList = _field
	return nil
}

func (p *MobileGetImageResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MobileGetImageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MobileGetImageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MobileGetImageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MobileGetImageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPictureList() {
		if err = oprot.WriteFieldBegin("picture_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PictureList)); err != nil {
			return err
		}
		for _, v := range p.PictureList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MobileGetImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MobileGetImageResponse(%+v)", *p)

}

func (p *MobileGetImageResponse) DeepEqual(ano *MobileGetImageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.PictureList) {
		return false
	}
	return true
}

func (p *MobileGetImageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *MobileGetImageResponse) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *MobileGetImageResponse) Field3DeepEqual(src []*model.Picture) bool {

	if len(p.PictureList) != len(src) {
		return false
	}
	for i, v := range p.PictureList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type AddImagePointTimeRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewAddImagePointTimeRequest() *AddImagePointTimeRequest {
	return &AddImagePointTimeRequest{}
}

func (p *AddImagePointTimeRequest) InitDefault() {
}

func (p *AddImagePointTimeRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *AddImagePointTimeRequest) SetPictureId(val int64) {
	p.PictureId = val
}

var fieldIDToName_AddImagePointTimeRequest = map[int16]string{
	1: "picture_id",
}

func (p *AddImagePointTimeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPictureId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPictureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPictureId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddImagePointTimeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddImagePointTimeRequest[fieldId]))
}

func (p *AddImagePointTimeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PictureId = _field
	return nil
}

func (p *AddImagePointTimeRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AddImagePointTimeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddImagePointTimeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PictureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddImagePointTimeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddImagePointTimeRequest(%+v)", *p)

}

func (p *AddImagePointTimeRequest) DeepEqual(ano *AddImagePointTimeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PictureId) {
		return false
	}
	return true
}

func (p *AddImagePointTimeRequest) Field1DeepEqual(src int64) bool {

	if p.PictureId != src {
		return false
	}
	return true
}

type AddImagePointTimeResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewAddImagePointTimeResponse() *AddImagePointTimeResponse {
	return &AddImagePointTimeResponse{}
}

func (p *AddImagePointTimeResponse) InitDefault() {
}

var AddImagePointTimeResponse_Base_DEFAULT *model.BaseResp

func (p *AddImagePointTimeResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddImagePointTimeResponse_Base_DEFAULT
	}
	return p.Base
}

var AddImagePointTimeResponse_Picture_DEFAULT *model.Picture

func (p *AddImagePointTimeResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return AddImagePointTimeResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *AddImagePointTimeResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddImagePointTimeResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

var fieldIDToName_AddImagePointTimeResponse = map[int16]string{
	1: "base",
	2: "picture",
}

func (p *AddImagePointTimeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddImagePointTimeResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *AddImagePointTimeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddImagePointTimeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddImagePointTimeResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *AddImagePointTimeResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewPicture()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Picture = _field
	return nil
}

func (p *AddImagePointTimeResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AddImagePointTimeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddImagePointTimeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddImagePointTimeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Picture.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddImagePointTimeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddImagePointTimeResponse(%+v)", *p)

}

func (p *AddImagePointTimeResponse) DeepEqual(ano *AddImagePointTimeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *AddImagePointTimeResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddImagePointTimeResponse) Field2DeepEqual(src *model.Picture) bool {

	if !p.Picture.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenService interface {
	CreateImage(stream LaunchScreenService_CreateImageServer) (err error)

	GetImage(ctx context.Context, req *GetImageRequest) (r *GetImageResponse, err error)

	ChangeImageProperty(ctx context.Context, req *ChangeImagePropertyRequest) (r *ChangeImagePropertyResponse, err error)

	ChangeImage(stream LaunchScreenService_ChangeImageServer) (err error)

	DeleteImage(ctx context.Context, req *DeleteImageRequest) (r *DeleteImageResponse, err error)

	MobileGetImage(ctx context.Context, req *MobileGetImageRequest) (r *MobileGetImageResponse, err error)

	AddImagePointTime(ctx context.Context, req *AddImagePointTimeRequest) (r *AddImagePointTimeResponse, err error)
}

type LaunchScreenService_CreateImageServer interface {
	streaming.Stream

	Recv() (*CreateImageRequest, error)

	SendAndClose(*CreateImageResponse) error
}
type LaunchScreenService_ChangeImageServer interface {
	streaming.Stream

	Recv() (*ChangeImageRequest, error)

	SendAndClose(*ChangeImageResponse) error
}

type LaunchScreenServiceCreateImageArgs struct {
	Req *CreateImageRequest `thrift:"req,1" frugal:"1,default,CreateImageRequest" json:"req"`
}

func NewLaunchScreenServiceCreateImageArgs() *LaunchScreenServiceCreateImageArgs {
	return &LaunchScreenServiceCreateImageArgs{}
}

func (p *LaunchScreenServiceCreateImageArgs) InitDefault() {
}

var LaunchScreenServiceCreateImageArgs_Req_DEFAULT *CreateImageRequest

func (p *LaunchScreenServiceCreateImageArgs) GetReq() (v *CreateImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceCreateImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceCreateImageArgs) SetReq(val *CreateImageRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceCreateImageArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceCreateImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceCreateImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceCreateImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateImageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceCreateImageArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceCreateImageArgs(%+v)", *p)

}

func (p *LaunchScreenServiceCreateImageArgs) DeepEqual(ano *LaunchScreenServiceCreateImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceCreateImageArgs) Field1DeepEqual(src *CreateImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceCreateImageResult struct {
	Success *CreateImageResponse `thrift:"success,0,optional" frugal:"0,optional,CreateImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceCreateImageResult() *LaunchScreenServiceCreateImageResult {
	return &LaunchScreenServiceCreateImageResult{}
}

func (p *LaunchScreenServiceCreateImageResult) InitDefault() {
}

var LaunchScreenServiceCreateImageResult_Success_DEFAULT *CreateImageResponse

func (p *LaunchScreenServiceCreateImageResult) GetSuccess() (v *CreateImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceCreateImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceCreateImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateImageResponse)
}

var fieldIDToName_LaunchScreenServiceCreateImageResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceCreateImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceCreateImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceCreateImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateImageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceCreateImageResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceCreateImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceCreateImageResult(%+v)", *p)

}

func (p *LaunchScreenServiceCreateImageResult) DeepEqual(ano *LaunchScreenServiceCreateImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceCreateImageResult) Field0DeepEqual(src *CreateImageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceGetImageArgs struct {
	Req *GetImageRequest `thrift:"req,1" frugal:"1,default,GetImageRequest" json:"req"`
}

func NewLaunchScreenServiceGetImageArgs() *LaunchScreenServiceGetImageArgs {
	return &LaunchScreenServiceGetImageArgs{}
}

func (p *LaunchScreenServiceGetImageArgs) InitDefault() {
}

var LaunchScreenServiceGetImageArgs_Req_DEFAULT *GetImageRequest

func (p *LaunchScreenServiceGetImageArgs) GetReq() (v *GetImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceGetImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceGetImageArgs) SetReq(val *GetImageRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceGetImageArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceGetImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceGetImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceGetImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetImageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceGetImageArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceGetImageArgs(%+v)", *p)

}

func (p *LaunchScreenServiceGetImageArgs) DeepEqual(ano *LaunchScreenServiceGetImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceGetImageArgs) Field1DeepEqual(src *GetImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceGetImageResult struct {
	Success *GetImageResponse `thrift:"success,0,optional" frugal:"0,optional,GetImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceGetImageResult() *LaunchScreenServiceGetImageResult {
	return &LaunchScreenServiceGetImageResult{}
}

func (p *LaunchScreenServiceGetImageResult) InitDefault() {
}

var LaunchScreenServiceGetImageResult_Success_DEFAULT *GetImageResponse

func (p *LaunchScreenServiceGetImageResult) GetSuccess() (v *GetImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceGetImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceGetImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetImageResponse)
}

var fieldIDToName_LaunchScreenServiceGetImageResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceGetImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceGetImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceGetImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetImageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceGetImageResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceGetImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceGetImageResult(%+v)", *p)

}

func (p *LaunchScreenServiceGetImageResult) DeepEqual(ano *LaunchScreenServiceGetImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceGetImageResult) Field0DeepEqual(src *GetImageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceChangeImagePropertyArgs struct {
	Req *ChangeImagePropertyRequest `thrift:"req,1" frugal:"1,default,ChangeImagePropertyRequest" json:"req"`
}

func NewLaunchScreenServiceChangeImagePropertyArgs() *LaunchScreenServiceChangeImagePropertyArgs {
	return &LaunchScreenServiceChangeImagePropertyArgs{}
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) InitDefault() {
}

var LaunchScreenServiceChangeImagePropertyArgs_Req_DEFAULT *ChangeImagePropertyRequest

func (p *LaunchScreenServiceChangeImagePropertyArgs) GetReq() (v *ChangeImagePropertyRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceChangeImagePropertyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceChangeImagePropertyArgs) SetReq(val *ChangeImagePropertyRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceChangeImagePropertyArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceChangeImagePropertyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChangeImagePropertyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImageProperty_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImagePropertyArgs(%+v)", *p)

}

func (p *LaunchScreenServiceChangeImagePropertyArgs) DeepEqual(ano *LaunchScreenServiceChangeImagePropertyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) Field1DeepEqual(src *ChangeImagePropertyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceChangeImagePropertyResult struct {
	Success *ChangeImagePropertyResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeImagePropertyResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceChangeImagePropertyResult() *LaunchScreenServiceChangeImagePropertyResult {
	return &LaunchScreenServiceChangeImagePropertyResult{}
}

func (p *LaunchScreenServiceChangeImagePropertyResult) InitDefault() {
}

var LaunchScreenServiceChangeImagePropertyResult_Success_DEFAULT *ChangeImagePropertyResponse

func (p *LaunchScreenServiceChangeImagePropertyResult) GetSuccess() (v *ChangeImagePropertyResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceChangeImagePropertyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceChangeImagePropertyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeImagePropertyResponse)
}

var fieldIDToName_LaunchScreenServiceChangeImagePropertyResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceChangeImagePropertyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceChangeImagePropertyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceChangeImagePropertyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChangeImagePropertyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceChangeImagePropertyResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImageProperty_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImagePropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImagePropertyResult(%+v)", *p)

}

func (p *LaunchScreenServiceChangeImagePropertyResult) DeepEqual(ano *LaunchScreenServiceChangeImagePropertyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceChangeImagePropertyResult) Field0DeepEqual(src *ChangeImagePropertyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceChangeImageArgs struct {
	Req *ChangeImageRequest `thrift:"req,1" frugal:"1,default,ChangeImageRequest" json:"req"`
}

func NewLaunchScreenServiceChangeImageArgs() *LaunchScreenServiceChangeImageArgs {
	return &LaunchScreenServiceChangeImageArgs{}
}

func (p *LaunchScreenServiceChangeImageArgs) InitDefault() {
}

var LaunchScreenServiceChangeImageArgs_Req_DEFAULT *ChangeImageRequest

func (p *LaunchScreenServiceChangeImageArgs) GetReq() (v *ChangeImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceChangeImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceChangeImageArgs) SetReq(val *ChangeImageRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceChangeImageArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceChangeImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceChangeImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceChangeImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChangeImageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceChangeImageArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImageArgs(%+v)", *p)

}

func (p *LaunchScreenServiceChangeImageArgs) DeepEqual(ano *LaunchScreenServiceChangeImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceChangeImageArgs) Field1DeepEqual(src *ChangeImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceChangeImageResult struct {
	Success *ChangeImageResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceChangeImageResult() *LaunchScreenServiceChangeImageResult {
	return &LaunchScreenServiceChangeImageResult{}
}

func (p *LaunchScreenServiceChangeImageResult) InitDefault() {
}

var LaunchScreenServiceChangeImageResult_Success_DEFAULT *ChangeImageResponse

func (p *LaunchScreenServiceChangeImageResult) GetSuccess() (v *ChangeImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceChangeImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceChangeImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeImageResponse)
}

var fieldIDToName_LaunchScreenServiceChangeImageResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceChangeImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceChangeImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceChangeImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChangeImageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceChangeImageResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceChangeImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImageResult(%+v)", *p)

}

func (p *LaunchScreenServiceChangeImageResult) DeepEqual(ano *LaunchScreenServiceChangeImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceChangeImageResult) Field0DeepEqual(src *ChangeImageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceDeleteImageArgs struct {
	Req *DeleteImageRequest `thrift:"req,1" frugal:"1,default,DeleteImageRequest" json:"req"`
}

func NewLaunchScreenServiceDeleteImageArgs() *LaunchScreenServiceDeleteImageArgs {
	return &LaunchScreenServiceDeleteImageArgs{}
}

func (p *LaunchScreenServiceDeleteImageArgs) InitDefault() {
}

var LaunchScreenServiceDeleteImageArgs_Req_DEFAULT *DeleteImageRequest

func (p *LaunchScreenServiceDeleteImageArgs) GetReq() (v *DeleteImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceDeleteImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceDeleteImageArgs) SetReq(val *DeleteImageRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceDeleteImageArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceDeleteImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceDeleteImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceDeleteImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteImageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceDeleteImageArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceDeleteImageArgs(%+v)", *p)

}

func (p *LaunchScreenServiceDeleteImageArgs) DeepEqual(ano *LaunchScreenServiceDeleteImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceDeleteImageArgs) Field1DeepEqual(src *DeleteImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceDeleteImageResult struct {
	Success *DeleteImageResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceDeleteImageResult() *LaunchScreenServiceDeleteImageResult {
	return &LaunchScreenServiceDeleteImageResult{}
}

func (p *LaunchScreenServiceDeleteImageResult) InitDefault() {
}

var LaunchScreenServiceDeleteImageResult_Success_DEFAULT *DeleteImageResponse

func (p *LaunchScreenServiceDeleteImageResult) GetSuccess() (v *DeleteImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceDeleteImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceDeleteImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteImageResponse)
}

var fieldIDToName_LaunchScreenServiceDeleteImageResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceDeleteImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceDeleteImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceDeleteImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteImageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceDeleteImageResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceDeleteImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceDeleteImageResult(%+v)", *p)

}

func (p *LaunchScreenServiceDeleteImageResult) DeepEqual(ano *LaunchScreenServiceDeleteImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceDeleteImageResult) Field0DeepEqual(src *DeleteImageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceMobileGetImageArgs struct {
	Req *MobileGetImageRequest `thrift:"req,1" frugal:"1,default,MobileGetImageRequest" json:"req"`
}

func NewLaunchScreenServiceMobileGetImageArgs() *LaunchScreenServiceMobileGetImageArgs {
	return &LaunchScreenServiceMobileGetImageArgs{}
}

func (p *LaunchScreenServiceMobileGetImageArgs) InitDefault() {
}

var LaunchScreenServiceMobileGetImageArgs_Req_DEFAULT *MobileGetImageRequest

func (p *LaunchScreenServiceMobileGetImageArgs) GetReq() (v *MobileGetImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceMobileGetImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceMobileGetImageArgs) SetReq(val *MobileGetImageRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceMobileGetImageArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceMobileGetImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceMobileGetImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceMobileGetImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMobileGetImageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceMobileGetImageArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MobileGetImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceMobileGetImageArgs(%+v)", *p)

}

func (p *LaunchScreenServiceMobileGetImageArgs) DeepEqual(ano *LaunchScreenServiceMobileGetImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceMobileGetImageArgs) Field1DeepEqual(src *MobileGetImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceMobileGetImageResult struct {
	Success *MobileGetImageResponse `thrift:"success,0,optional" frugal:"0,optional,MobileGetImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceMobileGetImageResult() *LaunchScreenServiceMobileGetImageResult {
	return &LaunchScreenServiceMobileGetImageResult{}
}

func (p *LaunchScreenServiceMobileGetImageResult) InitDefault() {
}

var LaunchScreenServiceMobileGetImageResult_Success_DEFAULT *MobileGetImageResponse

func (p *LaunchScreenServiceMobileGetImageResult) GetSuccess() (v *MobileGetImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceMobileGetImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceMobileGetImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MobileGetImageResponse)
}

var fieldIDToName_LaunchScreenServiceMobileGetImageResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceMobileGetImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceMobileGetImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceMobileGetImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewMobileGetImageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceMobileGetImageResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MobileGetImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceMobileGetImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceMobileGetImageResult(%+v)", *p)

}

func (p *LaunchScreenServiceMobileGetImageResult) DeepEqual(ano *LaunchScreenServiceMobileGetImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceMobileGetImageResult) Field0DeepEqual(src *MobileGetImageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceAddImagePointTimeArgs struct {
	Req *AddImagePointTimeRequest `thrift:"req,1" frugal:"1,default,AddImagePointTimeRequest" json:"req"`
}

func NewLaunchScreenServiceAddImagePointTimeArgs() *LaunchScreenServiceAddImagePointTimeArgs {
	return &LaunchScreenServiceAddImagePointTimeArgs{}
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) InitDefault() {
}

var LaunchScreenServiceAddImagePointTimeArgs_Req_DEFAULT *AddImagePointTimeRequest

func (p *LaunchScreenServiceAddImagePointTimeArgs) GetReq() (v *AddImagePointTimeRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceAddImagePointTimeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceAddImagePointTimeArgs) SetReq(val *AddImagePointTimeRequest) {
	p.Req = val
}

var fieldIDToName_LaunchScreenServiceAddImagePointTimeArgs = map[int16]string{
	1: "req",
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceAddImagePointTimeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddImagePointTimeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AddImagePointTime_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceAddImagePointTimeArgs(%+v)", *p)

}

func (p *LaunchScreenServiceAddImagePointTimeArgs) DeepEqual(ano *LaunchScreenServiceAddImagePointTimeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) Field1DeepEqual(src *AddImagePointTimeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LaunchScreenServiceAddImagePointTimeResult struct {
	Success *AddImagePointTimeResponse `thrift:"success,0,optional" frugal:"0,optional,AddImagePointTimeResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceAddImagePointTimeResult() *LaunchScreenServiceAddImagePointTimeResult {
	return &LaunchScreenServiceAddImagePointTimeResult{}
}

func (p *LaunchScreenServiceAddImagePointTimeResult) InitDefault() {
}

var LaunchScreenServiceAddImagePointTimeResult_Success_DEFAULT *AddImagePointTimeResponse

func (p *LaunchScreenServiceAddImagePointTimeResult) GetSuccess() (v *AddImagePointTimeResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceAddImagePointTimeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceAddImagePointTimeResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddImagePointTimeResponse)
}

var fieldIDToName_LaunchScreenServiceAddImagePointTimeResult = map[int16]string{
	0: "success",
}

func (p *LaunchScreenServiceAddImagePointTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceAddImagePointTimeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LaunchScreenServiceAddImagePointTimeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddImagePointTimeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LaunchScreenServiceAddImagePointTimeResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AddImagePointTime_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LaunchScreenServiceAddImagePointTimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceAddImagePointTimeResult(%+v)", *p)

}

func (p *LaunchScreenServiceAddImagePointTimeResult) DeepEqual(ano *LaunchScreenServiceAddImagePointTimeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LaunchScreenServiceAddImagePointTimeResult) Field0DeepEqual(src *AddImagePointTimeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
