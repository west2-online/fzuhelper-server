// Code generated by Kitex v0.7.1. DO NOT EDIT.

package emptyroomservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	empty_room "github.com/west2-online/fzuhelper-server/kitex_gen/empty_room"
)

func serviceInfo() *kitex.ServiceInfo {
	return emptyRoomServiceServiceInfo
}

var emptyRoomServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EmptyRoomService"
	handlerType := (*empty_room.EmptyRoomService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetEmptyRoom": kitex.NewMethodInfo(getEmptyRoomHandler, newEmptyRoomServiceGetEmptyRoomArgs, newEmptyRoomServiceGetEmptyRoomResult, false),
		"GetExam":      kitex.NewMethodInfo(getExamHandler, newEmptyRoomServiceGetExamArgs, newEmptyRoomServiceGetExamResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "empty_room",
		"ServiceFilePath": "../../idl/empty_room.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func getEmptyRoomHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*empty_room.EmptyRoomServiceGetEmptyRoomArgs)
	realResult := result.(*empty_room.EmptyRoomServiceGetEmptyRoomResult)
	success, err := handler.(empty_room.EmptyRoomService).GetEmptyRoom(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEmptyRoomServiceGetEmptyRoomArgs() interface{} {
	return empty_room.NewEmptyRoomServiceGetEmptyRoomArgs()
}

func newEmptyRoomServiceGetEmptyRoomResult() interface{} {
	return empty_room.NewEmptyRoomServiceGetEmptyRoomResult()
}

func getExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*empty_room.EmptyRoomServiceGetExamArgs)
	realResult := result.(*empty_room.EmptyRoomServiceGetExamResult)
	success, err := handler.(empty_room.EmptyRoomService).GetExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEmptyRoomServiceGetExamArgs() interface{} {
	return empty_room.NewEmptyRoomServiceGetExamArgs()
}

func newEmptyRoomServiceGetExamResult() interface{} {
	return empty_room.NewEmptyRoomServiceGetExamResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetEmptyRoom(ctx context.Context, req *empty_room.EmptyRoomRequest) (r *empty_room.EmptyRoomResponse, err error) {
	var _args empty_room.EmptyRoomServiceGetEmptyRoomArgs
	_args.Req = req
	var _result empty_room.EmptyRoomServiceGetEmptyRoomResult
	if err = p.c.Call(ctx, "GetEmptyRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetExam(ctx context.Context, req *empty_room.ExamRequest) (r *empty_room.ExamResp, err error) {
	var _args empty_room.EmptyRoomServiceGetExamArgs
	_args.Req = req
	var _result empty_room.EmptyRoomServiceGetExamResult
	if err = p.c.Call(ctx, "GetExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
