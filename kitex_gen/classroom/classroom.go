/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package classroom

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type EmptyRoomRequest struct {
	Date      string `thrift:"date,1,required" frugal:"1,required,string" json:"date"`
	Campus    string `thrift:"campus,2,required" frugal:"2,required,string" json:"campus"`
	StartTime string `thrift:"startTime,3,required" frugal:"3,required,string" json:"startTime"`
	EndTime   string `thrift:"endTime,4,required" frugal:"4,required,string" json:"endTime"`
}

func NewEmptyRoomRequest() *EmptyRoomRequest {
	return &EmptyRoomRequest{}
}

func (p *EmptyRoomRequest) InitDefault() {
}

func (p *EmptyRoomRequest) GetDate() (v string) {
	return p.Date
}

func (p *EmptyRoomRequest) GetCampus() (v string) {
	return p.Campus
}

func (p *EmptyRoomRequest) GetStartTime() (v string) {
	return p.StartTime
}

func (p *EmptyRoomRequest) GetEndTime() (v string) {
	return p.EndTime
}
func (p *EmptyRoomRequest) SetDate(val string) {
	p.Date = val
}
func (p *EmptyRoomRequest) SetCampus(val string) {
	p.Campus = val
}
func (p *EmptyRoomRequest) SetStartTime(val string) {
	p.StartTime = val
}
func (p *EmptyRoomRequest) SetEndTime(val string) {
	p.EndTime = val
}

func (p *EmptyRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyRoomRequest(%+v)", *p)
}

var fieldIDToName_EmptyRoomRequest = map[int16]string{
	1: "date",
	2: "campus",
	3: "startTime",
	4: "endTime",
}

type EmptyRoomResponse struct {
	Base  *model.BaseResp    `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Rooms []*model.Classroom `thrift:"rooms,2,optional" frugal:"2,optional,list<model.Classroom>" json:"rooms,omitempty"`
}

func NewEmptyRoomResponse() *EmptyRoomResponse {
	return &EmptyRoomResponse{}
}

func (p *EmptyRoomResponse) InitDefault() {
}

var EmptyRoomResponse_Base_DEFAULT *model.BaseResp

func (p *EmptyRoomResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return EmptyRoomResponse_Base_DEFAULT
	}
	return p.Base
}

var EmptyRoomResponse_Rooms_DEFAULT []*model.Classroom

func (p *EmptyRoomResponse) GetRooms() (v []*model.Classroom) {
	if !p.IsSetRooms() {
		return EmptyRoomResponse_Rooms_DEFAULT
	}
	return p.Rooms
}
func (p *EmptyRoomResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *EmptyRoomResponse) SetRooms(val []*model.Classroom) {
	p.Rooms = val
}

func (p *EmptyRoomResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *EmptyRoomResponse) IsSetRooms() bool {
	return p.Rooms != nil
}

func (p *EmptyRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyRoomResponse(%+v)", *p)
}

var fieldIDToName_EmptyRoomResponse = map[int16]string{
	1: "base",
	2: "rooms",
}

type ExamRoomInfoRequest struct {
	Term string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
}

func NewExamRoomInfoRequest() *ExamRoomInfoRequest {
	return &ExamRoomInfoRequest{}
}

func (p *ExamRoomInfoRequest) InitDefault() {
}

func (p *ExamRoomInfoRequest) GetTerm() (v string) {
	return p.Term
}
func (p *ExamRoomInfoRequest) SetTerm(val string) {
	p.Term = val
}

func (p *ExamRoomInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamRoomInfoRequest(%+v)", *p)
}

var fieldIDToName_ExamRoomInfoRequest = map[int16]string{
	1: "term",
}

type ExamRoomInfoResponse struct {
	Base  *model.BaseResp       `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Rooms []*model.ExamRoomInfo `thrift:"rooms,2,optional" frugal:"2,optional,list<model.ExamRoomInfo>" json:"rooms,omitempty"`
}

func NewExamRoomInfoResponse() *ExamRoomInfoResponse {
	return &ExamRoomInfoResponse{}
}

func (p *ExamRoomInfoResponse) InitDefault() {
}

var ExamRoomInfoResponse_Base_DEFAULT *model.BaseResp

func (p *ExamRoomInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ExamRoomInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var ExamRoomInfoResponse_Rooms_DEFAULT []*model.ExamRoomInfo

func (p *ExamRoomInfoResponse) GetRooms() (v []*model.ExamRoomInfo) {
	if !p.IsSetRooms() {
		return ExamRoomInfoResponse_Rooms_DEFAULT
	}
	return p.Rooms
}
func (p *ExamRoomInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ExamRoomInfoResponse) SetRooms(val []*model.ExamRoomInfo) {
	p.Rooms = val
}

func (p *ExamRoomInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ExamRoomInfoResponse) IsSetRooms() bool {
	return p.Rooms != nil
}

func (p *ExamRoomInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamRoomInfoResponse(%+v)", *p)
}

var fieldIDToName_ExamRoomInfoResponse = map[int16]string{
	1: "base",
	2: "rooms",
}

type ClassroomService interface {
	GetEmptyRoom(ctx context.Context, req *EmptyRoomRequest) (r *EmptyRoomResponse, err error)

	GetExamRoomInfo(ctx context.Context, req *ExamRoomInfoRequest) (r *ExamRoomInfoResponse, err error)
}

type ClassroomServiceGetEmptyRoomArgs struct {
	Req *EmptyRoomRequest `thrift:"req,1" frugal:"1,default,EmptyRoomRequest" json:"req"`
}

func NewClassroomServiceGetEmptyRoomArgs() *ClassroomServiceGetEmptyRoomArgs {
	return &ClassroomServiceGetEmptyRoomArgs{}
}

func (p *ClassroomServiceGetEmptyRoomArgs) InitDefault() {
}

var ClassroomServiceGetEmptyRoomArgs_Req_DEFAULT *EmptyRoomRequest

func (p *ClassroomServiceGetEmptyRoomArgs) GetReq() (v *EmptyRoomRequest) {
	if !p.IsSetReq() {
		return ClassroomServiceGetEmptyRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClassroomServiceGetEmptyRoomArgs) SetReq(val *EmptyRoomRequest) {
	p.Req = val
}

func (p *ClassroomServiceGetEmptyRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClassroomServiceGetEmptyRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassroomServiceGetEmptyRoomArgs(%+v)", *p)
}

var fieldIDToName_ClassroomServiceGetEmptyRoomArgs = map[int16]string{
	1: "req",
}

type ClassroomServiceGetEmptyRoomResult struct {
	Success *EmptyRoomResponse `thrift:"success,0,optional" frugal:"0,optional,EmptyRoomResponse" json:"success,omitempty"`
}

func NewClassroomServiceGetEmptyRoomResult() *ClassroomServiceGetEmptyRoomResult {
	return &ClassroomServiceGetEmptyRoomResult{}
}

func (p *ClassroomServiceGetEmptyRoomResult) InitDefault() {
}

var ClassroomServiceGetEmptyRoomResult_Success_DEFAULT *EmptyRoomResponse

func (p *ClassroomServiceGetEmptyRoomResult) GetSuccess() (v *EmptyRoomResponse) {
	if !p.IsSetSuccess() {
		return ClassroomServiceGetEmptyRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClassroomServiceGetEmptyRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyRoomResponse)
}

func (p *ClassroomServiceGetEmptyRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClassroomServiceGetEmptyRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassroomServiceGetEmptyRoomResult(%+v)", *p)
}

var fieldIDToName_ClassroomServiceGetEmptyRoomResult = map[int16]string{
	0: "success",
}

type ClassroomServiceGetExamRoomInfoArgs struct {
	Req *ExamRoomInfoRequest `thrift:"req,1" frugal:"1,default,ExamRoomInfoRequest" json:"req"`
}

func NewClassroomServiceGetExamRoomInfoArgs() *ClassroomServiceGetExamRoomInfoArgs {
	return &ClassroomServiceGetExamRoomInfoArgs{}
}

func (p *ClassroomServiceGetExamRoomInfoArgs) InitDefault() {
}

var ClassroomServiceGetExamRoomInfoArgs_Req_DEFAULT *ExamRoomInfoRequest

func (p *ClassroomServiceGetExamRoomInfoArgs) GetReq() (v *ExamRoomInfoRequest) {
	if !p.IsSetReq() {
		return ClassroomServiceGetExamRoomInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClassroomServiceGetExamRoomInfoArgs) SetReq(val *ExamRoomInfoRequest) {
	p.Req = val
}

func (p *ClassroomServiceGetExamRoomInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClassroomServiceGetExamRoomInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassroomServiceGetExamRoomInfoArgs(%+v)", *p)
}

var fieldIDToName_ClassroomServiceGetExamRoomInfoArgs = map[int16]string{
	1: "req",
}

type ClassroomServiceGetExamRoomInfoResult struct {
	Success *ExamRoomInfoResponse `thrift:"success,0,optional" frugal:"0,optional,ExamRoomInfoResponse" json:"success,omitempty"`
}

func NewClassroomServiceGetExamRoomInfoResult() *ClassroomServiceGetExamRoomInfoResult {
	return &ClassroomServiceGetExamRoomInfoResult{}
}

func (p *ClassroomServiceGetExamRoomInfoResult) InitDefault() {
}

var ClassroomServiceGetExamRoomInfoResult_Success_DEFAULT *ExamRoomInfoResponse

func (p *ClassroomServiceGetExamRoomInfoResult) GetSuccess() (v *ExamRoomInfoResponse) {
	if !p.IsSetSuccess() {
		return ClassroomServiceGetExamRoomInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClassroomServiceGetExamRoomInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExamRoomInfoResponse)
}

func (p *ClassroomServiceGetExamRoomInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClassroomServiceGetExamRoomInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassroomServiceGetExamRoomInfoResult(%+v)", *p)
}

var fieldIDToName_ClassroomServiceGetExamRoomInfoResult = map[int16]string{
	0: "success",
}
