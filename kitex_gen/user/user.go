/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package user

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type GetLoginDataRequest struct {
	Id       string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewGetLoginDataRequest() *GetLoginDataRequest {
	return &GetLoginDataRequest{}
}

func (p *GetLoginDataRequest) InitDefault() {
}

func (p *GetLoginDataRequest) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataRequest) GetPassword() (v string) {
	return p.Password
}
func (p *GetLoginDataRequest) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataRequest) SetPassword(val string) {
	p.Password = val
}

func (p *GetLoginDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataRequest(%+v)", *p)
}

var fieldIDToName_GetLoginDataRequest = map[int16]string{
	1: "id",
	2: "password",
}

type GetLoginDataResponse struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Id      string          `thrift:"id,2,required" frugal:"2,required,string" json:"id"`
	Cookies string          `thrift:"cookies,3,required" frugal:"3,required,string" json:"cookies"`
}

func NewGetLoginDataResponse() *GetLoginDataResponse {
	return &GetLoginDataResponse{}
}

func (p *GetLoginDataResponse) InitDefault() {
}

var GetLoginDataResponse_Base_DEFAULT *model.BaseResp

func (p *GetLoginDataResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetLoginDataResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetLoginDataResponse) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataResponse) GetCookies() (v string) {
	return p.Cookies
}
func (p *GetLoginDataResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetLoginDataResponse) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataResponse) SetCookies(val string) {
	p.Cookies = val
}

func (p *GetLoginDataResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLoginDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataResponse(%+v)", *p)
}

var fieldIDToName_GetLoginDataResponse = map[int16]string{
	1: "base",
	2: "id",
	3: "cookies",
}

type GetUserInfoRequest struct {
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

func (p *GetUserInfoRequest) InitDefault() {
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

var fieldIDToName_GetUserInfoRequest = map[int16]string{}

type GetUserInfoResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data *model.UserInfo `thrift:"data,2,optional" frugal:"2,optional,model.UserInfo" json:"data,omitempty"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) InitDefault() {
}

var GetUserInfoResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var GetUserInfoResponse_Data_DEFAULT *model.UserInfo

func (p *GetUserInfoResponse) GetData() (v *model.UserInfo) {
	if !p.IsSetData() {
		return GetUserInfoResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetUserInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserInfoResponse) SetData(val *model.UserInfo) {
	p.Data = val
}

func (p *GetUserInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserInfoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

var fieldIDToName_GetUserInfoResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetLoginDataForYJSYRequest struct {
	Id       string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewGetLoginDataForYJSYRequest() *GetLoginDataForYJSYRequest {
	return &GetLoginDataForYJSYRequest{}
}

func (p *GetLoginDataForYJSYRequest) InitDefault() {
}

func (p *GetLoginDataForYJSYRequest) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataForYJSYRequest) GetPassword() (v string) {
	return p.Password
}
func (p *GetLoginDataForYJSYRequest) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataForYJSYRequest) SetPassword(val string) {
	p.Password = val
}

func (p *GetLoginDataForYJSYRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataForYJSYRequest(%+v)", *p)
}

var fieldIDToName_GetLoginDataForYJSYRequest = map[int16]string{
	1: "id",
	2: "password",
}

type GetLoginDataForYJSYResponse struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Id      string          `thrift:"id,2,required" frugal:"2,required,string" json:"id"`
	Cookies string          `thrift:"cookies,3,required" frugal:"3,required,string" json:"cookies"`
}

func NewGetLoginDataForYJSYResponse() *GetLoginDataForYJSYResponse {
	return &GetLoginDataForYJSYResponse{}
}

func (p *GetLoginDataForYJSYResponse) InitDefault() {
}

var GetLoginDataForYJSYResponse_Base_DEFAULT *model.BaseResp

func (p *GetLoginDataForYJSYResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetLoginDataForYJSYResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetLoginDataForYJSYResponse) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataForYJSYResponse) GetCookies() (v string) {
	return p.Cookies
}
func (p *GetLoginDataForYJSYResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetLoginDataForYJSYResponse) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataForYJSYResponse) SetCookies(val string) {
	p.Cookies = val
}

func (p *GetLoginDataForYJSYResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLoginDataForYJSYResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataForYJSYResponse(%+v)", *p)
}

var fieldIDToName_GetLoginDataForYJSYResponse = map[int16]string{
	1: "base",
	2: "id",
	3: "cookies",
}

type UserService interface {
	GetLoginData(ctx context.Context, req *GetLoginDataRequest) (r *GetLoginDataResponse, err error)

	GetUserInfo(ctx context.Context, request *GetUserInfoRequest) (r *GetUserInfoResponse, err error)

	GetGetLoginDataForYJSY(ctx context.Context, request *GetLoginDataForYJSYRequest) (r *GetLoginDataForYJSYResponse, err error)
}

type UserServiceGetLoginDataArgs struct {
	Req *GetLoginDataRequest `thrift:"req,1" frugal:"1,default,GetLoginDataRequest" json:"req"`
}

func NewUserServiceGetLoginDataArgs() *UserServiceGetLoginDataArgs {
	return &UserServiceGetLoginDataArgs{}
}

func (p *UserServiceGetLoginDataArgs) InitDefault() {
}

var UserServiceGetLoginDataArgs_Req_DEFAULT *GetLoginDataRequest

func (p *UserServiceGetLoginDataArgs) GetReq() (v *GetLoginDataRequest) {
	if !p.IsSetReq() {
		return UserServiceGetLoginDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetLoginDataArgs) SetReq(val *GetLoginDataRequest) {
	p.Req = val
}

func (p *UserServiceGetLoginDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetLoginDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetLoginDataArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetLoginDataArgs = map[int16]string{
	1: "req",
}

type UserServiceGetLoginDataResult struct {
	Success *GetLoginDataResponse `thrift:"success,0,optional" frugal:"0,optional,GetLoginDataResponse" json:"success,omitempty"`
}

func NewUserServiceGetLoginDataResult() *UserServiceGetLoginDataResult {
	return &UserServiceGetLoginDataResult{}
}

func (p *UserServiceGetLoginDataResult) InitDefault() {
}

var UserServiceGetLoginDataResult_Success_DEFAULT *GetLoginDataResponse

func (p *UserServiceGetLoginDataResult) GetSuccess() (v *GetLoginDataResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetLoginDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetLoginDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLoginDataResponse)
}

func (p *UserServiceGetLoginDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetLoginDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetLoginDataResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetLoginDataResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Request *GetUserInfoRequest `thrift:"request,1" frugal:"1,default,GetUserInfoRequest" json:"request"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Request_DEFAULT *GetUserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetRequest() (v *GetUserInfoRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetUserInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetUserInfoArgs) SetRequest(val *GetUserInfoRequest) {
	p.Request = val
}

func (p *UserServiceGetUserInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "request",
}

type UserServiceGetUserInfoResult struct {
	Success *GetUserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *GetUserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type UserServiceGetGetLoginDataForYJSYArgs struct {
	Request *GetLoginDataForYJSYRequest `thrift:"request,1" frugal:"1,default,GetLoginDataForYJSYRequest" json:"request"`
}

func NewUserServiceGetGetLoginDataForYJSYArgs() *UserServiceGetGetLoginDataForYJSYArgs {
	return &UserServiceGetGetLoginDataForYJSYArgs{}
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) InitDefault() {
}

var UserServiceGetGetLoginDataForYJSYArgs_Request_DEFAULT *GetLoginDataForYJSYRequest

func (p *UserServiceGetGetLoginDataForYJSYArgs) GetRequest() (v *GetLoginDataForYJSYRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetGetLoginDataForYJSYArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetGetLoginDataForYJSYArgs) SetRequest(val *GetLoginDataForYJSYRequest) {
	p.Request = val
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetGetLoginDataForYJSYArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetGetLoginDataForYJSYArgs = map[int16]string{
	1: "request",
}

type UserServiceGetGetLoginDataForYJSYResult struct {
	Success *GetLoginDataForYJSYResponse `thrift:"success,0,optional" frugal:"0,optional,GetLoginDataForYJSYResponse" json:"success,omitempty"`
}

func NewUserServiceGetGetLoginDataForYJSYResult() *UserServiceGetGetLoginDataForYJSYResult {
	return &UserServiceGetGetLoginDataForYJSYResult{}
}

func (p *UserServiceGetGetLoginDataForYJSYResult) InitDefault() {
}

var UserServiceGetGetLoginDataForYJSYResult_Success_DEFAULT *GetLoginDataForYJSYResponse

func (p *UserServiceGetGetLoginDataForYJSYResult) GetSuccess() (v *GetLoginDataForYJSYResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetGetLoginDataForYJSYResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetGetLoginDataForYJSYResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLoginDataForYJSYResponse)
}

func (p *UserServiceGetGetLoginDataForYJSYResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetGetLoginDataForYJSYResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetGetLoginDataForYJSYResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetGetLoginDataForYJSYResult = map[int16]string{
	0: "success",
}
