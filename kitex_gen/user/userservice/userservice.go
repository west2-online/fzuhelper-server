// Code generated by Kitex v0.7.1. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "github.com/west2-online/fzuhelper-server/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserInfo":       kitex.NewMethodInfo(getUserInfoHandler, newUserServiceGetUserInfoArgs, newUserServiceGetUserInfoResult, false),
		"ValidateCode":      kitex.NewMethodInfo(validateCodeHandler, newUserServiceValidateCodeArgs, newUserServiceValidateCodeResult, false),
		"ChangePassword":    kitex.NewMethodInfo(changePasswordHandler, newUserServiceChangePasswordArgs, newUserServiceChangePasswordResult, false),
		"GetSchoolCalendar": kitex.NewMethodInfo(getSchoolCalendarHandler, newUserServiceGetSchoolCalendarArgs, newUserServiceGetSchoolCalendarResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": "../../idl/user.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserInfoArgs)
	realResult := result.(*user.UserServiceGetUserInfoResult)
	success, err := handler.(user.UserService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserInfoArgs() interface{} {
	return user.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return user.NewUserServiceGetUserInfoResult()
}

func validateCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceValidateCodeArgs)
	realResult := result.(*user.UserServiceValidateCodeResult)
	success, err := handler.(user.UserService).ValidateCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceValidateCodeArgs() interface{} {
	return user.NewUserServiceValidateCodeArgs()
}

func newUserServiceValidateCodeResult() interface{} {
	return user.NewUserServiceValidateCodeResult()
}

func changePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceChangePasswordArgs)
	realResult := result.(*user.UserServiceChangePasswordResult)
	success, err := handler.(user.UserService).ChangePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceChangePasswordArgs() interface{} {
	return user.NewUserServiceChangePasswordArgs()
}

func newUserServiceChangePasswordResult() interface{} {
	return user.NewUserServiceChangePasswordResult()
}

func getSchoolCalendarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetSchoolCalendarArgs)
	realResult := result.(*user.UserServiceGetSchoolCalendarResult)
	success, err := handler.(user.UserService).GetSchoolCalendar(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetSchoolCalendarArgs() interface{} {
	return user.NewUserServiceGetSchoolCalendarArgs()
}

func newUserServiceGetSchoolCalendarResult() interface{} {
	return user.NewUserServiceGetSchoolCalendarResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserInfo(ctx context.Context, req *user.UserInfoRequest) (r *user.UserInfoResp, err error) {
	var _args user.UserServiceGetUserInfoArgs
	_args.Req = req
	var _result user.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ValidateCode(ctx context.Context, req *user.ValidateCodeRequest) (r *user.ValidateCodeResp, err error) {
	var _args user.UserServiceValidateCodeArgs
	_args.Req = req
	var _result user.UserServiceValidateCodeResult
	if err = p.c.Call(ctx, "ValidateCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangePassword(ctx context.Context, req *user.ChangePasswordRequest) (r *user.ChangePasswordResp, err error) {
	var _args user.UserServiceChangePasswordArgs
	_args.Req = req
	var _result user.UserServiceChangePasswordResult
	if err = p.c.Call(ctx, "ChangePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSchoolCalendar(ctx context.Context, req *user.SchoolCalendarRequest) (r *user.SchoolCalendarResponse, err error) {
	var _args user.UserServiceGetSchoolCalendarArgs
	_args.Req = req
	var _result user.UserServiceGetSchoolCalendarResult
	if err = p.c.Call(ctx, "GetSchoolCalendar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
