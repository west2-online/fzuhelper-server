// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type EmptyClassroomRequest struct {
	Date      string `thrift:"date,1,required" frugal:"1,required,string" json:"date"`
	Campus    string `thrift:"campus,2,required" frugal:"2,required,string" json:"campus"`
	StartTime string `thrift:"startTime,3,required" frugal:"3,required,string" json:"startTime"`
	EndTime   string `thrift:"endTime,4,required" frugal:"4,required,string" json:"endTime"`
}

func NewEmptyClassroomRequest() *EmptyClassroomRequest {
	return &EmptyClassroomRequest{}
}

func (p *EmptyClassroomRequest) InitDefault() {
}

func (p *EmptyClassroomRequest) GetDate() (v string) {
	return p.Date
}

func (p *EmptyClassroomRequest) GetCampus() (v string) {
	return p.Campus
}

func (p *EmptyClassroomRequest) GetStartTime() (v string) {
	return p.StartTime
}

func (p *EmptyClassroomRequest) GetEndTime() (v string) {
	return p.EndTime
}
func (p *EmptyClassroomRequest) SetDate(val string) {
	p.Date = val
}
func (p *EmptyClassroomRequest) SetCampus(val string) {
	p.Campus = val
}
func (p *EmptyClassroomRequest) SetStartTime(val string) {
	p.StartTime = val
}
func (p *EmptyClassroomRequest) SetEndTime(val string) {
	p.EndTime = val
}

func (p *EmptyClassroomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyClassroomRequest(%+v)", *p)
}

var fieldIDToName_EmptyClassroomRequest = map[int16]string{
	1: "date",
	2: "campus",
	3: "startTime",
	4: "endTime",
}

type EmptyClassroomResponse struct {
	Classrooms []*model.Classroom `thrift:"classrooms,1,optional" frugal:"1,optional,list<model.Classroom>" json:"classrooms,omitempty"`
}

func NewEmptyClassroomResponse() *EmptyClassroomResponse {
	return &EmptyClassroomResponse{}
}

func (p *EmptyClassroomResponse) InitDefault() {
}

var EmptyClassroomResponse_Classrooms_DEFAULT []*model.Classroom

func (p *EmptyClassroomResponse) GetClassrooms() (v []*model.Classroom) {
	if !p.IsSetClassrooms() {
		return EmptyClassroomResponse_Classrooms_DEFAULT
	}
	return p.Classrooms
}
func (p *EmptyClassroomResponse) SetClassrooms(val []*model.Classroom) {
	p.Classrooms = val
}

func (p *EmptyClassroomResponse) IsSetClassrooms() bool {
	return p.Classrooms != nil
}

func (p *EmptyClassroomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyClassroomResponse(%+v)", *p)
}

var fieldIDToName_EmptyClassroomResponse = map[int16]string{
	1: "classrooms",
}

type ExamRoomInfoRequest struct {
	Term string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
}

func NewExamRoomInfoRequest() *ExamRoomInfoRequest {
	return &ExamRoomInfoRequest{}
}

func (p *ExamRoomInfoRequest) InitDefault() {
}

func (p *ExamRoomInfoRequest) GetTerm() (v string) {
	return p.Term
}
func (p *ExamRoomInfoRequest) SetTerm(val string) {
	p.Term = val
}

func (p *ExamRoomInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamRoomInfoRequest(%+v)", *p)
}

var fieldIDToName_ExamRoomInfoRequest = map[int16]string{
	1: "term",
}

type ExamRoomInfoResponse struct {
	ExamRoomInfos []*model.ExamRoomInfo `thrift:"examRoomInfos,1,optional" frugal:"1,optional,list<model.ExamRoomInfo>" json:"examRoomInfos,omitempty"`
}

func NewExamRoomInfoResponse() *ExamRoomInfoResponse {
	return &ExamRoomInfoResponse{}
}

func (p *ExamRoomInfoResponse) InitDefault() {
}

var ExamRoomInfoResponse_ExamRoomInfos_DEFAULT []*model.ExamRoomInfo

func (p *ExamRoomInfoResponse) GetExamRoomInfos() (v []*model.ExamRoomInfo) {
	if !p.IsSetExamRoomInfos() {
		return ExamRoomInfoResponse_ExamRoomInfos_DEFAULT
	}
	return p.ExamRoomInfos
}
func (p *ExamRoomInfoResponse) SetExamRoomInfos(val []*model.ExamRoomInfo) {
	p.ExamRoomInfos = val
}

func (p *ExamRoomInfoResponse) IsSetExamRoomInfos() bool {
	return p.ExamRoomInfos != nil
}

func (p *ExamRoomInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamRoomInfoResponse(%+v)", *p)
}

var fieldIDToName_ExamRoomInfoResponse = map[int16]string{
	1: "examRoomInfos",
}

type GetLoginDataRequest struct {
	Id       string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewGetLoginDataRequest() *GetLoginDataRequest {
	return &GetLoginDataRequest{}
}

func (p *GetLoginDataRequest) InitDefault() {
}

func (p *GetLoginDataRequest) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataRequest) GetPassword() (v string) {
	return p.Password
}
func (p *GetLoginDataRequest) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataRequest) SetPassword(val string) {
	p.Password = val
}

func (p *GetLoginDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataRequest(%+v)", *p)
}

var fieldIDToName_GetLoginDataRequest = map[int16]string{
	1: "id",
	2: "password",
}

type GetLoginDataResponse struct {
	Id      string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Cookies string `thrift:"cookies,2,required" frugal:"2,required,string" json:"cookies"`
}

func NewGetLoginDataResponse() *GetLoginDataResponse {
	return &GetLoginDataResponse{}
}

func (p *GetLoginDataResponse) InitDefault() {
}

func (p *GetLoginDataResponse) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataResponse) GetCookies() (v string) {
	return p.Cookies
}
func (p *GetLoginDataResponse) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataResponse) SetCookies(val string) {
	p.Cookies = val
}

func (p *GetLoginDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataResponse(%+v)", *p)
}

var fieldIDToName_GetLoginDataResponse = map[int16]string{
	1: "id",
	2: "cookies",
}

type ValidateCodeRequest struct {
	Image string `thrift:"image,1,required" frugal:"1,required,string" json:"image"`
}

func NewValidateCodeRequest() *ValidateCodeRequest {
	return &ValidateCodeRequest{}
}

func (p *ValidateCodeRequest) InitDefault() {
}

func (p *ValidateCodeRequest) GetImage() (v string) {
	return p.Image
}
func (p *ValidateCodeRequest) SetImage(val string) {
	p.Image = val
}

func (p *ValidateCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateCodeRequest(%+v)", *p)
}

var fieldIDToName_ValidateCodeRequest = map[int16]string{
	1: "image",
}

type ValidateCodeResponse struct {
}

func NewValidateCodeResponse() *ValidateCodeResponse {
	return &ValidateCodeResponse{}
}

func (p *ValidateCodeResponse) InitDefault() {
}

func (p *ValidateCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateCodeResponse(%+v)", *p)
}

var fieldIDToName_ValidateCodeResponse = map[int16]string{}

type ValidateCodeForAndroidRequest struct {
	ValidateCode string `thrift:"validateCode,1,required" frugal:"1,required,string" json:"validateCode"`
}

func NewValidateCodeForAndroidRequest() *ValidateCodeForAndroidRequest {
	return &ValidateCodeForAndroidRequest{}
}

func (p *ValidateCodeForAndroidRequest) InitDefault() {
}

func (p *ValidateCodeForAndroidRequest) GetValidateCode() (v string) {
	return p.ValidateCode
}
func (p *ValidateCodeForAndroidRequest) SetValidateCode(val string) {
	p.ValidateCode = val
}

func (p *ValidateCodeForAndroidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateCodeForAndroidRequest(%+v)", *p)
}

var fieldIDToName_ValidateCodeForAndroidRequest = map[int16]string{
	1: "validateCode",
}

type ValidateCodeForAndroidResponse struct {
}

func NewValidateCodeForAndroidResponse() *ValidateCodeForAndroidResponse {
	return &ValidateCodeForAndroidResponse{}
}

func (p *ValidateCodeForAndroidResponse) InitDefault() {
}

func (p *ValidateCodeForAndroidResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateCodeForAndroidResponse(%+v)", *p)
}

var fieldIDToName_ValidateCodeForAndroidResponse = map[int16]string{}

type GetAccessTokenRequest struct {
}

func NewGetAccessTokenRequest() *GetAccessTokenRequest {
	return &GetAccessTokenRequest{}
}

func (p *GetAccessTokenRequest) InitDefault() {
}

func (p *GetAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccessTokenRequest(%+v)", *p)
}

var fieldIDToName_GetAccessTokenRequest = map[int16]string{}

type GetAccessTokenResponse struct {
	Code    string `thrift:"code,1" frugal:"1,default,string" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewGetAccessTokenResponse() *GetAccessTokenResponse {
	return &GetAccessTokenResponse{}
}

func (p *GetAccessTokenResponse) InitDefault() {
}

func (p *GetAccessTokenResponse) GetCode() (v string) {
	return p.Code
}

func (p *GetAccessTokenResponse) GetMessage() (v string) {
	return p.Message
}
func (p *GetAccessTokenResponse) SetCode(val string) {
	p.Code = val
}
func (p *GetAccessTokenResponse) SetMessage(val string) {
	p.Message = val
}

func (p *GetAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccessTokenResponse(%+v)", *p)
}

var fieldIDToName_GetAccessTokenResponse = map[int16]string{
	1: "code",
	2: "message",
}

type RefreshTokenRequest struct {
}

func NewRefreshTokenRequest() *RefreshTokenRequest {
	return &RefreshTokenRequest{}
}

func (p *RefreshTokenRequest) InitDefault() {
}

func (p *RefreshTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshTokenRequest(%+v)", *p)
}

var fieldIDToName_RefreshTokenRequest = map[int16]string{}

type RefreshTokenResponse struct {
	Code    string `thrift:"code,1" frugal:"1,default,string" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewRefreshTokenResponse() *RefreshTokenResponse {
	return &RefreshTokenResponse{}
}

func (p *RefreshTokenResponse) InitDefault() {
}

func (p *RefreshTokenResponse) GetCode() (v string) {
	return p.Code
}

func (p *RefreshTokenResponse) GetMessage() (v string) {
	return p.Message
}
func (p *RefreshTokenResponse) SetCode(val string) {
	p.Code = val
}
func (p *RefreshTokenResponse) SetMessage(val string) {
	p.Message = val
}

func (p *RefreshTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshTokenResponse(%+v)", *p)
}

var fieldIDToName_RefreshTokenResponse = map[int16]string{
	1: "code",
	2: "message",
}

type TestAuthRequest struct {
}

func NewTestAuthRequest() *TestAuthRequest {
	return &TestAuthRequest{}
}

func (p *TestAuthRequest) InitDefault() {
}

func (p *TestAuthRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestAuthRequest(%+v)", *p)
}

var fieldIDToName_TestAuthRequest = map[int16]string{}

type TestAuthResponse struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewTestAuthResponse() *TestAuthResponse {
	return &TestAuthResponse{}
}

func (p *TestAuthResponse) InitDefault() {
}

func (p *TestAuthResponse) GetMessage() (v string) {
	return p.Message
}
func (p *TestAuthResponse) SetMessage(val string) {
	p.Message = val
}

func (p *TestAuthResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestAuthResponse(%+v)", *p)
}

var fieldIDToName_TestAuthResponse = map[int16]string{
	1: "message",
}

type GetUserInfoRequest struct {
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

func (p *GetUserInfoRequest) InitDefault() {
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

var fieldIDToName_GetUserInfoRequest = map[int16]string{}

type GetUserInfoResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data *model.UserInfo `thrift:"data,2,optional" frugal:"2,optional,model.UserInfo" json:"data,omitempty"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) InitDefault() {
}

var GetUserInfoResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var GetUserInfoResponse_Data_DEFAULT *model.UserInfo

func (p *GetUserInfoResponse) GetData() (v *model.UserInfo) {
	if !p.IsSetData() {
		return GetUserInfoResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetUserInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserInfoResponse) SetData(val *model.UserInfo) {
	p.Data = val
}

func (p *GetUserInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserInfoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

var fieldIDToName_GetUserInfoResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetLoginDataForYJSYRequest struct {
	Id       string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewGetLoginDataForYJSYRequest() *GetLoginDataForYJSYRequest {
	return &GetLoginDataForYJSYRequest{}
}

func (p *GetLoginDataForYJSYRequest) InitDefault() {
}

func (p *GetLoginDataForYJSYRequest) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataForYJSYRequest) GetPassword() (v string) {
	return p.Password
}
func (p *GetLoginDataForYJSYRequest) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataForYJSYRequest) SetPassword(val string) {
	p.Password = val
}

func (p *GetLoginDataForYJSYRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataForYJSYRequest(%+v)", *p)
}

var fieldIDToName_GetLoginDataForYJSYRequest = map[int16]string{
	1: "id",
	2: "password",
}

type GetLoginDataForYJSYResponse struct {
	Id      string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Cookies string `thrift:"cookies,2,required" frugal:"2,required,string" json:"cookies"`
}

func NewGetLoginDataForYJSYResponse() *GetLoginDataForYJSYResponse {
	return &GetLoginDataForYJSYResponse{}
}

func (p *GetLoginDataForYJSYResponse) InitDefault() {
}

func (p *GetLoginDataForYJSYResponse) GetId() (v string) {
	return p.Id
}

func (p *GetLoginDataForYJSYResponse) GetCookies() (v string) {
	return p.Cookies
}
func (p *GetLoginDataForYJSYResponse) SetId(val string) {
	p.Id = val
}
func (p *GetLoginDataForYJSYResponse) SetCookies(val string) {
	p.Cookies = val
}

func (p *GetLoginDataForYJSYResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLoginDataForYJSYResponse(%+v)", *p)
}

var fieldIDToName_GetLoginDataForYJSYResponse = map[int16]string{
	1: "id",
	2: "cookies",
}

type CourseListRequest struct {
	Term      string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
	IsRefresh *bool  `thrift:"is_refresh,2,optional" frugal:"2,optional,bool" json:"is_refresh,omitempty"`
}

func NewCourseListRequest() *CourseListRequest {
	return &CourseListRequest{}
}

func (p *CourseListRequest) InitDefault() {
}

func (p *CourseListRequest) GetTerm() (v string) {
	return p.Term
}

var CourseListRequest_IsRefresh_DEFAULT bool

func (p *CourseListRequest) GetIsRefresh() (v bool) {
	if !p.IsSetIsRefresh() {
		return CourseListRequest_IsRefresh_DEFAULT
	}
	return *p.IsRefresh
}
func (p *CourseListRequest) SetTerm(val string) {
	p.Term = val
}
func (p *CourseListRequest) SetIsRefresh(val *bool) {
	p.IsRefresh = val
}

func (p *CourseListRequest) IsSetIsRefresh() bool {
	return p.IsRefresh != nil
}

func (p *CourseListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseListRequest(%+v)", *p)
}

var fieldIDToName_CourseListRequest = map[int16]string{
	1: "term",
	2: "is_refresh",
}

type CourseListResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data []*model.Course `thrift:"data,2,required" frugal:"2,required,list<model.Course>" json:"data"`
}

func NewCourseListResponse() *CourseListResponse {
	return &CourseListResponse{}
}

func (p *CourseListResponse) InitDefault() {
}

var CourseListResponse_Base_DEFAULT *model.BaseResp

func (p *CourseListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CourseListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CourseListResponse) GetData() (v []*model.Course) {
	return p.Data
}
func (p *CourseListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CourseListResponse) SetData(val []*model.Course) {
	p.Data = val
}

func (p *CourseListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CourseListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseListResponse(%+v)", *p)
}

var fieldIDToName_CourseListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type CourseTermListRequest struct {
}

func NewCourseTermListRequest() *CourseTermListRequest {
	return &CourseTermListRequest{}
}

func (p *CourseTermListRequest) InitDefault() {
}

func (p *CourseTermListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseTermListRequest(%+v)", *p)
}

var fieldIDToName_CourseTermListRequest = map[int16]string{}

type CourseTermListResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data []string        `thrift:"data,2,required" frugal:"2,required,list<string>" json:"data"`
}

func NewCourseTermListResponse() *CourseTermListResponse {
	return &CourseTermListResponse{}
}

func (p *CourseTermListResponse) InitDefault() {
}

var CourseTermListResponse_Base_DEFAULT *model.BaseResp

func (p *CourseTermListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CourseTermListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CourseTermListResponse) GetData() (v []string) {
	return p.Data
}
func (p *CourseTermListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CourseTermListResponse) SetData(val []string) {
	p.Data = val
}

func (p *CourseTermListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CourseTermListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseTermListResponse(%+v)", *p)
}

var fieldIDToName_CourseTermListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetCalendarTokenRequest struct {
}

func NewGetCalendarTokenRequest() *GetCalendarTokenRequest {
	return &GetCalendarTokenRequest{}
}

func (p *GetCalendarTokenRequest) InitDefault() {
}

func (p *GetCalendarTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCalendarTokenRequest(%+v)", *p)
}

var fieldIDToName_GetCalendarTokenRequest = map[int16]string{}

type GetCalendarTokenResponse struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewGetCalendarTokenResponse() *GetCalendarTokenResponse {
	return &GetCalendarTokenResponse{}
}

func (p *GetCalendarTokenResponse) InitDefault() {
}

func (p *GetCalendarTokenResponse) GetToken() (v string) {
	return p.Token
}
func (p *GetCalendarTokenResponse) SetToken(val string) {
	p.Token = val
}

func (p *GetCalendarTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCalendarTokenResponse(%+v)", *p)
}

var fieldIDToName_GetCalendarTokenResponse = map[int16]string{
	1: "token",
}

type SubscribeCalendarRequest struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewSubscribeCalendarRequest() *SubscribeCalendarRequest {
	return &SubscribeCalendarRequest{}
}

func (p *SubscribeCalendarRequest) InitDefault() {
}

func (p *SubscribeCalendarRequest) GetToken() (v string) {
	return p.Token
}
func (p *SubscribeCalendarRequest) SetToken(val string) {
	p.Token = val
}

func (p *SubscribeCalendarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscribeCalendarRequest(%+v)", *p)
}

var fieldIDToName_SubscribeCalendarRequest = map[int16]string{
	1: "token",
}

type SubscribeCalendarResponse struct {
	Ics []byte `thrift:"ics,1" frugal:"1,default,binary" json:"ics"`
}

func NewSubscribeCalendarResponse() *SubscribeCalendarResponse {
	return &SubscribeCalendarResponse{}
}

func (p *SubscribeCalendarResponse) InitDefault() {
}

func (p *SubscribeCalendarResponse) GetIcs() (v []byte) {
	return p.Ics
}
func (p *SubscribeCalendarResponse) SetIcs(val []byte) {
	p.Ics = val
}

func (p *SubscribeCalendarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscribeCalendarResponse(%+v)", *p)
}

var fieldIDToName_SubscribeCalendarResponse = map[int16]string{
	1: "ics",
}

type GetLocateDateRequest struct {
}

func NewGetLocateDateRequest() *GetLocateDateRequest {
	return &GetLocateDateRequest{}
}

func (p *GetLocateDateRequest) InitDefault() {
}

func (p *GetLocateDateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLocateDateRequest(%+v)", *p)
}

var fieldIDToName_GetLocateDateRequest = map[int16]string{}

type GetLocateDateResponse struct {
	LocateDate *model.LocateDate `thrift:"locateDate,1,optional" frugal:"1,optional,model.LocateDate" json:"locateDate,omitempty"`
}

func NewGetLocateDateResponse() *GetLocateDateResponse {
	return &GetLocateDateResponse{}
}

func (p *GetLocateDateResponse) InitDefault() {
}

var GetLocateDateResponse_LocateDate_DEFAULT *model.LocateDate

func (p *GetLocateDateResponse) GetLocateDate() (v *model.LocateDate) {
	if !p.IsSetLocateDate() {
		return GetLocateDateResponse_LocateDate_DEFAULT
	}
	return p.LocateDate
}
func (p *GetLocateDateResponse) SetLocateDate(val *model.LocateDate) {
	p.LocateDate = val
}

func (p *GetLocateDateResponse) IsSetLocateDate() bool {
	return p.LocateDate != nil
}

func (p *GetLocateDateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLocateDateResponse(%+v)", *p)
}

var fieldIDToName_GetLocateDateResponse = map[int16]string{
	1: "locateDate",
}

type CreateImageRequest struct {
	PicType   int64  `thrift:"pic_type,1,required" frugal:"1,required,i64" json:"pic_type"`
	Duration  *int64 `thrift:"duration,2,optional" frugal:"2,optional,i64" json:"duration,omitempty"`
	Href      string `thrift:"href,3" frugal:"3,default,string" json:"href"`
	Image     []byte `thrift:"image,4" frugal:"4,default,binary" json:"image"`
	StartAt   int64  `thrift:"start_at,5,required" frugal:"5,required,i64" json:"start_at"`
	EndAt     int64  `thrift:"end_at,6,required" frugal:"6,required,i64" json:"end_at"`
	SType     int64  `thrift:"s_type,7,required" frugal:"7,required,i64" json:"s_type"`
	Frequency int64  `thrift:"frequency,8,required" frugal:"8,required,i64" json:"frequency"`
	StartTime int64  `thrift:"start_time,9,required" frugal:"9,required,i64" json:"start_time"`
	EndTime   int64  `thrift:"end_time,10,required" frugal:"10,required,i64" json:"end_time"`
	Text      string `thrift:"text,11,required" frugal:"11,required,string" json:"text"`
	Regex     string `thrift:"regex,12,required" frugal:"12,required,string" json:"regex"`
}

func NewCreateImageRequest() *CreateImageRequest {
	return &CreateImageRequest{}
}

func (p *CreateImageRequest) InitDefault() {
}

func (p *CreateImageRequest) GetPicType() (v int64) {
	return p.PicType
}

var CreateImageRequest_Duration_DEFAULT int64

func (p *CreateImageRequest) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return CreateImageRequest_Duration_DEFAULT
	}
	return *p.Duration
}

func (p *CreateImageRequest) GetHref() (v string) {
	return p.Href
}

func (p *CreateImageRequest) GetImage() (v []byte) {
	return p.Image
}

func (p *CreateImageRequest) GetStartAt() (v int64) {
	return p.StartAt
}

func (p *CreateImageRequest) GetEndAt() (v int64) {
	return p.EndAt
}

func (p *CreateImageRequest) GetSType() (v int64) {
	return p.SType
}

func (p *CreateImageRequest) GetFrequency() (v int64) {
	return p.Frequency
}

func (p *CreateImageRequest) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *CreateImageRequest) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *CreateImageRequest) GetText() (v string) {
	return p.Text
}

func (p *CreateImageRequest) GetRegex() (v string) {
	return p.Regex
}
func (p *CreateImageRequest) SetPicType(val int64) {
	p.PicType = val
}
func (p *CreateImageRequest) SetDuration(val *int64) {
	p.Duration = val
}
func (p *CreateImageRequest) SetHref(val string) {
	p.Href = val
}
func (p *CreateImageRequest) SetImage(val []byte) {
	p.Image = val
}
func (p *CreateImageRequest) SetStartAt(val int64) {
	p.StartAt = val
}
func (p *CreateImageRequest) SetEndAt(val int64) {
	p.EndAt = val
}
func (p *CreateImageRequest) SetSType(val int64) {
	p.SType = val
}
func (p *CreateImageRequest) SetFrequency(val int64) {
	p.Frequency = val
}
func (p *CreateImageRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *CreateImageRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *CreateImageRequest) SetText(val string) {
	p.Text = val
}
func (p *CreateImageRequest) SetRegex(val string) {
	p.Regex = val
}

func (p *CreateImageRequest) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *CreateImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateImageRequest(%+v)", *p)
}

var fieldIDToName_CreateImageRequest = map[int16]string{
	1:  "pic_type",
	2:  "duration",
	3:  "href",
	4:  "image",
	5:  "start_at",
	6:  "end_at",
	7:  "s_type",
	8:  "frequency",
	9:  "start_time",
	10: "end_time",
	11: "text",
	12: "regex",
}

type CreateImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewCreateImageResponse() *CreateImageResponse {
	return &CreateImageResponse{}
}

func (p *CreateImageResponse) InitDefault() {
}

var CreateImageResponse_Base_DEFAULT *model.BaseResp

func (p *CreateImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateImageResponse_Base_DEFAULT
	}
	return p.Base
}

var CreateImageResponse_Picture_DEFAULT *model.Picture

func (p *CreateImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return CreateImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *CreateImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

func (p *CreateImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *CreateImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateImageResponse(%+v)", *p)
}

var fieldIDToName_CreateImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

type GetImageRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewGetImageRequest() *GetImageRequest {
	return &GetImageRequest{}
}

func (p *GetImageRequest) InitDefault() {
}

func (p *GetImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *GetImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}

func (p *GetImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetImageRequest(%+v)", *p)
}

var fieldIDToName_GetImageRequest = map[int16]string{
	1: "picture_id",
}

type GetImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewGetImageResponse() *GetImageResponse {
	return &GetImageResponse{}
}

func (p *GetImageResponse) InitDefault() {
}

var GetImageResponse_Base_DEFAULT *model.BaseResp

func (p *GetImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetImageResponse_Base_DEFAULT
	}
	return p.Base
}

var GetImageResponse_Picture_DEFAULT *model.Picture

func (p *GetImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return GetImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *GetImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

func (p *GetImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *GetImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetImageResponse(%+v)", *p)
}

var fieldIDToName_GetImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

type ChangeImagePropertyRequest struct {
	PicType   int64   `thrift:"pic_type,1,required" frugal:"1,required,i64" json:"pic_type"`
	Duration  *int64  `thrift:"duration,2,optional" frugal:"2,optional,i64" json:"duration,omitempty"`
	Href      *string `thrift:"href,3,optional" frugal:"3,optional,string" json:"href,omitempty"`
	StartAt   int64   `thrift:"start_at,4,required" frugal:"4,required,i64" json:"start_at"`
	EndAt     int64   `thrift:"end_at,5,required" frugal:"5,required,i64" json:"end_at"`
	SType     int64   `thrift:"s_type,6,required" frugal:"6,required,i64" json:"s_type"`
	Frequency int64   `thrift:"frequency,7,required" frugal:"7,required,i64" json:"frequency"`
	StartTime int64   `thrift:"start_time,8,required" frugal:"8,required,i64" json:"start_time"`
	EndTime   int64   `thrift:"end_time,9,required" frugal:"9,required,i64" json:"end_time"`
	Text      string  `thrift:"text,10,required" frugal:"10,required,string" json:"text"`
	PictureId int64   `thrift:"picture_id,11,required" frugal:"11,required,i64" json:"picture_id"`
	Regex     string  `thrift:"regex,12,required" frugal:"12,required,string" json:"regex"`
}

func NewChangeImagePropertyRequest() *ChangeImagePropertyRequest {
	return &ChangeImagePropertyRequest{}
}

func (p *ChangeImagePropertyRequest) InitDefault() {
}

func (p *ChangeImagePropertyRequest) GetPicType() (v int64) {
	return p.PicType
}

var ChangeImagePropertyRequest_Duration_DEFAULT int64

func (p *ChangeImagePropertyRequest) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return ChangeImagePropertyRequest_Duration_DEFAULT
	}
	return *p.Duration
}

var ChangeImagePropertyRequest_Href_DEFAULT string

func (p *ChangeImagePropertyRequest) GetHref() (v string) {
	if !p.IsSetHref() {
		return ChangeImagePropertyRequest_Href_DEFAULT
	}
	return *p.Href
}

func (p *ChangeImagePropertyRequest) GetStartAt() (v int64) {
	return p.StartAt
}

func (p *ChangeImagePropertyRequest) GetEndAt() (v int64) {
	return p.EndAt
}

func (p *ChangeImagePropertyRequest) GetSType() (v int64) {
	return p.SType
}

func (p *ChangeImagePropertyRequest) GetFrequency() (v int64) {
	return p.Frequency
}

func (p *ChangeImagePropertyRequest) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *ChangeImagePropertyRequest) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *ChangeImagePropertyRequest) GetText() (v string) {
	return p.Text
}

func (p *ChangeImagePropertyRequest) GetPictureId() (v int64) {
	return p.PictureId
}

func (p *ChangeImagePropertyRequest) GetRegex() (v string) {
	return p.Regex
}
func (p *ChangeImagePropertyRequest) SetPicType(val int64) {
	p.PicType = val
}
func (p *ChangeImagePropertyRequest) SetDuration(val *int64) {
	p.Duration = val
}
func (p *ChangeImagePropertyRequest) SetHref(val *string) {
	p.Href = val
}
func (p *ChangeImagePropertyRequest) SetStartAt(val int64) {
	p.StartAt = val
}
func (p *ChangeImagePropertyRequest) SetEndAt(val int64) {
	p.EndAt = val
}
func (p *ChangeImagePropertyRequest) SetSType(val int64) {
	p.SType = val
}
func (p *ChangeImagePropertyRequest) SetFrequency(val int64) {
	p.Frequency = val
}
func (p *ChangeImagePropertyRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *ChangeImagePropertyRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *ChangeImagePropertyRequest) SetText(val string) {
	p.Text = val
}
func (p *ChangeImagePropertyRequest) SetPictureId(val int64) {
	p.PictureId = val
}
func (p *ChangeImagePropertyRequest) SetRegex(val string) {
	p.Regex = val
}

func (p *ChangeImagePropertyRequest) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *ChangeImagePropertyRequest) IsSetHref() bool {
	return p.Href != nil
}

func (p *ChangeImagePropertyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImagePropertyRequest(%+v)", *p)
}

var fieldIDToName_ChangeImagePropertyRequest = map[int16]string{
	1:  "pic_type",
	2:  "duration",
	3:  "href",
	4:  "start_at",
	5:  "end_at",
	6:  "s_type",
	7:  "frequency",
	8:  "start_time",
	9:  "end_time",
	10: "text",
	11: "picture_id",
	12: "regex",
}

type ChangeImagePropertyResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewChangeImagePropertyResponse() *ChangeImagePropertyResponse {
	return &ChangeImagePropertyResponse{}
}

func (p *ChangeImagePropertyResponse) InitDefault() {
}

var ChangeImagePropertyResponse_Base_DEFAULT *model.BaseResp

func (p *ChangeImagePropertyResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ChangeImagePropertyResponse_Base_DEFAULT
	}
	return p.Base
}

var ChangeImagePropertyResponse_Picture_DEFAULT *model.Picture

func (p *ChangeImagePropertyResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return ChangeImagePropertyResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *ChangeImagePropertyResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ChangeImagePropertyResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

func (p *ChangeImagePropertyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeImagePropertyResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ChangeImagePropertyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImagePropertyResponse(%+v)", *p)
}

var fieldIDToName_ChangeImagePropertyResponse = map[int16]string{
	1: "base",
	2: "picture",
}

type ChangeImageRequest struct {
	PictureId int64  `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
	Image     []byte `thrift:"image,2" frugal:"2,default,binary" json:"image"`
}

func NewChangeImageRequest() *ChangeImageRequest {
	return &ChangeImageRequest{}
}

func (p *ChangeImageRequest) InitDefault() {
}

func (p *ChangeImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}

func (p *ChangeImageRequest) GetImage() (v []byte) {
	return p.Image
}
func (p *ChangeImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}
func (p *ChangeImageRequest) SetImage(val []byte) {
	p.Image = val
}

func (p *ChangeImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImageRequest(%+v)", *p)
}

var fieldIDToName_ChangeImageRequest = map[int16]string{
	1: "picture_id",
	2: "image",
}

type ChangeImageResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewChangeImageResponse() *ChangeImageResponse {
	return &ChangeImageResponse{}
}

func (p *ChangeImageResponse) InitDefault() {
}

var ChangeImageResponse_Base_DEFAULT *model.BaseResp

func (p *ChangeImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ChangeImageResponse_Base_DEFAULT
	}
	return p.Base
}

var ChangeImageResponse_Picture_DEFAULT *model.Picture

func (p *ChangeImageResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return ChangeImageResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *ChangeImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ChangeImageResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

func (p *ChangeImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeImageResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ChangeImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeImageResponse(%+v)", *p)
}

var fieldIDToName_ChangeImageResponse = map[int16]string{
	1: "base",
	2: "picture",
}

type DeleteImageRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewDeleteImageRequest() *DeleteImageRequest {
	return &DeleteImageRequest{}
}

func (p *DeleteImageRequest) InitDefault() {
}

func (p *DeleteImageRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *DeleteImageRequest) SetPictureId(val int64) {
	p.PictureId = val
}

func (p *DeleteImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteImageRequest(%+v)", *p)
}

var fieldIDToName_DeleteImageRequest = map[int16]string{
	1: "picture_id",
}

type DeleteImageResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewDeleteImageResponse() *DeleteImageResponse {
	return &DeleteImageResponse{}
}

func (p *DeleteImageResponse) InitDefault() {
}

var DeleteImageResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteImageResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteImageResponse(%+v)", *p)
}

var fieldIDToName_DeleteImageResponse = map[int16]string{
	1: "base",
}

type MobileGetImageRequest struct {
	Type      int64   `thrift:"type,1,required" frugal:"1,required,i64" json:"type"`
	StudentId string  `thrift:"student_id,2,required" frugal:"2,required,string" json:"student_id"`
	College   *string `thrift:"college,3,optional" frugal:"3,optional,string" json:"college,omitempty"`
	Device    string  `thrift:"device,4,required" frugal:"4,required,string" json:"device"`
}

func NewMobileGetImageRequest() *MobileGetImageRequest {
	return &MobileGetImageRequest{}
}

func (p *MobileGetImageRequest) InitDefault() {
}

func (p *MobileGetImageRequest) GetType() (v int64) {
	return p.Type
}

func (p *MobileGetImageRequest) GetStudentId() (v string) {
	return p.StudentId
}

var MobileGetImageRequest_College_DEFAULT string

func (p *MobileGetImageRequest) GetCollege() (v string) {
	if !p.IsSetCollege() {
		return MobileGetImageRequest_College_DEFAULT
	}
	return *p.College
}

func (p *MobileGetImageRequest) GetDevice() (v string) {
	return p.Device
}
func (p *MobileGetImageRequest) SetType(val int64) {
	p.Type = val
}
func (p *MobileGetImageRequest) SetStudentId(val string) {
	p.StudentId = val
}
func (p *MobileGetImageRequest) SetCollege(val *string) {
	p.College = val
}
func (p *MobileGetImageRequest) SetDevice(val string) {
	p.Device = val
}

func (p *MobileGetImageRequest) IsSetCollege() bool {
	return p.College != nil
}

func (p *MobileGetImageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MobileGetImageRequest(%+v)", *p)
}

var fieldIDToName_MobileGetImageRequest = map[int16]string{
	1: "type",
	2: "student_id",
	3: "college",
	4: "device",
}

type MobileGetImageResponse struct {
	Base        *model.BaseResp  `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Count       *int64           `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
	PictureList []*model.Picture `thrift:"picture_list,3,optional" frugal:"3,optional,list<model.Picture>" json:"picture_list,omitempty"`
}

func NewMobileGetImageResponse() *MobileGetImageResponse {
	return &MobileGetImageResponse{}
}

func (p *MobileGetImageResponse) InitDefault() {
}

var MobileGetImageResponse_Base_DEFAULT *model.BaseResp

func (p *MobileGetImageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return MobileGetImageResponse_Base_DEFAULT
	}
	return p.Base
}

var MobileGetImageResponse_Count_DEFAULT int64

func (p *MobileGetImageResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return MobileGetImageResponse_Count_DEFAULT
	}
	return *p.Count
}

var MobileGetImageResponse_PictureList_DEFAULT []*model.Picture

func (p *MobileGetImageResponse) GetPictureList() (v []*model.Picture) {
	if !p.IsSetPictureList() {
		return MobileGetImageResponse_PictureList_DEFAULT
	}
	return p.PictureList
}
func (p *MobileGetImageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *MobileGetImageResponse) SetCount(val *int64) {
	p.Count = val
}
func (p *MobileGetImageResponse) SetPictureList(val []*model.Picture) {
	p.PictureList = val
}

func (p *MobileGetImageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MobileGetImageResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *MobileGetImageResponse) IsSetPictureList() bool {
	return p.PictureList != nil
}

func (p *MobileGetImageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MobileGetImageResponse(%+v)", *p)
}

var fieldIDToName_MobileGetImageResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "picture_list",
}

type AddImagePointTimeRequest struct {
	PictureId int64 `thrift:"picture_id,1,required" frugal:"1,required,i64" json:"picture_id"`
}

func NewAddImagePointTimeRequest() *AddImagePointTimeRequest {
	return &AddImagePointTimeRequest{}
}

func (p *AddImagePointTimeRequest) InitDefault() {
}

func (p *AddImagePointTimeRequest) GetPictureId() (v int64) {
	return p.PictureId
}
func (p *AddImagePointTimeRequest) SetPictureId(val int64) {
	p.PictureId = val
}

func (p *AddImagePointTimeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddImagePointTimeRequest(%+v)", *p)
}

var fieldIDToName_AddImagePointTimeRequest = map[int16]string{
	1: "picture_id",
}

type AddImagePointTimeResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Picture *model.Picture  `thrift:"picture,2,optional" frugal:"2,optional,model.Picture" json:"picture,omitempty"`
}

func NewAddImagePointTimeResponse() *AddImagePointTimeResponse {
	return &AddImagePointTimeResponse{}
}

func (p *AddImagePointTimeResponse) InitDefault() {
}

var AddImagePointTimeResponse_Base_DEFAULT *model.BaseResp

func (p *AddImagePointTimeResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddImagePointTimeResponse_Base_DEFAULT
	}
	return p.Base
}

var AddImagePointTimeResponse_Picture_DEFAULT *model.Picture

func (p *AddImagePointTimeResponse) GetPicture() (v *model.Picture) {
	if !p.IsSetPicture() {
		return AddImagePointTimeResponse_Picture_DEFAULT
	}
	return p.Picture
}
func (p *AddImagePointTimeResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddImagePointTimeResponse) SetPicture(val *model.Picture) {
	p.Picture = val
}

func (p *AddImagePointTimeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddImagePointTimeResponse) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *AddImagePointTimeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddImagePointTimeResponse(%+v)", *p)
}

var fieldIDToName_AddImagePointTimeResponse = map[int16]string{
	1: "base",
	2: "picture",
}

type ListDirFilesRequest struct {
	Path string `thrift:"path,1,required" frugal:"1,required,string" json:"path"`
}

func NewListDirFilesRequest() *ListDirFilesRequest {
	return &ListDirFilesRequest{}
}

func (p *ListDirFilesRequest) InitDefault() {
}

func (p *ListDirFilesRequest) GetPath() (v string) {
	return p.Path
}
func (p *ListDirFilesRequest) SetPath(val string) {
	p.Path = val
}

func (p *ListDirFilesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesRequest(%+v)", *p)
}

var fieldIDToName_ListDirFilesRequest = map[int16]string{
	1: "path",
}

type ListDirFilesResponse struct {
	Dir *model.UpYunFileDir `thrift:"dir,1,required" frugal:"1,required,model.UpYunFileDir" json:"dir"`
}

func NewListDirFilesResponse() *ListDirFilesResponse {
	return &ListDirFilesResponse{}
}

func (p *ListDirFilesResponse) InitDefault() {
}

var ListDirFilesResponse_Dir_DEFAULT *model.UpYunFileDir

func (p *ListDirFilesResponse) GetDir() (v *model.UpYunFileDir) {
	if !p.IsSetDir() {
		return ListDirFilesResponse_Dir_DEFAULT
	}
	return p.Dir
}
func (p *ListDirFilesResponse) SetDir(val *model.UpYunFileDir) {
	p.Dir = val
}

func (p *ListDirFilesResponse) IsSetDir() bool {
	return p.Dir != nil
}

func (p *ListDirFilesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesResponse(%+v)", *p)
}

var fieldIDToName_ListDirFilesResponse = map[int16]string{
	1: "dir",
}

type GetDownloadUrlRequest struct {
	Filepath string `thrift:"filepath,1,required" frugal:"1,required,string" json:"filepath"`
}

func NewGetDownloadUrlRequest() *GetDownloadUrlRequest {
	return &GetDownloadUrlRequest{}
}

func (p *GetDownloadUrlRequest) InitDefault() {
}

func (p *GetDownloadUrlRequest) GetFilepath() (v string) {
	return p.Filepath
}
func (p *GetDownloadUrlRequest) SetFilepath(val string) {
	p.Filepath = val
}

func (p *GetDownloadUrlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlRequest(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlRequest = map[int16]string{
	1: "filepath",
}

type GetDownloadUrlResponse struct {
	Url string `thrift:"url,1,required" frugal:"1,required,string" json:"url"`
}

func NewGetDownloadUrlResponse() *GetDownloadUrlResponse {
	return &GetDownloadUrlResponse{}
}

func (p *GetDownloadUrlResponse) InitDefault() {
}

func (p *GetDownloadUrlResponse) GetUrl() (v string) {
	return p.Url
}
func (p *GetDownloadUrlResponse) SetUrl(val string) {
	p.Url = val
}

func (p *GetDownloadUrlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlResponse(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlResponse = map[int16]string{
	1: "url",
}

type ListDirFilesForAndroidRequest struct {
	Path string `thrift:"path,1,required" frugal:"1,required,string" json:"path"`
}

func NewListDirFilesForAndroidRequest() *ListDirFilesForAndroidRequest {
	return &ListDirFilesForAndroidRequest{}
}

func (p *ListDirFilesForAndroidRequest) InitDefault() {
}

func (p *ListDirFilesForAndroidRequest) GetPath() (v string) {
	return p.Path
}
func (p *ListDirFilesForAndroidRequest) SetPath(val string) {
	p.Path = val
}

func (p *ListDirFilesForAndroidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesForAndroidRequest(%+v)", *p)
}

var fieldIDToName_ListDirFilesForAndroidRequest = map[int16]string{
	1: "path",
}

type ListDirFilesForAndroidResponse struct {
}

func NewListDirFilesForAndroidResponse() *ListDirFilesForAndroidResponse {
	return &ListDirFilesForAndroidResponse{}
}

func (p *ListDirFilesForAndroidResponse) InitDefault() {
}

func (p *ListDirFilesForAndroidResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesForAndroidResponse(%+v)", *p)
}

var fieldIDToName_ListDirFilesForAndroidResponse = map[int16]string{}

type GetDownloadUrlForAndroidRequest struct {
	Filepath string `thrift:"filepath,1,required" frugal:"1,required,string" json:"filepath"`
}

func NewGetDownloadUrlForAndroidRequest() *GetDownloadUrlForAndroidRequest {
	return &GetDownloadUrlForAndroidRequest{}
}

func (p *GetDownloadUrlForAndroidRequest) InitDefault() {
}

func (p *GetDownloadUrlForAndroidRequest) GetFilepath() (v string) {
	return p.Filepath
}
func (p *GetDownloadUrlForAndroidRequest) SetFilepath(val string) {
	p.Filepath = val
}

func (p *GetDownloadUrlForAndroidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlForAndroidRequest(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlForAndroidRequest = map[int16]string{
	1: "filepath",
}

type GetDownloadUrlForAndroidResponse struct {
}

func NewGetDownloadUrlForAndroidResponse() *GetDownloadUrlForAndroidResponse {
	return &GetDownloadUrlForAndroidResponse{}
}

func (p *GetDownloadUrlForAndroidResponse) InitDefault() {
}

func (p *GetDownloadUrlForAndroidResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlForAndroidResponse(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlForAndroidResponse = map[int16]string{}

type GetScoresRequest struct {
}

func NewGetScoresRequest() *GetScoresRequest {
	return &GetScoresRequest{}
}

func (p *GetScoresRequest) InitDefault() {
}

func (p *GetScoresRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScoresRequest(%+v)", *p)
}

var fieldIDToName_GetScoresRequest = map[int16]string{}

type GetScoresResponse struct {
	Scores []*model.Score `thrift:"scores,1,required" frugal:"1,required,list<model.Score>" json:"scores"`
}

func NewGetScoresResponse() *GetScoresResponse {
	return &GetScoresResponse{}
}

func (p *GetScoresResponse) InitDefault() {
}

func (p *GetScoresResponse) GetScores() (v []*model.Score) {
	return p.Scores
}
func (p *GetScoresResponse) SetScores(val []*model.Score) {
	p.Scores = val
}

func (p *GetScoresResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScoresResponse(%+v)", *p)
}

var fieldIDToName_GetScoresResponse = map[int16]string{
	1: "scores",
}

type GetGPARequest struct {
}

func NewGetGPARequest() *GetGPARequest {
	return &GetGPARequest{}
}

func (p *GetGPARequest) InitDefault() {
}

func (p *GetGPARequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGPARequest(%+v)", *p)
}

var fieldIDToName_GetGPARequest = map[int16]string{}

type GetGPAResponse struct {
	Gpa *model.GPABean `thrift:"gpa,1,required" frugal:"1,required,model.GPABean" json:"gpa"`
}

func NewGetGPAResponse() *GetGPAResponse {
	return &GetGPAResponse{}
}

func (p *GetGPAResponse) InitDefault() {
}

var GetGPAResponse_Gpa_DEFAULT *model.GPABean

func (p *GetGPAResponse) GetGpa() (v *model.GPABean) {
	if !p.IsSetGpa() {
		return GetGPAResponse_Gpa_DEFAULT
	}
	return p.Gpa
}
func (p *GetGPAResponse) SetGpa(val *model.GPABean) {
	p.Gpa = val
}

func (p *GetGPAResponse) IsSetGpa() bool {
	return p.Gpa != nil
}

func (p *GetGPAResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGPAResponse(%+v)", *p)
}

var fieldIDToName_GetGPAResponse = map[int16]string{
	1: "gpa",
}

type GetCreditRequest struct {
}

func NewGetCreditRequest() *GetCreditRequest {
	return &GetCreditRequest{}
}

func (p *GetCreditRequest) InitDefault() {
}

func (p *GetCreditRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCreditRequest(%+v)", *p)
}

var fieldIDToName_GetCreditRequest = map[int16]string{}

type GetCreditResponse struct {
	Major []*model.Credit `thrift:"major,1,required" frugal:"1,required,list<model.Credit>" json:"major"`
}

func NewGetCreditResponse() *GetCreditResponse {
	return &GetCreditResponse{}
}

func (p *GetCreditResponse) InitDefault() {
}

func (p *GetCreditResponse) GetMajor() (v []*model.Credit) {
	return p.Major
}
func (p *GetCreditResponse) SetMajor(val []*model.Credit) {
	p.Major = val
}

func (p *GetCreditResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCreditResponse(%+v)", *p)
}

var fieldIDToName_GetCreditResponse = map[int16]string{
	1: "major",
}

type GetUnifiedExamRequest struct {
}

func NewGetUnifiedExamRequest() *GetUnifiedExamRequest {
	return &GetUnifiedExamRequest{}
}

func (p *GetUnifiedExamRequest) InitDefault() {
}

func (p *GetUnifiedExamRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnifiedExamRequest(%+v)", *p)
}

var fieldIDToName_GetUnifiedExamRequest = map[int16]string{}

type GetUnifiedExamResponse struct {
	UnifiedExam []*model.UnifiedExam `thrift:"unifiedExam,1,required" frugal:"1,required,list<model.UnifiedExam>" json:"unifiedExam"`
}

func NewGetUnifiedExamResponse() *GetUnifiedExamResponse {
	return &GetUnifiedExamResponse{}
}

func (p *GetUnifiedExamResponse) InitDefault() {
}

func (p *GetUnifiedExamResponse) GetUnifiedExam() (v []*model.UnifiedExam) {
	return p.UnifiedExam
}
func (p *GetUnifiedExamResponse) SetUnifiedExam(val []*model.UnifiedExam) {
	p.UnifiedExam = val
}

func (p *GetUnifiedExamResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnifiedExamResponse(%+v)", *p)
}

var fieldIDToName_GetUnifiedExamResponse = map[int16]string{
	1: "unifiedExam",
}

type GetPlanRequest struct {
	Id      string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Cookies string `thrift:"cookies,2,required" frugal:"2,required,string" json:"cookies"`
}

func NewGetPlanRequest() *GetPlanRequest {
	return &GetPlanRequest{}
}

func (p *GetPlanRequest) InitDefault() {
}

func (p *GetPlanRequest) GetId() (v string) {
	return p.Id
}

func (p *GetPlanRequest) GetCookies() (v string) {
	return p.Cookies
}
func (p *GetPlanRequest) SetId(val string) {
	p.Id = val
}
func (p *GetPlanRequest) SetCookies(val string) {
	p.Cookies = val
}

func (p *GetPlanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPlanRequest(%+v)", *p)
}

var fieldIDToName_GetPlanRequest = map[int16]string{
	1: "id",
	2: "cookies",
}

type GetPlanResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewGetPlanResponse() *GetPlanResponse {
	return &GetPlanResponse{}
}

func (p *GetPlanResponse) InitDefault() {
}

var GetPlanResponse_Base_DEFAULT *model.BaseResp

func (p *GetPlanResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPlanResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetPlanResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *GetPlanResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPlanResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPlanResponse(%+v)", *p)
}

var fieldIDToName_GetPlanResponse = map[int16]string{
	1: "base",
}

type LoginRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "password",
}

type LoginResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
}

type UploadRequest struct {
	Version  string `thrift:"version,1,required" frugal:"1,required,string" json:"version"`
	Code     string `thrift:"code,2,required" frugal:"2,required,string" json:"code"`
	Url      string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	Feature  string `thrift:"feature,4,required" frugal:"4,required,string" json:"feature"`
	Type     string `thrift:"type,5,required" frugal:"5,required,string" json:"type"`
	Password string `thrift:"password,6,required" frugal:"6,required,string" json:"password"`
	Force    bool   `thrift:"force,7,required" frugal:"7,required,bool" json:"force"`
}

func NewUploadRequest() *UploadRequest {
	return &UploadRequest{}
}

func (p *UploadRequest) InitDefault() {
}

func (p *UploadRequest) GetVersion() (v string) {
	return p.Version
}

func (p *UploadRequest) GetCode() (v string) {
	return p.Code
}

func (p *UploadRequest) GetUrl() (v string) {
	return p.Url
}

func (p *UploadRequest) GetFeature() (v string) {
	return p.Feature
}

func (p *UploadRequest) GetType() (v string) {
	return p.Type
}

func (p *UploadRequest) GetPassword() (v string) {
	return p.Password
}

func (p *UploadRequest) GetForce() (v bool) {
	return p.Force
}
func (p *UploadRequest) SetVersion(val string) {
	p.Version = val
}
func (p *UploadRequest) SetCode(val string) {
	p.Code = val
}
func (p *UploadRequest) SetUrl(val string) {
	p.Url = val
}
func (p *UploadRequest) SetFeature(val string) {
	p.Feature = val
}
func (p *UploadRequest) SetType(val string) {
	p.Type = val
}
func (p *UploadRequest) SetPassword(val string) {
	p.Password = val
}
func (p *UploadRequest) SetForce(val bool) {
	p.Force = val
}

func (p *UploadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadRequest(%+v)", *p)
}

var fieldIDToName_UploadRequest = map[int16]string{
	1: "version",
	2: "code",
	3: "url",
	4: "feature",
	5: "type",
	6: "password",
	7: "force",
}

type UploadResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewUploadResponse() *UploadResponse {
	return &UploadResponse{}
}

func (p *UploadResponse) InitDefault() {
}

var UploadResponse_Base_DEFAULT *model.BaseResp

func (p *UploadResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UploadResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadResponse(%+v)", *p)
}

var fieldIDToName_UploadResponse = map[int16]string{
	1: "base",
}

type UploadParamsRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewUploadParamsRequest() *UploadParamsRequest {
	return &UploadParamsRequest{}
}

func (p *UploadParamsRequest) InitDefault() {
}

func (p *UploadParamsRequest) GetPassword() (v string) {
	return p.Password
}
func (p *UploadParamsRequest) SetPassword(val string) {
	p.Password = val
}

func (p *UploadParamsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsRequest(%+v)", *p)
}

var fieldIDToName_UploadParamsRequest = map[int16]string{
	1: "password",
}

type UploadParamsResponse struct {
	Base          *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	Policy        *string         `thrift:"policy,2,optional" frugal:"2,optional,string" json:"policy,omitempty"`
	Authorization *string         `thrift:"authorization,3,optional" frugal:"3,optional,string" json:"authorization,omitempty"`
}

func NewUploadParamsResponse() *UploadParamsResponse {
	return &UploadParamsResponse{}
}

func (p *UploadParamsResponse) InitDefault() {
}

var UploadParamsResponse_Base_DEFAULT *model.BaseResp

func (p *UploadParamsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadParamsResponse_Base_DEFAULT
	}
	return p.Base
}

var UploadParamsResponse_Policy_DEFAULT string

func (p *UploadParamsResponse) GetPolicy() (v string) {
	if !p.IsSetPolicy() {
		return UploadParamsResponse_Policy_DEFAULT
	}
	return *p.Policy
}

var UploadParamsResponse_Authorization_DEFAULT string

func (p *UploadParamsResponse) GetAuthorization() (v string) {
	if !p.IsSetAuthorization() {
		return UploadParamsResponse_Authorization_DEFAULT
	}
	return *p.Authorization
}
func (p *UploadParamsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UploadParamsResponse) SetPolicy(val *string) {
	p.Policy = val
}
func (p *UploadParamsResponse) SetAuthorization(val *string) {
	p.Authorization = val
}

func (p *UploadParamsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadParamsResponse) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *UploadParamsResponse) IsSetAuthorization() bool {
	return p.Authorization != nil
}

func (p *UploadParamsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsResponse(%+v)", *p)
}

var fieldIDToName_UploadParamsResponse = map[int16]string{
	1: "base",
	2: "policy",
	3: "authorization",
}

type DownloadReleaseApkRequest struct {
}

func NewDownloadReleaseApkRequest() *DownloadReleaseApkRequest {
	return &DownloadReleaseApkRequest{}
}

func (p *DownloadReleaseApkRequest) InitDefault() {
}

func (p *DownloadReleaseApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkRequest(%+v)", *p)
}

var fieldIDToName_DownloadReleaseApkRequest = map[int16]string{}

type DownloadReleaseApkResponse struct {
	File []byte `thrift:"file,1,optional" frugal:"1,optional,binary" json:"file,omitempty"`
}

func NewDownloadReleaseApkResponse() *DownloadReleaseApkResponse {
	return &DownloadReleaseApkResponse{}
}

func (p *DownloadReleaseApkResponse) InitDefault() {
}

var DownloadReleaseApkResponse_File_DEFAULT []byte

func (p *DownloadReleaseApkResponse) GetFile() (v []byte) {
	if !p.IsSetFile() {
		return DownloadReleaseApkResponse_File_DEFAULT
	}
	return p.File
}
func (p *DownloadReleaseApkResponse) SetFile(val []byte) {
	p.File = val
}

func (p *DownloadReleaseApkResponse) IsSetFile() bool {
	return p.File != nil
}

func (p *DownloadReleaseApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkResponse(%+v)", *p)
}

var fieldIDToName_DownloadReleaseApkResponse = map[int16]string{
	1: "file",
}

type DownloadBetaApkRequest struct {
}

func NewDownloadBetaApkRequest() *DownloadBetaApkRequest {
	return &DownloadBetaApkRequest{}
}

func (p *DownloadBetaApkRequest) InitDefault() {
}

func (p *DownloadBetaApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkRequest(%+v)", *p)
}

var fieldIDToName_DownloadBetaApkRequest = map[int16]string{}

type DownloadBetaApkResponse struct {
	File []byte `thrift:"file,1,optional" frugal:"1,optional,binary" json:"file,omitempty"`
}

func NewDownloadBetaApkResponse() *DownloadBetaApkResponse {
	return &DownloadBetaApkResponse{}
}

func (p *DownloadBetaApkResponse) InitDefault() {
}

var DownloadBetaApkResponse_File_DEFAULT []byte

func (p *DownloadBetaApkResponse) GetFile() (v []byte) {
	if !p.IsSetFile() {
		return DownloadBetaApkResponse_File_DEFAULT
	}
	return p.File
}
func (p *DownloadBetaApkResponse) SetFile(val []byte) {
	p.File = val
}

func (p *DownloadBetaApkResponse) IsSetFile() bool {
	return p.File != nil
}

func (p *DownloadBetaApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkResponse(%+v)", *p)
}

var fieldIDToName_DownloadBetaApkResponse = map[int16]string{
	1: "file",
}

type GetReleaseVersionRequest struct {
}

func NewGetReleaseVersionRequest() *GetReleaseVersionRequest {
	return &GetReleaseVersionRequest{}
}

func (p *GetReleaseVersionRequest) InitDefault() {
}

func (p *GetReleaseVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionRequest(%+v)", *p)
}

var fieldIDToName_GetReleaseVersionRequest = map[int16]string{}

type GetReleaseVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
	Force   *bool           `thrift:"force,6,optional" frugal:"6,optional,bool" json:"force,omitempty"`
}

func NewGetReleaseVersionResponse() *GetReleaseVersionResponse {
	return &GetReleaseVersionResponse{}
}

func (p *GetReleaseVersionResponse) InitDefault() {
}

var GetReleaseVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetReleaseVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetReleaseVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetReleaseVersionResponse_Code_DEFAULT string

func (p *GetReleaseVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetReleaseVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetReleaseVersionResponse_Feature_DEFAULT string

func (p *GetReleaseVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetReleaseVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetReleaseVersionResponse_Url_DEFAULT string

func (p *GetReleaseVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetReleaseVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetReleaseVersionResponse_Version_DEFAULT string

func (p *GetReleaseVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetReleaseVersionResponse_Version_DEFAULT
	}
	return *p.Version
}

var GetReleaseVersionResponse_Force_DEFAULT bool

func (p *GetReleaseVersionResponse) GetForce() (v bool) {
	if !p.IsSetForce() {
		return GetReleaseVersionResponse_Force_DEFAULT
	}
	return *p.Force
}
func (p *GetReleaseVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetReleaseVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetReleaseVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetReleaseVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetReleaseVersionResponse) SetVersion(val *string) {
	p.Version = val
}
func (p *GetReleaseVersionResponse) SetForce(val *bool) {
	p.Force = val
}

func (p *GetReleaseVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetReleaseVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetReleaseVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetReleaseVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetReleaseVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetReleaseVersionResponse) IsSetForce() bool {
	return p.Force != nil
}

func (p *GetReleaseVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionResponse(%+v)", *p)
}

var fieldIDToName_GetReleaseVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
	6: "force",
}

type GetBetaVersionRequest struct {
}

func NewGetBetaVersionRequest() *GetBetaVersionRequest {
	return &GetBetaVersionRequest{}
}

func (p *GetBetaVersionRequest) InitDefault() {
}

func (p *GetBetaVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionRequest(%+v)", *p)
}

var fieldIDToName_GetBetaVersionRequest = map[int16]string{}

type GetBetaVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
	Force   *bool           `thrift:"force,6,optional" frugal:"6,optional,bool" json:"force,omitempty"`
}

func NewGetBetaVersionResponse() *GetBetaVersionResponse {
	return &GetBetaVersionResponse{}
}

func (p *GetBetaVersionResponse) InitDefault() {
}

var GetBetaVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetBetaVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetBetaVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetBetaVersionResponse_Code_DEFAULT string

func (p *GetBetaVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetBetaVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetBetaVersionResponse_Feature_DEFAULT string

func (p *GetBetaVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetBetaVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetBetaVersionResponse_Url_DEFAULT string

func (p *GetBetaVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetBetaVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetBetaVersionResponse_Version_DEFAULT string

func (p *GetBetaVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetBetaVersionResponse_Version_DEFAULT
	}
	return *p.Version
}

var GetBetaVersionResponse_Force_DEFAULT bool

func (p *GetBetaVersionResponse) GetForce() (v bool) {
	if !p.IsSetForce() {
		return GetBetaVersionResponse_Force_DEFAULT
	}
	return *p.Force
}
func (p *GetBetaVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetBetaVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetBetaVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetBetaVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetBetaVersionResponse) SetVersion(val *string) {
	p.Version = val
}
func (p *GetBetaVersionResponse) SetForce(val *bool) {
	p.Force = val
}

func (p *GetBetaVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetBetaVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetBetaVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetBetaVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetBetaVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetBetaVersionResponse) IsSetForce() bool {
	return p.Force != nil
}

func (p *GetBetaVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionResponse(%+v)", *p)
}

var fieldIDToName_GetBetaVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
	6: "force",
}

type GetSettingRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
}

func NewGetSettingRequest() *GetSettingRequest {
	return &GetSettingRequest{}
}

func (p *GetSettingRequest) InitDefault() {
}

var GetSettingRequest_Account_DEFAULT string

func (p *GetSettingRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetSettingRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetSettingRequest_Version_DEFAULT string

func (p *GetSettingRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetSettingRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetSettingRequest_Beta_DEFAULT bool

func (p *GetSettingRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetSettingRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetSettingRequest_Phone_DEFAULT string

func (p *GetSettingRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetSettingRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetSettingRequest_IsLogin_DEFAULT bool

func (p *GetSettingRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetSettingRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetSettingRequest_LoginType_DEFAULT string

func (p *GetSettingRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetSettingRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}
func (p *GetSettingRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetSettingRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetSettingRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetSettingRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetSettingRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetSettingRequest) SetLoginType(val *string) {
	p.LoginType = val
}

func (p *GetSettingRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetSettingRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetSettingRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetSettingRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetSettingRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetSettingRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetSettingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingRequest(%+v)", *p)
}

var fieldIDToName_GetSettingRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
}

type GetSettingResponse struct {
	Base         *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetSettingResponse() *GetSettingResponse {
	return &GetSettingResponse{}
}

func (p *GetSettingResponse) InitDefault() {
}

var GetSettingResponse_Base_DEFAULT *model.BaseResp

func (p *GetSettingResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSettingResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetSettingResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetSettingResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSettingResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetSettingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSettingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingResponse(%+v)", *p)
}

var fieldIDToName_GetSettingResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type GetTestRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
	Setting   *string `thrift:"setting,7,optional" frugal:"7,optional,string" json:"setting,omitempty"`
}

func NewGetTestRequest() *GetTestRequest {
	return &GetTestRequest{}
}

func (p *GetTestRequest) InitDefault() {
}

var GetTestRequest_Account_DEFAULT string

func (p *GetTestRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetTestRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetTestRequest_Version_DEFAULT string

func (p *GetTestRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetTestRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetTestRequest_Beta_DEFAULT bool

func (p *GetTestRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetTestRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetTestRequest_Phone_DEFAULT string

func (p *GetTestRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetTestRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetTestRequest_IsLogin_DEFAULT bool

func (p *GetTestRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetTestRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetTestRequest_LoginType_DEFAULT string

func (p *GetTestRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetTestRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}

var GetTestRequest_Setting_DEFAULT string

func (p *GetTestRequest) GetSetting() (v string) {
	if !p.IsSetSetting() {
		return GetTestRequest_Setting_DEFAULT
	}
	return *p.Setting
}
func (p *GetTestRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetTestRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetTestRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetTestRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetTestRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetTestRequest) SetLoginType(val *string) {
	p.LoginType = val
}
func (p *GetTestRequest) SetSetting(val *string) {
	p.Setting = val
}

func (p *GetTestRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetTestRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetTestRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetTestRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetTestRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetTestRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetTestRequest) IsSetSetting() bool {
	return p.Setting != nil
}

func (p *GetTestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestRequest(%+v)", *p)
}

var fieldIDToName_GetTestRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
	7: "setting",
}

type GetTestResponse struct {
	Base         *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetTestResponse() *GetTestResponse {
	return &GetTestResponse{}
}

func (p *GetTestResponse) InitDefault() {
}

var GetTestResponse_Base_DEFAULT *model.BaseResp

func (p *GetTestResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetTestResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetTestResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetTestResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetTestResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetTestResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestResponse(%+v)", *p)
}

var fieldIDToName_GetTestResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type GetCloudRequest struct {
}

func NewGetCloudRequest() *GetCloudRequest {
	return &GetCloudRequest{}
}

func (p *GetCloudRequest) InitDefault() {
}

func (p *GetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudRequest(%+v)", *p)
}

var fieldIDToName_GetCloudRequest = map[int16]string{}

type GetCloudResponse struct {
	Base         *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetCloudResponse() *GetCloudResponse {
	return &GetCloudResponse{}
}

func (p *GetCloudResponse) InitDefault() {
}

var GetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *GetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetCloudResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCloudResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetCloudResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudResponse(%+v)", *p)
}

var fieldIDToName_GetCloudResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type SetCloudRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
	Setting  string `thrift:"setting,2,required" frugal:"2,required,string" json:"setting"`
}

func NewSetCloudRequest() *SetCloudRequest {
	return &SetCloudRequest{}
}

func (p *SetCloudRequest) InitDefault() {
}

func (p *SetCloudRequest) GetPassword() (v string) {
	return p.Password
}

func (p *SetCloudRequest) GetSetting() (v string) {
	return p.Setting
}
func (p *SetCloudRequest) SetPassword(val string) {
	p.Password = val
}
func (p *SetCloudRequest) SetSetting(val string) {
	p.Setting = val
}

func (p *SetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudRequest(%+v)", *p)
}

var fieldIDToName_SetCloudRequest = map[int16]string{
	1: "password",
	2: "setting",
}

type SetCloudResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewSetCloudResponse() *SetCloudResponse {
	return &SetCloudResponse{}
}

func (p *SetCloudResponse) InitDefault() {
}

var SetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *SetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SetCloudResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *SetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudResponse(%+v)", *p)
}

var fieldIDToName_SetCloudResponse = map[int16]string{
	1: "base",
}

type GetDumpRequest struct {
}

func NewGetDumpRequest() *GetDumpRequest {
	return &GetDumpRequest{}
}

func (p *GetDumpRequest) InitDefault() {
}

func (p *GetDumpRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpRequest(%+v)", *p)
}

var fieldIDToName_GetDumpRequest = map[int16]string{}

type GetDumpResponse struct {
	Base *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	Data string          `thrift:"data,2" frugal:"2,default,string" json:"data"`
}

func NewGetDumpResponse() *GetDumpResponse {
	return &GetDumpResponse{}
}

func (p *GetDumpResponse) InitDefault() {
}

var GetDumpResponse_Base_DEFAULT *model.BaseResp

func (p *GetDumpResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetDumpResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetDumpResponse) GetData() (v string) {
	return p.Data
}
func (p *GetDumpResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetDumpResponse) SetData(val string) {
	p.Data = val
}

func (p *GetDumpResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDumpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpResponse(%+v)", *p)
}

var fieldIDToName_GetDumpResponse = map[int16]string{
	1: "base",
	2: "data",
}

type AndroidGetVersioneRequest struct {
}

func NewAndroidGetVersioneRequest() *AndroidGetVersioneRequest {
	return &AndroidGetVersioneRequest{}
}

func (p *AndroidGetVersioneRequest) InitDefault() {
}

func (p *AndroidGetVersioneRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AndroidGetVersioneRequest(%+v)", *p)
}

var fieldIDToName_AndroidGetVersioneRequest = map[int16]string{}

type AndroidGetVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	Release *model.Version  `thrift:"release,2,optional" frugal:"2,optional,model.Version" json:"release,omitempty"`
	Beta    *model.Version  `thrift:"beta,3,optional" frugal:"3,optional,model.Version" json:"beta,omitempty"`
}

func NewAndroidGetVersionResponse() *AndroidGetVersionResponse {
	return &AndroidGetVersionResponse{}
}

func (p *AndroidGetVersionResponse) InitDefault() {
}

var AndroidGetVersionResponse_Base_DEFAULT *model.BaseResp

func (p *AndroidGetVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AndroidGetVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var AndroidGetVersionResponse_Release_DEFAULT *model.Version

func (p *AndroidGetVersionResponse) GetRelease() (v *model.Version) {
	if !p.IsSetRelease() {
		return AndroidGetVersionResponse_Release_DEFAULT
	}
	return p.Release
}

var AndroidGetVersionResponse_Beta_DEFAULT *model.Version

func (p *AndroidGetVersionResponse) GetBeta() (v *model.Version) {
	if !p.IsSetBeta() {
		return AndroidGetVersionResponse_Beta_DEFAULT
	}
	return p.Beta
}
func (p *AndroidGetVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AndroidGetVersionResponse) SetRelease(val *model.Version) {
	p.Release = val
}
func (p *AndroidGetVersionResponse) SetBeta(val *model.Version) {
	p.Beta = val
}

func (p *AndroidGetVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AndroidGetVersionResponse) IsSetRelease() bool {
	return p.Release != nil
}

func (p *AndroidGetVersionResponse) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *AndroidGetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AndroidGetVersionResponse(%+v)", *p)
}

var fieldIDToName_AndroidGetVersionResponse = map[int16]string{
	1: "base",
	2: "release",
	3: "beta",
}

type GetCSSRequest struct {
}

func NewGetCSSRequest() *GetCSSRequest {
	return &GetCSSRequest{}
}

func (p *GetCSSRequest) InitDefault() {
}

func (p *GetCSSRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCSSRequest(%+v)", *p)
}

var fieldIDToName_GetCSSRequest = map[int16]string{}

type GetCSSResponse struct {
	Css []byte `thrift:"css,1" frugal:"1,default,binary" json:"css"`
}

func NewGetCSSResponse() *GetCSSResponse {
	return &GetCSSResponse{}
}

func (p *GetCSSResponse) InitDefault() {
}

func (p *GetCSSResponse) GetCss() (v []byte) {
	return p.Css
}
func (p *GetCSSResponse) SetCss(val []byte) {
	p.Css = val
}

func (p *GetCSSResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCSSResponse(%+v)", *p)
}

var fieldIDToName_GetCSSResponse = map[int16]string{
	1: "css",
}

type GetHtmlRequest struct {
}

func NewGetHtmlRequest() *GetHtmlRequest {
	return &GetHtmlRequest{}
}

func (p *GetHtmlRequest) InitDefault() {
}

func (p *GetHtmlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHtmlRequest(%+v)", *p)
}

var fieldIDToName_GetHtmlRequest = map[int16]string{}

type GetHtmlResponse struct {
	Html []byte `thrift:"html,1" frugal:"1,default,binary" json:"html"`
}

func NewGetHtmlResponse() *GetHtmlResponse {
	return &GetHtmlResponse{}
}

func (p *GetHtmlResponse) InitDefault() {
}

func (p *GetHtmlResponse) GetHtml() (v []byte) {
	return p.Html
}
func (p *GetHtmlResponse) SetHtml(val []byte) {
	p.Html = val
}

func (p *GetHtmlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHtmlResponse(%+v)", *p)
}

var fieldIDToName_GetHtmlResponse = map[int16]string{
	1: "html",
}

type GetUserAgreementRequest struct {
}

func NewGetUserAgreementRequest() *GetUserAgreementRequest {
	return &GetUserAgreementRequest{}
}

func (p *GetUserAgreementRequest) InitDefault() {
}

func (p *GetUserAgreementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAgreementRequest(%+v)", *p)
}

var fieldIDToName_GetUserAgreementRequest = map[int16]string{}

type GetUserAgreementResponse struct {
	UserAgreement []byte `thrift:"user_agreement,1" frugal:"1,default,binary" json:"user_agreement"`
}

func NewGetUserAgreementResponse() *GetUserAgreementResponse {
	return &GetUserAgreementResponse{}
}

func (p *GetUserAgreementResponse) InitDefault() {
}

func (p *GetUserAgreementResponse) GetUserAgreement() (v []byte) {
	return p.UserAgreement
}
func (p *GetUserAgreementResponse) SetUserAgreement(val []byte) {
	p.UserAgreement = val
}

func (p *GetUserAgreementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAgreementResponse(%+v)", *p)
}

var fieldIDToName_GetUserAgreementResponse = map[int16]string{
	1: "user_agreement",
}

type TermListRequest struct {
}

func NewTermListRequest() *TermListRequest {
	return &TermListRequest{}
}

func (p *TermListRequest) InitDefault() {
}

func (p *TermListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListRequest(%+v)", *p)
}

var fieldIDToName_TermListRequest = map[int16]string{}

type TermListResponse struct {
	Base      *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	TermLists *model.TermList `thrift:"term_lists,2,required" frugal:"2,required,model.TermList" json:"term_lists"`
}

func NewTermListResponse() *TermListResponse {
	return &TermListResponse{}
}

func (p *TermListResponse) InitDefault() {
}

var TermListResponse_Base_DEFAULT *model.BaseResp

func (p *TermListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return TermListResponse_Base_DEFAULT
	}
	return p.Base
}

var TermListResponse_TermLists_DEFAULT *model.TermList

func (p *TermListResponse) GetTermLists() (v *model.TermList) {
	if !p.IsSetTermLists() {
		return TermListResponse_TermLists_DEFAULT
	}
	return p.TermLists
}
func (p *TermListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *TermListResponse) SetTermLists(val *model.TermList) {
	p.TermLists = val
}

func (p *TermListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *TermListResponse) IsSetTermLists() bool {
	return p.TermLists != nil
}

func (p *TermListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListResponse(%+v)", *p)
}

var fieldIDToName_TermListResponse = map[int16]string{
	1: "base",
	2: "term_lists",
}

type TermRequest struct {
	Term string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
}

func NewTermRequest() *TermRequest {
	return &TermRequest{}
}

func (p *TermRequest) InitDefault() {
}

func (p *TermRequest) GetTerm() (v string) {
	return p.Term
}
func (p *TermRequest) SetTerm(val string) {
	p.Term = val
}

func (p *TermRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermRequest(%+v)", *p)
}

var fieldIDToName_TermRequest = map[int16]string{
	1: "term",
}

type TermResponse struct {
	Base     *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	TermInfo *model.TermInfo `thrift:"term_info,2,required" frugal:"2,required,model.TermInfo" json:"term_info"`
}

func NewTermResponse() *TermResponse {
	return &TermResponse{}
}

func (p *TermResponse) InitDefault() {
}

var TermResponse_Base_DEFAULT *model.BaseResp

func (p *TermResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return TermResponse_Base_DEFAULT
	}
	return p.Base
}

var TermResponse_TermInfo_DEFAULT *model.TermInfo

func (p *TermResponse) GetTermInfo() (v *model.TermInfo) {
	if !p.IsSetTermInfo() {
		return TermResponse_TermInfo_DEFAULT
	}
	return p.TermInfo
}
func (p *TermResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *TermResponse) SetTermInfo(val *model.TermInfo) {
	p.TermInfo = val
}

func (p *TermResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *TermResponse) IsSetTermInfo() bool {
	return p.TermInfo != nil
}

func (p *TermResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermResponse(%+v)", *p)
}

var fieldIDToName_TermResponse = map[int16]string{
	1: "base",
	2: "term_info",
}

type GetNoticeRequst struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewGetNoticeRequst() *GetNoticeRequst {
	return &GetNoticeRequst{}
}

func (p *GetNoticeRequst) InitDefault() {
}

func (p *GetNoticeRequst) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *GetNoticeRequst) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *GetNoticeRequst) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoticeRequst(%+v)", *p)
}

var fieldIDToName_GetNoticeRequst = map[int16]string{
	1: "pageNum",
}

type GetNoticeResponse struct {
	Notices []*model.NoticeInfo `thrift:"notices,1,required" frugal:"1,required,list<model.NoticeInfo>" json:"notices"`
	Total   int64               `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewGetNoticeResponse() *GetNoticeResponse {
	return &GetNoticeResponse{}
}

func (p *GetNoticeResponse) InitDefault() {
}

func (p *GetNoticeResponse) GetNotices() (v []*model.NoticeInfo) {
	return p.Notices
}

func (p *GetNoticeResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetNoticeResponse) SetNotices(val []*model.NoticeInfo) {
	p.Notices = val
}
func (p *GetNoticeResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetNoticeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoticeResponse(%+v)", *p)
}

var fieldIDToName_GetNoticeResponse = map[int16]string{
	1: "notices",
	2: "total",
}

type GetContributorInfoRequest struct {
}

func NewGetContributorInfoRequest() *GetContributorInfoRequest {
	return &GetContributorInfoRequest{}
}

func (p *GetContributorInfoRequest) InitDefault() {
}

func (p *GetContributorInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContributorInfoRequest(%+v)", *p)
}

var fieldIDToName_GetContributorInfoRequest = map[int16]string{}

type GetContributorInfoResponse struct {
	FzuhelperApp    []*model.Contributor `thrift:"fzuhelper_app,1,required" frugal:"1,required,list<model.Contributor>" json:"fzuhelper_app"`
	FzuhelperServer []*model.Contributor `thrift:"fzuhelper_server,2,required" frugal:"2,required,list<model.Contributor>" json:"fzuhelper_server"`
	Jwch            []*model.Contributor `thrift:"jwch,3,required" frugal:"3,required,list<model.Contributor>" json:"jwch"`
	Yjsy            []*model.Contributor `thrift:"yjsy,4,required" frugal:"4,required,list<model.Contributor>" json:"yjsy"`
}

func NewGetContributorInfoResponse() *GetContributorInfoResponse {
	return &GetContributorInfoResponse{}
}

func (p *GetContributorInfoResponse) InitDefault() {
}

func (p *GetContributorInfoResponse) GetFzuhelperApp() (v []*model.Contributor) {
	return p.FzuhelperApp
}

func (p *GetContributorInfoResponse) GetFzuhelperServer() (v []*model.Contributor) {
	return p.FzuhelperServer
}

func (p *GetContributorInfoResponse) GetJwch() (v []*model.Contributor) {
	return p.Jwch
}

func (p *GetContributorInfoResponse) GetYjsy() (v []*model.Contributor) {
	return p.Yjsy
}
func (p *GetContributorInfoResponse) SetFzuhelperApp(val []*model.Contributor) {
	p.FzuhelperApp = val
}
func (p *GetContributorInfoResponse) SetFzuhelperServer(val []*model.Contributor) {
	p.FzuhelperServer = val
}
func (p *GetContributorInfoResponse) SetJwch(val []*model.Contributor) {
	p.Jwch = val
}
func (p *GetContributorInfoResponse) SetYjsy(val []*model.Contributor) {
	p.Yjsy = val
}

func (p *GetContributorInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContributorInfoResponse(%+v)", *p)
}

var fieldIDToName_GetContributorInfoResponse = map[int16]string{
	1: "fzuhelper_app",
	2: "fzuhelper_server",
	3: "jwch",
	4: "yjsy",
}

type GetToolboxConfigRequest struct {
	Version   *int64  `thrift:"version,1,optional" frugal:"1,optional,i64" json:"version,omitempty"`
	StudentId *string `thrift:"student_id,2,optional" frugal:"2,optional,string" json:"student_id,omitempty"`
	Platform  *string `thrift:"platform,3,optional" frugal:"3,optional,string" json:"platform,omitempty"`
}

func NewGetToolboxConfigRequest() *GetToolboxConfigRequest {
	return &GetToolboxConfigRequest{}
}

func (p *GetToolboxConfigRequest) InitDefault() {
}

var GetToolboxConfigRequest_Version_DEFAULT int64

func (p *GetToolboxConfigRequest) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return GetToolboxConfigRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetToolboxConfigRequest_StudentId_DEFAULT string

func (p *GetToolboxConfigRequest) GetStudentId() (v string) {
	if !p.IsSetStudentId() {
		return GetToolboxConfigRequest_StudentId_DEFAULT
	}
	return *p.StudentId
}

var GetToolboxConfigRequest_Platform_DEFAULT string

func (p *GetToolboxConfigRequest) GetPlatform() (v string) {
	if !p.IsSetPlatform() {
		return GetToolboxConfigRequest_Platform_DEFAULT
	}
	return *p.Platform
}
func (p *GetToolboxConfigRequest) SetVersion(val *int64) {
	p.Version = val
}
func (p *GetToolboxConfigRequest) SetStudentId(val *string) {
	p.StudentId = val
}
func (p *GetToolboxConfigRequest) SetPlatform(val *string) {
	p.Platform = val
}

func (p *GetToolboxConfigRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetToolboxConfigRequest) IsSetStudentId() bool {
	return p.StudentId != nil
}

func (p *GetToolboxConfigRequest) IsSetPlatform() bool {
	return p.Platform != nil
}

func (p *GetToolboxConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetToolboxConfigRequest(%+v)", *p)
}

var fieldIDToName_GetToolboxConfigRequest = map[int16]string{
	1: "version",
	2: "student_id",
	3: "platform",
}

type GetToolboxConfigResponse struct {
	Config []*model.ToolboxConfig `thrift:"config,1,required" frugal:"1,required,list<model.ToolboxConfig>" json:"config"`
}

func NewGetToolboxConfigResponse() *GetToolboxConfigResponse {
	return &GetToolboxConfigResponse{}
}

func (p *GetToolboxConfigResponse) InitDefault() {
}

func (p *GetToolboxConfigResponse) GetConfig() (v []*model.ToolboxConfig) {
	return p.Config
}
func (p *GetToolboxConfigResponse) SetConfig(val []*model.ToolboxConfig) {
	p.Config = val
}

func (p *GetToolboxConfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetToolboxConfigResponse(%+v)", *p)
}

var fieldIDToName_GetToolboxConfigResponse = map[int16]string{
	1: "config",
}

type PutToolboxConfigRequest struct {
	Secret    string  `thrift:"secret,1,required" frugal:"1,required,string" json:"secret"`
	ToolId    int64   `thrift:"tool_id,2,required" frugal:"2,required,i64" json:"tool_id"`
	StudentId *string `thrift:"student_id,3,optional" frugal:"3,optional,string" json:"student_id,omitempty"`
	Platform  *string `thrift:"platform,4,optional" frugal:"4,optional,string" json:"platform,omitempty"`
	Version   *int64  `thrift:"version,5,optional" frugal:"5,optional,i64" json:"version,omitempty"`
	Visible   bool    `thrift:"visible,6,required" frugal:"6,required,bool" json:"visible"`
	Name      string  `thrift:"name,7,required" frugal:"7,required,string" json:"name"`
	Icon      string  `thrift:"icon,8,required" frugal:"8,required,string" json:"icon"`
	Type      string  `thrift:"type,9,required" frugal:"9,required,string" json:"type"`
	Message   *string `thrift:"message,10,optional" frugal:"10,optional,string" json:"message,omitempty"`
	Extra     string  `thrift:"extra,11,required" frugal:"11,required,string" json:"extra"`
}

func NewPutToolboxConfigRequest() *PutToolboxConfigRequest {
	return &PutToolboxConfigRequest{}
}

func (p *PutToolboxConfigRequest) InitDefault() {
}

func (p *PutToolboxConfigRequest) GetSecret() (v string) {
	return p.Secret
}

func (p *PutToolboxConfigRequest) GetToolId() (v int64) {
	return p.ToolId
}

var PutToolboxConfigRequest_StudentId_DEFAULT string

func (p *PutToolboxConfigRequest) GetStudentId() (v string) {
	if !p.IsSetStudentId() {
		return PutToolboxConfigRequest_StudentId_DEFAULT
	}
	return *p.StudentId
}

var PutToolboxConfigRequest_Platform_DEFAULT string

func (p *PutToolboxConfigRequest) GetPlatform() (v string) {
	if !p.IsSetPlatform() {
		return PutToolboxConfigRequest_Platform_DEFAULT
	}
	return *p.Platform
}

var PutToolboxConfigRequest_Version_DEFAULT int64

func (p *PutToolboxConfigRequest) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return PutToolboxConfigRequest_Version_DEFAULT
	}
	return *p.Version
}

func (p *PutToolboxConfigRequest) GetVisible() (v bool) {
	return p.Visible
}

func (p *PutToolboxConfigRequest) GetName() (v string) {
	return p.Name
}

func (p *PutToolboxConfigRequest) GetIcon() (v string) {
	return p.Icon
}

func (p *PutToolboxConfigRequest) GetType() (v string) {
	return p.Type
}

var PutToolboxConfigRequest_Message_DEFAULT string

func (p *PutToolboxConfigRequest) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return PutToolboxConfigRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *PutToolboxConfigRequest) GetExtra() (v string) {
	return p.Extra
}
func (p *PutToolboxConfigRequest) SetSecret(val string) {
	p.Secret = val
}
func (p *PutToolboxConfigRequest) SetToolId(val int64) {
	p.ToolId = val
}
func (p *PutToolboxConfigRequest) SetStudentId(val *string) {
	p.StudentId = val
}
func (p *PutToolboxConfigRequest) SetPlatform(val *string) {
	p.Platform = val
}
func (p *PutToolboxConfigRequest) SetVersion(val *int64) {
	p.Version = val
}
func (p *PutToolboxConfigRequest) SetVisible(val bool) {
	p.Visible = val
}
func (p *PutToolboxConfigRequest) SetName(val string) {
	p.Name = val
}
func (p *PutToolboxConfigRequest) SetIcon(val string) {
	p.Icon = val
}
func (p *PutToolboxConfigRequest) SetType(val string) {
	p.Type = val
}
func (p *PutToolboxConfigRequest) SetMessage(val *string) {
	p.Message = val
}
func (p *PutToolboxConfigRequest) SetExtra(val string) {
	p.Extra = val
}

func (p *PutToolboxConfigRequest) IsSetStudentId() bool {
	return p.StudentId != nil
}

func (p *PutToolboxConfigRequest) IsSetPlatform() bool {
	return p.Platform != nil
}

func (p *PutToolboxConfigRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *PutToolboxConfigRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *PutToolboxConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutToolboxConfigRequest(%+v)", *p)
}

var fieldIDToName_PutToolboxConfigRequest = map[int16]string{
	1:  "secret",
	2:  "tool_id",
	3:  "student_id",
	4:  "platform",
	5:  "version",
	6:  "visible",
	7:  "name",
	8:  "icon",
	9:  "type",
	10: "message",
	11: "extra",
}

type PutToolboxConfigResponse struct {
	ConfigId *int64 `thrift:"config_id,1,optional" frugal:"1,optional,i64" json:"config_id,omitempty"`
}

func NewPutToolboxConfigResponse() *PutToolboxConfigResponse {
	return &PutToolboxConfigResponse{}
}

func (p *PutToolboxConfigResponse) InitDefault() {
}

var PutToolboxConfigResponse_ConfigId_DEFAULT int64

func (p *PutToolboxConfigResponse) GetConfigId() (v int64) {
	if !p.IsSetConfigId() {
		return PutToolboxConfigResponse_ConfigId_DEFAULT
	}
	return *p.ConfigId
}
func (p *PutToolboxConfigResponse) SetConfigId(val *int64) {
	p.ConfigId = val
}

func (p *PutToolboxConfigResponse) IsSetConfigId() bool {
	return p.ConfigId != nil
}

func (p *PutToolboxConfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutToolboxConfigResponse(%+v)", *p)
}

var fieldIDToName_PutToolboxConfigResponse = map[int16]string{
	1: "config_id",
}

type CreateFeedbackRequest struct {
	ReportId       int64  `thrift:"reportId,1,required" frugal:"1,required,i64" json:"reportId"`
	StuId          string `thrift:"stuId,2,required" frugal:"2,required,string" json:"stuId"`
	Name           string `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	College        string `thrift:"college,4,required" frugal:"4,required,string" json:"college"`
	ContactPhone   string `thrift:"contactPhone,5,required" frugal:"5,required,string" json:"contactPhone"`
	ContactQQ      string `thrift:"contactQQ,6,required" frugal:"6,required,string" json:"contactQQ"`
	ContactEmail   string `thrift:"contactEmail,7,required" frugal:"7,required,string" json:"contactEmail"`
	NetworkEnv     string `thrift:"networkEnv,8,required" frugal:"8,required,string" json:"networkEnv"`
	IsOnCampus     bool   `thrift:"isOnCampus,9,required" frugal:"9,required,bool" json:"isOnCampus"`
	OsName         string `thrift:"osName,10,required" frugal:"10,required,string" json:"osName"`
	OsVersion      string `thrift:"osVersion,11,required" frugal:"11,required,string" json:"osVersion"`
	Manufacturer   string `thrift:"manufacturer,12,required" frugal:"12,required,string" json:"manufacturer"`
	DeviceModel    string `thrift:"deviceModel,13,required" frugal:"13,required,string" json:"deviceModel"`
	ProblemDesc    string `thrift:"problemDesc,14,required" frugal:"14,required,string" json:"problemDesc"`
	Screenshots    string `thrift:"screenshots,15,required" frugal:"15,required,string" json:"screenshots"`
	AppVersion     string `thrift:"appVersion,16,required" frugal:"16,required,string" json:"appVersion"`
	VersionHistory string `thrift:"versionHistory,17,required" frugal:"17,required,string" json:"versionHistory"`
	NetworkTraces  string `thrift:"networkTraces,18,required" frugal:"18,required,string" json:"networkTraces"`
	Events         string `thrift:"events,19,required" frugal:"19,required,string" json:"events"`
	UserSettings   string `thrift:"userSettings,20,required" frugal:"20,required,string" json:"userSettings"`
}

func NewCreateFeedbackRequest() *CreateFeedbackRequest {
	return &CreateFeedbackRequest{}
}

func (p *CreateFeedbackRequest) InitDefault() {
}

func (p *CreateFeedbackRequest) GetReportId() (v int64) {
	return p.ReportId
}

func (p *CreateFeedbackRequest) GetStuId() (v string) {
	return p.StuId
}

func (p *CreateFeedbackRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateFeedbackRequest) GetCollege() (v string) {
	return p.College
}

func (p *CreateFeedbackRequest) GetContactPhone() (v string) {
	return p.ContactPhone
}

func (p *CreateFeedbackRequest) GetContactQQ() (v string) {
	return p.ContactQQ
}

func (p *CreateFeedbackRequest) GetContactEmail() (v string) {
	return p.ContactEmail
}

func (p *CreateFeedbackRequest) GetNetworkEnv() (v string) {
	return p.NetworkEnv
}

func (p *CreateFeedbackRequest) GetIsOnCampus() (v bool) {
	return p.IsOnCampus
}

func (p *CreateFeedbackRequest) GetOsName() (v string) {
	return p.OsName
}

func (p *CreateFeedbackRequest) GetOsVersion() (v string) {
	return p.OsVersion
}

func (p *CreateFeedbackRequest) GetManufacturer() (v string) {
	return p.Manufacturer
}

func (p *CreateFeedbackRequest) GetDeviceModel() (v string) {
	return p.DeviceModel
}

func (p *CreateFeedbackRequest) GetProblemDesc() (v string) {
	return p.ProblemDesc
}

func (p *CreateFeedbackRequest) GetScreenshots() (v string) {
	return p.Screenshots
}

func (p *CreateFeedbackRequest) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *CreateFeedbackRequest) GetVersionHistory() (v string) {
	return p.VersionHistory
}

func (p *CreateFeedbackRequest) GetNetworkTraces() (v string) {
	return p.NetworkTraces
}

func (p *CreateFeedbackRequest) GetEvents() (v string) {
	return p.Events
}

func (p *CreateFeedbackRequest) GetUserSettings() (v string) {
	return p.UserSettings
}
func (p *CreateFeedbackRequest) SetReportId(val int64) {
	p.ReportId = val
}
func (p *CreateFeedbackRequest) SetStuId(val string) {
	p.StuId = val
}
func (p *CreateFeedbackRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateFeedbackRequest) SetCollege(val string) {
	p.College = val
}
func (p *CreateFeedbackRequest) SetContactPhone(val string) {
	p.ContactPhone = val
}
func (p *CreateFeedbackRequest) SetContactQQ(val string) {
	p.ContactQQ = val
}
func (p *CreateFeedbackRequest) SetContactEmail(val string) {
	p.ContactEmail = val
}
func (p *CreateFeedbackRequest) SetNetworkEnv(val string) {
	p.NetworkEnv = val
}
func (p *CreateFeedbackRequest) SetIsOnCampus(val bool) {
	p.IsOnCampus = val
}
func (p *CreateFeedbackRequest) SetOsName(val string) {
	p.OsName = val
}
func (p *CreateFeedbackRequest) SetOsVersion(val string) {
	p.OsVersion = val
}
func (p *CreateFeedbackRequest) SetManufacturer(val string) {
	p.Manufacturer = val
}
func (p *CreateFeedbackRequest) SetDeviceModel(val string) {
	p.DeviceModel = val
}
func (p *CreateFeedbackRequest) SetProblemDesc(val string) {
	p.ProblemDesc = val
}
func (p *CreateFeedbackRequest) SetScreenshots(val string) {
	p.Screenshots = val
}
func (p *CreateFeedbackRequest) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *CreateFeedbackRequest) SetVersionHistory(val string) {
	p.VersionHistory = val
}
func (p *CreateFeedbackRequest) SetNetworkTraces(val string) {
	p.NetworkTraces = val
}
func (p *CreateFeedbackRequest) SetEvents(val string) {
	p.Events = val
}
func (p *CreateFeedbackRequest) SetUserSettings(val string) {
	p.UserSettings = val
}

func (p *CreateFeedbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFeedbackRequest(%+v)", *p)
}

var fieldIDToName_CreateFeedbackRequest = map[int16]string{
	1:  "reportId",
	2:  "stuId",
	3:  "name",
	4:  "college",
	5:  "contactPhone",
	6:  "contactQQ",
	7:  "contactEmail",
	8:  "networkEnv",
	9:  "isOnCampus",
	10: "osName",
	11: "osVersion",
	12: "manufacturer",
	13: "deviceModel",
	14: "problemDesc",
	15: "screenshots",
	16: "appVersion",
	17: "versionHistory",
	18: "networkTraces",
	19: "events",
	20: "userSettings",
}

type CreateFeedbackResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewCreateFeedbackResponse() *CreateFeedbackResponse {
	return &CreateFeedbackResponse{}
}

func (p *CreateFeedbackResponse) InitDefault() {
}

var CreateFeedbackResponse_Base_DEFAULT *model.BaseResp

func (p *CreateFeedbackResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateFeedbackResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateFeedbackResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *CreateFeedbackResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFeedbackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFeedbackResponse(%+v)", *p)
}

var fieldIDToName_CreateFeedbackResponse = map[int16]string{
	1: "base",
}

type GetFeedbackRequest struct {
	ReportId int64 `thrift:"reportId,1,required" frugal:"1,required,i64" json:"reportId"`
}

func NewGetFeedbackRequest() *GetFeedbackRequest {
	return &GetFeedbackRequest{}
}

func (p *GetFeedbackRequest) InitDefault() {
}

func (p *GetFeedbackRequest) GetReportId() (v int64) {
	return p.ReportId
}
func (p *GetFeedbackRequest) SetReportId(val int64) {
	p.ReportId = val
}

func (p *GetFeedbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFeedbackRequest(%+v)", *p)
}

var fieldIDToName_GetFeedbackRequest = map[int16]string{
	1: "reportId",
}

type GetFeedbackResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data *model.Feedback `thrift:"data,2,optional" frugal:"2,optional,model.Feedback" json:"data,omitempty"`
}

func NewGetFeedbackResponse() *GetFeedbackResponse {
	return &GetFeedbackResponse{}
}

func (p *GetFeedbackResponse) InitDefault() {
}

var GetFeedbackResponse_Base_DEFAULT *model.BaseResp

func (p *GetFeedbackResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFeedbackResponse_Base_DEFAULT
	}
	return p.Base
}

var GetFeedbackResponse_Data_DEFAULT *model.Feedback

func (p *GetFeedbackResponse) GetData() (v *model.Feedback) {
	if !p.IsSetData() {
		return GetFeedbackResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetFeedbackResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFeedbackResponse) SetData(val *model.Feedback) {
	p.Data = val
}

func (p *GetFeedbackResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFeedbackResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetFeedbackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFeedbackResponse(%+v)", *p)
}

var fieldIDToName_GetFeedbackResponse = map[int16]string{
	1: "base",
	2: "data",
}

type ClassRoomService interface {
	GetEmptyClassrooms(ctx context.Context, request *EmptyClassroomRequest) (r *EmptyClassroomResponse, err error)

	GetExamRoomInfo(ctx context.Context, request *ExamRoomInfoRequest) (r *ExamRoomInfoResponse, err error)
}

type ClassRoomServiceGetEmptyClassroomsArgs struct {
	Request *EmptyClassroomRequest `thrift:"request,1" frugal:"1,default,EmptyClassroomRequest" json:"request"`
}

func NewClassRoomServiceGetEmptyClassroomsArgs() *ClassRoomServiceGetEmptyClassroomsArgs {
	return &ClassRoomServiceGetEmptyClassroomsArgs{}
}

func (p *ClassRoomServiceGetEmptyClassroomsArgs) InitDefault() {
}

var ClassRoomServiceGetEmptyClassroomsArgs_Request_DEFAULT *EmptyClassroomRequest

func (p *ClassRoomServiceGetEmptyClassroomsArgs) GetRequest() (v *EmptyClassroomRequest) {
	if !p.IsSetRequest() {
		return ClassRoomServiceGetEmptyClassroomsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ClassRoomServiceGetEmptyClassroomsArgs) SetRequest(val *EmptyClassroomRequest) {
	p.Request = val
}

func (p *ClassRoomServiceGetEmptyClassroomsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClassRoomServiceGetEmptyClassroomsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassRoomServiceGetEmptyClassroomsArgs(%+v)", *p)
}

var fieldIDToName_ClassRoomServiceGetEmptyClassroomsArgs = map[int16]string{
	1: "request",
}

type ClassRoomServiceGetEmptyClassroomsResult struct {
	Success *EmptyClassroomResponse `thrift:"success,0,optional" frugal:"0,optional,EmptyClassroomResponse" json:"success,omitempty"`
}

func NewClassRoomServiceGetEmptyClassroomsResult() *ClassRoomServiceGetEmptyClassroomsResult {
	return &ClassRoomServiceGetEmptyClassroomsResult{}
}

func (p *ClassRoomServiceGetEmptyClassroomsResult) InitDefault() {
}

var ClassRoomServiceGetEmptyClassroomsResult_Success_DEFAULT *EmptyClassroomResponse

func (p *ClassRoomServiceGetEmptyClassroomsResult) GetSuccess() (v *EmptyClassroomResponse) {
	if !p.IsSetSuccess() {
		return ClassRoomServiceGetEmptyClassroomsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClassRoomServiceGetEmptyClassroomsResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyClassroomResponse)
}

func (p *ClassRoomServiceGetEmptyClassroomsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClassRoomServiceGetEmptyClassroomsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassRoomServiceGetEmptyClassroomsResult(%+v)", *p)
}

var fieldIDToName_ClassRoomServiceGetEmptyClassroomsResult = map[int16]string{
	0: "success",
}

type ClassRoomServiceGetExamRoomInfoArgs struct {
	Request *ExamRoomInfoRequest `thrift:"request,1" frugal:"1,default,ExamRoomInfoRequest" json:"request"`
}

func NewClassRoomServiceGetExamRoomInfoArgs() *ClassRoomServiceGetExamRoomInfoArgs {
	return &ClassRoomServiceGetExamRoomInfoArgs{}
}

func (p *ClassRoomServiceGetExamRoomInfoArgs) InitDefault() {
}

var ClassRoomServiceGetExamRoomInfoArgs_Request_DEFAULT *ExamRoomInfoRequest

func (p *ClassRoomServiceGetExamRoomInfoArgs) GetRequest() (v *ExamRoomInfoRequest) {
	if !p.IsSetRequest() {
		return ClassRoomServiceGetExamRoomInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ClassRoomServiceGetExamRoomInfoArgs) SetRequest(val *ExamRoomInfoRequest) {
	p.Request = val
}

func (p *ClassRoomServiceGetExamRoomInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClassRoomServiceGetExamRoomInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassRoomServiceGetExamRoomInfoArgs(%+v)", *p)
}

var fieldIDToName_ClassRoomServiceGetExamRoomInfoArgs = map[int16]string{
	1: "request",
}

type ClassRoomServiceGetExamRoomInfoResult struct {
	Success *ExamRoomInfoResponse `thrift:"success,0,optional" frugal:"0,optional,ExamRoomInfoResponse" json:"success,omitempty"`
}

func NewClassRoomServiceGetExamRoomInfoResult() *ClassRoomServiceGetExamRoomInfoResult {
	return &ClassRoomServiceGetExamRoomInfoResult{}
}

func (p *ClassRoomServiceGetExamRoomInfoResult) InitDefault() {
}

var ClassRoomServiceGetExamRoomInfoResult_Success_DEFAULT *ExamRoomInfoResponse

func (p *ClassRoomServiceGetExamRoomInfoResult) GetSuccess() (v *ExamRoomInfoResponse) {
	if !p.IsSetSuccess() {
		return ClassRoomServiceGetExamRoomInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClassRoomServiceGetExamRoomInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExamRoomInfoResponse)
}

func (p *ClassRoomServiceGetExamRoomInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClassRoomServiceGetExamRoomInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassRoomServiceGetExamRoomInfoResult(%+v)", *p)
}

var fieldIDToName_ClassRoomServiceGetExamRoomInfoResult = map[int16]string{
	0: "success",
}

type UserService interface {
	GetLoginData(ctx context.Context, request *GetLoginDataRequest) (r *GetLoginDataResponse, err error)

	GetGetLoginDataForYJSY(ctx context.Context, request *GetLoginDataForYJSYRequest) (r *GetLoginDataForYJSYResponse, err error)

	ValidateCode(ctx context.Context, request *ValidateCodeRequest) (r *ValidateCodeResponse, err error)

	ValidateCodeForAndroid(ctx context.Context, request *ValidateCodeForAndroidRequest) (r *ValidateCodeForAndroidResponse, err error)

	GetToken(ctx context.Context, request *GetAccessTokenRequest) (r *GetAccessTokenResponse, err error)

	RefreshToken(ctx context.Context, request *RefreshTokenRequest) (r *RefreshTokenResponse, err error)

	TestAuth(ctx context.Context, request *TestAuthRequest) (r *TestAuthResponse, err error)

	GetUserInfo(ctx context.Context, request *GetUserInfoRequest) (r *GetUserInfoResponse, err error)
}

type UserServiceGetLoginDataArgs struct {
	Request *GetLoginDataRequest `thrift:"request,1" frugal:"1,default,GetLoginDataRequest" json:"request"`
}

func NewUserServiceGetLoginDataArgs() *UserServiceGetLoginDataArgs {
	return &UserServiceGetLoginDataArgs{}
}

func (p *UserServiceGetLoginDataArgs) InitDefault() {
}

var UserServiceGetLoginDataArgs_Request_DEFAULT *GetLoginDataRequest

func (p *UserServiceGetLoginDataArgs) GetRequest() (v *GetLoginDataRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetLoginDataArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetLoginDataArgs) SetRequest(val *GetLoginDataRequest) {
	p.Request = val
}

func (p *UserServiceGetLoginDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetLoginDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetLoginDataArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetLoginDataArgs = map[int16]string{
	1: "request",
}

type UserServiceGetLoginDataResult struct {
	Success *GetLoginDataResponse `thrift:"success,0,optional" frugal:"0,optional,GetLoginDataResponse" json:"success,omitempty"`
}

func NewUserServiceGetLoginDataResult() *UserServiceGetLoginDataResult {
	return &UserServiceGetLoginDataResult{}
}

func (p *UserServiceGetLoginDataResult) InitDefault() {
}

var UserServiceGetLoginDataResult_Success_DEFAULT *GetLoginDataResponse

func (p *UserServiceGetLoginDataResult) GetSuccess() (v *GetLoginDataResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetLoginDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetLoginDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLoginDataResponse)
}

func (p *UserServiceGetLoginDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetLoginDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetLoginDataResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetLoginDataResult = map[int16]string{
	0: "success",
}

type UserServiceGetGetLoginDataForYJSYArgs struct {
	Request *GetLoginDataForYJSYRequest `thrift:"request,1" frugal:"1,default,GetLoginDataForYJSYRequest" json:"request"`
}

func NewUserServiceGetGetLoginDataForYJSYArgs() *UserServiceGetGetLoginDataForYJSYArgs {
	return &UserServiceGetGetLoginDataForYJSYArgs{}
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) InitDefault() {
}

var UserServiceGetGetLoginDataForYJSYArgs_Request_DEFAULT *GetLoginDataForYJSYRequest

func (p *UserServiceGetGetLoginDataForYJSYArgs) GetRequest() (v *GetLoginDataForYJSYRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetGetLoginDataForYJSYArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetGetLoginDataForYJSYArgs) SetRequest(val *GetLoginDataForYJSYRequest) {
	p.Request = val
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetGetLoginDataForYJSYArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetGetLoginDataForYJSYArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetGetLoginDataForYJSYArgs = map[int16]string{
	1: "request",
}

type UserServiceGetGetLoginDataForYJSYResult struct {
	Success *GetLoginDataForYJSYResponse `thrift:"success,0,optional" frugal:"0,optional,GetLoginDataForYJSYResponse" json:"success,omitempty"`
}

func NewUserServiceGetGetLoginDataForYJSYResult() *UserServiceGetGetLoginDataForYJSYResult {
	return &UserServiceGetGetLoginDataForYJSYResult{}
}

func (p *UserServiceGetGetLoginDataForYJSYResult) InitDefault() {
}

var UserServiceGetGetLoginDataForYJSYResult_Success_DEFAULT *GetLoginDataForYJSYResponse

func (p *UserServiceGetGetLoginDataForYJSYResult) GetSuccess() (v *GetLoginDataForYJSYResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetGetLoginDataForYJSYResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetGetLoginDataForYJSYResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLoginDataForYJSYResponse)
}

func (p *UserServiceGetGetLoginDataForYJSYResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetGetLoginDataForYJSYResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetGetLoginDataForYJSYResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetGetLoginDataForYJSYResult = map[int16]string{
	0: "success",
}

type UserServiceValidateCodeArgs struct {
	Request *ValidateCodeRequest `thrift:"request,1" frugal:"1,default,ValidateCodeRequest" json:"request"`
}

func NewUserServiceValidateCodeArgs() *UserServiceValidateCodeArgs {
	return &UserServiceValidateCodeArgs{}
}

func (p *UserServiceValidateCodeArgs) InitDefault() {
}

var UserServiceValidateCodeArgs_Request_DEFAULT *ValidateCodeRequest

func (p *UserServiceValidateCodeArgs) GetRequest() (v *ValidateCodeRequest) {
	if !p.IsSetRequest() {
		return UserServiceValidateCodeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceValidateCodeArgs) SetRequest(val *ValidateCodeRequest) {
	p.Request = val
}

func (p *UserServiceValidateCodeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceValidateCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceValidateCodeArgs(%+v)", *p)
}

var fieldIDToName_UserServiceValidateCodeArgs = map[int16]string{
	1: "request",
}

type UserServiceValidateCodeResult struct {
	Success *ValidateCodeResponse `thrift:"success,0,optional" frugal:"0,optional,ValidateCodeResponse" json:"success,omitempty"`
}

func NewUserServiceValidateCodeResult() *UserServiceValidateCodeResult {
	return &UserServiceValidateCodeResult{}
}

func (p *UserServiceValidateCodeResult) InitDefault() {
}

var UserServiceValidateCodeResult_Success_DEFAULT *ValidateCodeResponse

func (p *UserServiceValidateCodeResult) GetSuccess() (v *ValidateCodeResponse) {
	if !p.IsSetSuccess() {
		return UserServiceValidateCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceValidateCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*ValidateCodeResponse)
}

func (p *UserServiceValidateCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceValidateCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceValidateCodeResult(%+v)", *p)
}

var fieldIDToName_UserServiceValidateCodeResult = map[int16]string{
	0: "success",
}

type UserServiceValidateCodeForAndroidArgs struct {
	Request *ValidateCodeForAndroidRequest `thrift:"request,1" frugal:"1,default,ValidateCodeForAndroidRequest" json:"request"`
}

func NewUserServiceValidateCodeForAndroidArgs() *UserServiceValidateCodeForAndroidArgs {
	return &UserServiceValidateCodeForAndroidArgs{}
}

func (p *UserServiceValidateCodeForAndroidArgs) InitDefault() {
}

var UserServiceValidateCodeForAndroidArgs_Request_DEFAULT *ValidateCodeForAndroidRequest

func (p *UserServiceValidateCodeForAndroidArgs) GetRequest() (v *ValidateCodeForAndroidRequest) {
	if !p.IsSetRequest() {
		return UserServiceValidateCodeForAndroidArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceValidateCodeForAndroidArgs) SetRequest(val *ValidateCodeForAndroidRequest) {
	p.Request = val
}

func (p *UserServiceValidateCodeForAndroidArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceValidateCodeForAndroidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceValidateCodeForAndroidArgs(%+v)", *p)
}

var fieldIDToName_UserServiceValidateCodeForAndroidArgs = map[int16]string{
	1: "request",
}

type UserServiceValidateCodeForAndroidResult struct {
	Success *ValidateCodeForAndroidResponse `thrift:"success,0,optional" frugal:"0,optional,ValidateCodeForAndroidResponse" json:"success,omitempty"`
}

func NewUserServiceValidateCodeForAndroidResult() *UserServiceValidateCodeForAndroidResult {
	return &UserServiceValidateCodeForAndroidResult{}
}

func (p *UserServiceValidateCodeForAndroidResult) InitDefault() {
}

var UserServiceValidateCodeForAndroidResult_Success_DEFAULT *ValidateCodeForAndroidResponse

func (p *UserServiceValidateCodeForAndroidResult) GetSuccess() (v *ValidateCodeForAndroidResponse) {
	if !p.IsSetSuccess() {
		return UserServiceValidateCodeForAndroidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceValidateCodeForAndroidResult) SetSuccess(x interface{}) {
	p.Success = x.(*ValidateCodeForAndroidResponse)
}

func (p *UserServiceValidateCodeForAndroidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceValidateCodeForAndroidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceValidateCodeForAndroidResult(%+v)", *p)
}

var fieldIDToName_UserServiceValidateCodeForAndroidResult = map[int16]string{
	0: "success",
}

type UserServiceGetTokenArgs struct {
	Request *GetAccessTokenRequest `thrift:"request,1" frugal:"1,default,GetAccessTokenRequest" json:"request"`
}

func NewUserServiceGetTokenArgs() *UserServiceGetTokenArgs {
	return &UserServiceGetTokenArgs{}
}

func (p *UserServiceGetTokenArgs) InitDefault() {
}

var UserServiceGetTokenArgs_Request_DEFAULT *GetAccessTokenRequest

func (p *UserServiceGetTokenArgs) GetRequest() (v *GetAccessTokenRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetTokenArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetTokenArgs) SetRequest(val *GetAccessTokenRequest) {
	p.Request = val
}

func (p *UserServiceGetTokenArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetTokenArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetTokenArgs = map[int16]string{
	1: "request",
}

type UserServiceGetTokenResult struct {
	Success *GetAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,GetAccessTokenResponse" json:"success,omitempty"`
}

func NewUserServiceGetTokenResult() *UserServiceGetTokenResult {
	return &UserServiceGetTokenResult{}
}

func (p *UserServiceGetTokenResult) InitDefault() {
}

var UserServiceGetTokenResult_Success_DEFAULT *GetAccessTokenResponse

func (p *UserServiceGetTokenResult) GetSuccess() (v *GetAccessTokenResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAccessTokenResponse)
}

func (p *UserServiceGetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetTokenResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetTokenResult = map[int16]string{
	0: "success",
}

type UserServiceRefreshTokenArgs struct {
	Request *RefreshTokenRequest `thrift:"request,1" frugal:"1,default,RefreshTokenRequest" json:"request"`
}

func NewUserServiceRefreshTokenArgs() *UserServiceRefreshTokenArgs {
	return &UserServiceRefreshTokenArgs{}
}

func (p *UserServiceRefreshTokenArgs) InitDefault() {
}

var UserServiceRefreshTokenArgs_Request_DEFAULT *RefreshTokenRequest

func (p *UserServiceRefreshTokenArgs) GetRequest() (v *RefreshTokenRequest) {
	if !p.IsSetRequest() {
		return UserServiceRefreshTokenArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceRefreshTokenArgs) SetRequest(val *RefreshTokenRequest) {
	p.Request = val
}

func (p *UserServiceRefreshTokenArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceRefreshTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRefreshTokenArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRefreshTokenArgs = map[int16]string{
	1: "request",
}

type UserServiceRefreshTokenResult struct {
	Success *RefreshTokenResponse `thrift:"success,0,optional" frugal:"0,optional,RefreshTokenResponse" json:"success,omitempty"`
}

func NewUserServiceRefreshTokenResult() *UserServiceRefreshTokenResult {
	return &UserServiceRefreshTokenResult{}
}

func (p *UserServiceRefreshTokenResult) InitDefault() {
}

var UserServiceRefreshTokenResult_Success_DEFAULT *RefreshTokenResponse

func (p *UserServiceRefreshTokenResult) GetSuccess() (v *RefreshTokenResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*RefreshTokenResponse)
}

func (p *UserServiceRefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRefreshTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRefreshTokenResult(%+v)", *p)
}

var fieldIDToName_UserServiceRefreshTokenResult = map[int16]string{
	0: "success",
}

type UserServiceTestAuthArgs struct {
	Request *TestAuthRequest `thrift:"request,1" frugal:"1,default,TestAuthRequest" json:"request"`
}

func NewUserServiceTestAuthArgs() *UserServiceTestAuthArgs {
	return &UserServiceTestAuthArgs{}
}

func (p *UserServiceTestAuthArgs) InitDefault() {
}

var UserServiceTestAuthArgs_Request_DEFAULT *TestAuthRequest

func (p *UserServiceTestAuthArgs) GetRequest() (v *TestAuthRequest) {
	if !p.IsSetRequest() {
		return UserServiceTestAuthArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceTestAuthArgs) SetRequest(val *TestAuthRequest) {
	p.Request = val
}

func (p *UserServiceTestAuthArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceTestAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceTestAuthArgs(%+v)", *p)
}

var fieldIDToName_UserServiceTestAuthArgs = map[int16]string{
	1: "request",
}

type UserServiceTestAuthResult struct {
	Success *TestAuthResponse `thrift:"success,0,optional" frugal:"0,optional,TestAuthResponse" json:"success,omitempty"`
}

func NewUserServiceTestAuthResult() *UserServiceTestAuthResult {
	return &UserServiceTestAuthResult{}
}

func (p *UserServiceTestAuthResult) InitDefault() {
}

var UserServiceTestAuthResult_Success_DEFAULT *TestAuthResponse

func (p *UserServiceTestAuthResult) GetSuccess() (v *TestAuthResponse) {
	if !p.IsSetSuccess() {
		return UserServiceTestAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceTestAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*TestAuthResponse)
}

func (p *UserServiceTestAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceTestAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceTestAuthResult(%+v)", *p)
}

var fieldIDToName_UserServiceTestAuthResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Request *GetUserInfoRequest `thrift:"request,1" frugal:"1,default,GetUserInfoRequest" json:"request"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Request_DEFAULT *GetUserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetRequest() (v *GetUserInfoRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetUserInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetUserInfoArgs) SetRequest(val *GetUserInfoRequest) {
	p.Request = val
}

func (p *UserServiceGetUserInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "request",
}

type UserServiceGetUserInfoResult struct {
	Success *GetUserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *GetUserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type CourseService interface {
	GetCourseList(ctx context.Context, req *CourseListRequest) (r *CourseListResponse, err error)

	GetTermList(ctx context.Context, req *CourseTermListRequest) (r *CourseTermListResponse, err error)

	GetCalendar(ctx context.Context, req *GetCalendarTokenRequest) (r *GetCalendarTokenResponse, err error)

	SubscribeCalendar(ctx context.Context, req *SubscribeCalendarRequest) (r *SubscribeCalendarResponse, err error)

	GetLocateDate(ctx context.Context, req *GetLocateDateRequest) (r *GetLocateDateResponse, err error)
}

type CourseServiceGetCourseListArgs struct {
	Req *CourseListRequest `thrift:"req,1" frugal:"1,default,CourseListRequest" json:"req"`
}

func NewCourseServiceGetCourseListArgs() *CourseServiceGetCourseListArgs {
	return &CourseServiceGetCourseListArgs{}
}

func (p *CourseServiceGetCourseListArgs) InitDefault() {
}

var CourseServiceGetCourseListArgs_Req_DEFAULT *CourseListRequest

func (p *CourseServiceGetCourseListArgs) GetReq() (v *CourseListRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetCourseListArgs) SetReq(val *CourseListRequest) {
	p.Req = val
}

func (p *CourseServiceGetCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCourseListArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCourseListArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetCourseListResult struct {
	Success *CourseListResponse `thrift:"success,0,optional" frugal:"0,optional,CourseListResponse" json:"success,omitempty"`
}

func NewCourseServiceGetCourseListResult() *CourseServiceGetCourseListResult {
	return &CourseServiceGetCourseListResult{}
}

func (p *CourseServiceGetCourseListResult) InitDefault() {
}

var CourseServiceGetCourseListResult_Success_DEFAULT *CourseListResponse

func (p *CourseServiceGetCourseListResult) GetSuccess() (v *CourseListResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CourseListResponse)
}

func (p *CourseServiceGetCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCourseListResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCourseListResult = map[int16]string{
	0: "success",
}

type CourseServiceGetTermListArgs struct {
	Req *CourseTermListRequest `thrift:"req,1" frugal:"1,default,CourseTermListRequest" json:"req"`
}

func NewCourseServiceGetTermListArgs() *CourseServiceGetTermListArgs {
	return &CourseServiceGetTermListArgs{}
}

func (p *CourseServiceGetTermListArgs) InitDefault() {
}

var CourseServiceGetTermListArgs_Req_DEFAULT *CourseTermListRequest

func (p *CourseServiceGetTermListArgs) GetReq() (v *CourseTermListRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetTermListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetTermListArgs) SetReq(val *CourseTermListRequest) {
	p.Req = val
}

func (p *CourseServiceGetTermListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetTermListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetTermListArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetTermListArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetTermListResult struct {
	Success *CourseTermListResponse `thrift:"success,0,optional" frugal:"0,optional,CourseTermListResponse" json:"success,omitempty"`
}

func NewCourseServiceGetTermListResult() *CourseServiceGetTermListResult {
	return &CourseServiceGetTermListResult{}
}

func (p *CourseServiceGetTermListResult) InitDefault() {
}

var CourseServiceGetTermListResult_Success_DEFAULT *CourseTermListResponse

func (p *CourseServiceGetTermListResult) GetSuccess() (v *CourseTermListResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetTermListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetTermListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CourseTermListResponse)
}

func (p *CourseServiceGetTermListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetTermListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetTermListResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetTermListResult = map[int16]string{
	0: "success",
}

type CourseServiceGetCalendarArgs struct {
	Req *GetCalendarTokenRequest `thrift:"req,1" frugal:"1,default,GetCalendarTokenRequest" json:"req"`
}

func NewCourseServiceGetCalendarArgs() *CourseServiceGetCalendarArgs {
	return &CourseServiceGetCalendarArgs{}
}

func (p *CourseServiceGetCalendarArgs) InitDefault() {
}

var CourseServiceGetCalendarArgs_Req_DEFAULT *GetCalendarTokenRequest

func (p *CourseServiceGetCalendarArgs) GetReq() (v *GetCalendarTokenRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetCalendarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetCalendarArgs) SetReq(val *GetCalendarTokenRequest) {
	p.Req = val
}

func (p *CourseServiceGetCalendarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetCalendarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCalendarArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCalendarArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetCalendarResult struct {
	Success *GetCalendarTokenResponse `thrift:"success,0,optional" frugal:"0,optional,GetCalendarTokenResponse" json:"success,omitempty"`
}

func NewCourseServiceGetCalendarResult() *CourseServiceGetCalendarResult {
	return &CourseServiceGetCalendarResult{}
}

func (p *CourseServiceGetCalendarResult) InitDefault() {
}

var CourseServiceGetCalendarResult_Success_DEFAULT *GetCalendarTokenResponse

func (p *CourseServiceGetCalendarResult) GetSuccess() (v *GetCalendarTokenResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetCalendarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetCalendarResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCalendarTokenResponse)
}

func (p *CourseServiceGetCalendarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetCalendarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetCalendarResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetCalendarResult = map[int16]string{
	0: "success",
}

type CourseServiceSubscribeCalendarArgs struct {
	Req *SubscribeCalendarRequest `thrift:"req,1" frugal:"1,default,SubscribeCalendarRequest" json:"req"`
}

func NewCourseServiceSubscribeCalendarArgs() *CourseServiceSubscribeCalendarArgs {
	return &CourseServiceSubscribeCalendarArgs{}
}

func (p *CourseServiceSubscribeCalendarArgs) InitDefault() {
}

var CourseServiceSubscribeCalendarArgs_Req_DEFAULT *SubscribeCalendarRequest

func (p *CourseServiceSubscribeCalendarArgs) GetReq() (v *SubscribeCalendarRequest) {
	if !p.IsSetReq() {
		return CourseServiceSubscribeCalendarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceSubscribeCalendarArgs) SetReq(val *SubscribeCalendarRequest) {
	p.Req = val
}

func (p *CourseServiceSubscribeCalendarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceSubscribeCalendarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceSubscribeCalendarArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceSubscribeCalendarArgs = map[int16]string{
	1: "req",
}

type CourseServiceSubscribeCalendarResult struct {
	Success *SubscribeCalendarResponse `thrift:"success,0,optional" frugal:"0,optional,SubscribeCalendarResponse" json:"success,omitempty"`
}

func NewCourseServiceSubscribeCalendarResult() *CourseServiceSubscribeCalendarResult {
	return &CourseServiceSubscribeCalendarResult{}
}

func (p *CourseServiceSubscribeCalendarResult) InitDefault() {
}

var CourseServiceSubscribeCalendarResult_Success_DEFAULT *SubscribeCalendarResponse

func (p *CourseServiceSubscribeCalendarResult) GetSuccess() (v *SubscribeCalendarResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceSubscribeCalendarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceSubscribeCalendarResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubscribeCalendarResponse)
}

func (p *CourseServiceSubscribeCalendarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceSubscribeCalendarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceSubscribeCalendarResult(%+v)", *p)
}

var fieldIDToName_CourseServiceSubscribeCalendarResult = map[int16]string{
	0: "success",
}

type CourseServiceGetLocateDateArgs struct {
	Req *GetLocateDateRequest `thrift:"req,1" frugal:"1,default,GetLocateDateRequest" json:"req"`
}

func NewCourseServiceGetLocateDateArgs() *CourseServiceGetLocateDateArgs {
	return &CourseServiceGetLocateDateArgs{}
}

func (p *CourseServiceGetLocateDateArgs) InitDefault() {
}

var CourseServiceGetLocateDateArgs_Req_DEFAULT *GetLocateDateRequest

func (p *CourseServiceGetLocateDateArgs) GetReq() (v *GetLocateDateRequest) {
	if !p.IsSetReq() {
		return CourseServiceGetLocateDateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceGetLocateDateArgs) SetReq(val *GetLocateDateRequest) {
	p.Req = val
}

func (p *CourseServiceGetLocateDateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceGetLocateDateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetLocateDateArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceGetLocateDateArgs = map[int16]string{
	1: "req",
}

type CourseServiceGetLocateDateResult struct {
	Success *GetLocateDateResponse `thrift:"success,0,optional" frugal:"0,optional,GetLocateDateResponse" json:"success,omitempty"`
}

func NewCourseServiceGetLocateDateResult() *CourseServiceGetLocateDateResult {
	return &CourseServiceGetLocateDateResult{}
}

func (p *CourseServiceGetLocateDateResult) InitDefault() {
}

var CourseServiceGetLocateDateResult_Success_DEFAULT *GetLocateDateResponse

func (p *CourseServiceGetLocateDateResult) GetSuccess() (v *GetLocateDateResponse) {
	if !p.IsSetSuccess() {
		return CourseServiceGetLocateDateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceGetLocateDateResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLocateDateResponse)
}

func (p *CourseServiceGetLocateDateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceGetLocateDateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceGetLocateDateResult(%+v)", *p)
}

var fieldIDToName_CourseServiceGetLocateDateResult = map[int16]string{
	0: "success",
}

type LaunchScreenService interface {
	CreateImage(ctx context.Context, req *CreateImageRequest) (r *CreateImageResponse, err error)

	GetImage(ctx context.Context, req *GetImageRequest) (r *GetImageResponse, err error)

	ChangeImageProperty(ctx context.Context, req *ChangeImagePropertyRequest) (r *ChangeImagePropertyResponse, err error)

	ChangeImage(ctx context.Context, req *ChangeImageRequest) (r *ChangeImageResponse, err error)

	DeleteImage(ctx context.Context, req *DeleteImageRequest) (r *DeleteImageResponse, err error)

	MobileGetImage(ctx context.Context, req *MobileGetImageRequest) (r *MobileGetImageResponse, err error)

	AddImagePointTime(ctx context.Context, req *AddImagePointTimeRequest) (r *AddImagePointTimeResponse, err error)
}

type LaunchScreenServiceCreateImageArgs struct {
	Req *CreateImageRequest `thrift:"req,1" frugal:"1,default,CreateImageRequest" json:"req"`
}

func NewLaunchScreenServiceCreateImageArgs() *LaunchScreenServiceCreateImageArgs {
	return &LaunchScreenServiceCreateImageArgs{}
}

func (p *LaunchScreenServiceCreateImageArgs) InitDefault() {
}

var LaunchScreenServiceCreateImageArgs_Req_DEFAULT *CreateImageRequest

func (p *LaunchScreenServiceCreateImageArgs) GetReq() (v *CreateImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceCreateImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceCreateImageArgs) SetReq(val *CreateImageRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceCreateImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceCreateImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceCreateImageArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceCreateImageArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceCreateImageResult struct {
	Success *CreateImageResponse `thrift:"success,0,optional" frugal:"0,optional,CreateImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceCreateImageResult() *LaunchScreenServiceCreateImageResult {
	return &LaunchScreenServiceCreateImageResult{}
}

func (p *LaunchScreenServiceCreateImageResult) InitDefault() {
}

var LaunchScreenServiceCreateImageResult_Success_DEFAULT *CreateImageResponse

func (p *LaunchScreenServiceCreateImageResult) GetSuccess() (v *CreateImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceCreateImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceCreateImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateImageResponse)
}

func (p *LaunchScreenServiceCreateImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceCreateImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceCreateImageResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceCreateImageResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceGetImageArgs struct {
	Req *GetImageRequest `thrift:"req,1" frugal:"1,default,GetImageRequest" json:"req"`
}

func NewLaunchScreenServiceGetImageArgs() *LaunchScreenServiceGetImageArgs {
	return &LaunchScreenServiceGetImageArgs{}
}

func (p *LaunchScreenServiceGetImageArgs) InitDefault() {
}

var LaunchScreenServiceGetImageArgs_Req_DEFAULT *GetImageRequest

func (p *LaunchScreenServiceGetImageArgs) GetReq() (v *GetImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceGetImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceGetImageArgs) SetReq(val *GetImageRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceGetImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceGetImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceGetImageArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceGetImageArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceGetImageResult struct {
	Success *GetImageResponse `thrift:"success,0,optional" frugal:"0,optional,GetImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceGetImageResult() *LaunchScreenServiceGetImageResult {
	return &LaunchScreenServiceGetImageResult{}
}

func (p *LaunchScreenServiceGetImageResult) InitDefault() {
}

var LaunchScreenServiceGetImageResult_Success_DEFAULT *GetImageResponse

func (p *LaunchScreenServiceGetImageResult) GetSuccess() (v *GetImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceGetImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceGetImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetImageResponse)
}

func (p *LaunchScreenServiceGetImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceGetImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceGetImageResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceGetImageResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceChangeImagePropertyArgs struct {
	Req *ChangeImagePropertyRequest `thrift:"req,1" frugal:"1,default,ChangeImagePropertyRequest" json:"req"`
}

func NewLaunchScreenServiceChangeImagePropertyArgs() *LaunchScreenServiceChangeImagePropertyArgs {
	return &LaunchScreenServiceChangeImagePropertyArgs{}
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) InitDefault() {
}

var LaunchScreenServiceChangeImagePropertyArgs_Req_DEFAULT *ChangeImagePropertyRequest

func (p *LaunchScreenServiceChangeImagePropertyArgs) GetReq() (v *ChangeImagePropertyRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceChangeImagePropertyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceChangeImagePropertyArgs) SetReq(val *ChangeImagePropertyRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceChangeImagePropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImagePropertyArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceChangeImagePropertyArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceChangeImagePropertyResult struct {
	Success *ChangeImagePropertyResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeImagePropertyResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceChangeImagePropertyResult() *LaunchScreenServiceChangeImagePropertyResult {
	return &LaunchScreenServiceChangeImagePropertyResult{}
}

func (p *LaunchScreenServiceChangeImagePropertyResult) InitDefault() {
}

var LaunchScreenServiceChangeImagePropertyResult_Success_DEFAULT *ChangeImagePropertyResponse

func (p *LaunchScreenServiceChangeImagePropertyResult) GetSuccess() (v *ChangeImagePropertyResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceChangeImagePropertyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceChangeImagePropertyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeImagePropertyResponse)
}

func (p *LaunchScreenServiceChangeImagePropertyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceChangeImagePropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImagePropertyResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceChangeImagePropertyResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceChangeImageArgs struct {
	Req *ChangeImageRequest `thrift:"req,1" frugal:"1,default,ChangeImageRequest" json:"req"`
}

func NewLaunchScreenServiceChangeImageArgs() *LaunchScreenServiceChangeImageArgs {
	return &LaunchScreenServiceChangeImageArgs{}
}

func (p *LaunchScreenServiceChangeImageArgs) InitDefault() {
}

var LaunchScreenServiceChangeImageArgs_Req_DEFAULT *ChangeImageRequest

func (p *LaunchScreenServiceChangeImageArgs) GetReq() (v *ChangeImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceChangeImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceChangeImageArgs) SetReq(val *ChangeImageRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceChangeImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceChangeImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImageArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceChangeImageArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceChangeImageResult struct {
	Success *ChangeImageResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceChangeImageResult() *LaunchScreenServiceChangeImageResult {
	return &LaunchScreenServiceChangeImageResult{}
}

func (p *LaunchScreenServiceChangeImageResult) InitDefault() {
}

var LaunchScreenServiceChangeImageResult_Success_DEFAULT *ChangeImageResponse

func (p *LaunchScreenServiceChangeImageResult) GetSuccess() (v *ChangeImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceChangeImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceChangeImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeImageResponse)
}

func (p *LaunchScreenServiceChangeImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceChangeImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceChangeImageResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceChangeImageResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceDeleteImageArgs struct {
	Req *DeleteImageRequest `thrift:"req,1" frugal:"1,default,DeleteImageRequest" json:"req"`
}

func NewLaunchScreenServiceDeleteImageArgs() *LaunchScreenServiceDeleteImageArgs {
	return &LaunchScreenServiceDeleteImageArgs{}
}

func (p *LaunchScreenServiceDeleteImageArgs) InitDefault() {
}

var LaunchScreenServiceDeleteImageArgs_Req_DEFAULT *DeleteImageRequest

func (p *LaunchScreenServiceDeleteImageArgs) GetReq() (v *DeleteImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceDeleteImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceDeleteImageArgs) SetReq(val *DeleteImageRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceDeleteImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceDeleteImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceDeleteImageArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceDeleteImageArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceDeleteImageResult struct {
	Success *DeleteImageResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceDeleteImageResult() *LaunchScreenServiceDeleteImageResult {
	return &LaunchScreenServiceDeleteImageResult{}
}

func (p *LaunchScreenServiceDeleteImageResult) InitDefault() {
}

var LaunchScreenServiceDeleteImageResult_Success_DEFAULT *DeleteImageResponse

func (p *LaunchScreenServiceDeleteImageResult) GetSuccess() (v *DeleteImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceDeleteImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceDeleteImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteImageResponse)
}

func (p *LaunchScreenServiceDeleteImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceDeleteImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceDeleteImageResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceDeleteImageResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceMobileGetImageArgs struct {
	Req *MobileGetImageRequest `thrift:"req,1" frugal:"1,default,MobileGetImageRequest" json:"req"`
}

func NewLaunchScreenServiceMobileGetImageArgs() *LaunchScreenServiceMobileGetImageArgs {
	return &LaunchScreenServiceMobileGetImageArgs{}
}

func (p *LaunchScreenServiceMobileGetImageArgs) InitDefault() {
}

var LaunchScreenServiceMobileGetImageArgs_Req_DEFAULT *MobileGetImageRequest

func (p *LaunchScreenServiceMobileGetImageArgs) GetReq() (v *MobileGetImageRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceMobileGetImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceMobileGetImageArgs) SetReq(val *MobileGetImageRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceMobileGetImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceMobileGetImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceMobileGetImageArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceMobileGetImageArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceMobileGetImageResult struct {
	Success *MobileGetImageResponse `thrift:"success,0,optional" frugal:"0,optional,MobileGetImageResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceMobileGetImageResult() *LaunchScreenServiceMobileGetImageResult {
	return &LaunchScreenServiceMobileGetImageResult{}
}

func (p *LaunchScreenServiceMobileGetImageResult) InitDefault() {
}

var LaunchScreenServiceMobileGetImageResult_Success_DEFAULT *MobileGetImageResponse

func (p *LaunchScreenServiceMobileGetImageResult) GetSuccess() (v *MobileGetImageResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceMobileGetImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceMobileGetImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MobileGetImageResponse)
}

func (p *LaunchScreenServiceMobileGetImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceMobileGetImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceMobileGetImageResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceMobileGetImageResult = map[int16]string{
	0: "success",
}

type LaunchScreenServiceAddImagePointTimeArgs struct {
	Req *AddImagePointTimeRequest `thrift:"req,1" frugal:"1,default,AddImagePointTimeRequest" json:"req"`
}

func NewLaunchScreenServiceAddImagePointTimeArgs() *LaunchScreenServiceAddImagePointTimeArgs {
	return &LaunchScreenServiceAddImagePointTimeArgs{}
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) InitDefault() {
}

var LaunchScreenServiceAddImagePointTimeArgs_Req_DEFAULT *AddImagePointTimeRequest

func (p *LaunchScreenServiceAddImagePointTimeArgs) GetReq() (v *AddImagePointTimeRequest) {
	if !p.IsSetReq() {
		return LaunchScreenServiceAddImagePointTimeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaunchScreenServiceAddImagePointTimeArgs) SetReq(val *AddImagePointTimeRequest) {
	p.Req = val
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaunchScreenServiceAddImagePointTimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceAddImagePointTimeArgs(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceAddImagePointTimeArgs = map[int16]string{
	1: "req",
}

type LaunchScreenServiceAddImagePointTimeResult struct {
	Success *AddImagePointTimeResponse `thrift:"success,0,optional" frugal:"0,optional,AddImagePointTimeResponse" json:"success,omitempty"`
}

func NewLaunchScreenServiceAddImagePointTimeResult() *LaunchScreenServiceAddImagePointTimeResult {
	return &LaunchScreenServiceAddImagePointTimeResult{}
}

func (p *LaunchScreenServiceAddImagePointTimeResult) InitDefault() {
}

var LaunchScreenServiceAddImagePointTimeResult_Success_DEFAULT *AddImagePointTimeResponse

func (p *LaunchScreenServiceAddImagePointTimeResult) GetSuccess() (v *AddImagePointTimeResponse) {
	if !p.IsSetSuccess() {
		return LaunchScreenServiceAddImagePointTimeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LaunchScreenServiceAddImagePointTimeResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddImagePointTimeResponse)
}

func (p *LaunchScreenServiceAddImagePointTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaunchScreenServiceAddImagePointTimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaunchScreenServiceAddImagePointTimeResult(%+v)", *p)
}

var fieldIDToName_LaunchScreenServiceAddImagePointTimeResult = map[int16]string{
	0: "success",
}

type PaperService interface {
	ListDirFiles(ctx context.Context, req *ListDirFilesRequest) (r *ListDirFilesResponse, err error)

	GetDownloadUrl(ctx context.Context, req *GetDownloadUrlRequest) (r *GetDownloadUrlResponse, err error)

	ListDirFilesForAndroid(ctx context.Context, req *ListDirFilesForAndroidRequest) (r *ListDirFilesForAndroidResponse, err error)

	GetDownloadUrlForAndroid(ctx context.Context, req *GetDownloadUrlForAndroidRequest) (r *GetDownloadUrlForAndroidResponse, err error)
}

type PaperServiceListDirFilesArgs struct {
	Req *ListDirFilesRequest `thrift:"req,1" frugal:"1,default,ListDirFilesRequest" json:"req"`
}

func NewPaperServiceListDirFilesArgs() *PaperServiceListDirFilesArgs {
	return &PaperServiceListDirFilesArgs{}
}

func (p *PaperServiceListDirFilesArgs) InitDefault() {
}

var PaperServiceListDirFilesArgs_Req_DEFAULT *ListDirFilesRequest

func (p *PaperServiceListDirFilesArgs) GetReq() (v *ListDirFilesRequest) {
	if !p.IsSetReq() {
		return PaperServiceListDirFilesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceListDirFilesArgs) SetReq(val *ListDirFilesRequest) {
	p.Req = val
}

func (p *PaperServiceListDirFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceListDirFilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesArgs = map[int16]string{
	1: "req",
}

type PaperServiceListDirFilesResult struct {
	Success *ListDirFilesResponse `thrift:"success,0,optional" frugal:"0,optional,ListDirFilesResponse" json:"success,omitempty"`
}

func NewPaperServiceListDirFilesResult() *PaperServiceListDirFilesResult {
	return &PaperServiceListDirFilesResult{}
}

func (p *PaperServiceListDirFilesResult) InitDefault() {
}

var PaperServiceListDirFilesResult_Success_DEFAULT *ListDirFilesResponse

func (p *PaperServiceListDirFilesResult) GetSuccess() (v *ListDirFilesResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceListDirFilesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceListDirFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDirFilesResponse)
}

func (p *PaperServiceListDirFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceListDirFilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesResult(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesResult = map[int16]string{
	0: "success",
}

type PaperServiceGetDownloadUrlArgs struct {
	Req *GetDownloadUrlRequest `thrift:"req,1" frugal:"1,default,GetDownloadUrlRequest" json:"req"`
}

func NewPaperServiceGetDownloadUrlArgs() *PaperServiceGetDownloadUrlArgs {
	return &PaperServiceGetDownloadUrlArgs{}
}

func (p *PaperServiceGetDownloadUrlArgs) InitDefault() {
}

var PaperServiceGetDownloadUrlArgs_Req_DEFAULT *GetDownloadUrlRequest

func (p *PaperServiceGetDownloadUrlArgs) GetReq() (v *GetDownloadUrlRequest) {
	if !p.IsSetReq() {
		return PaperServiceGetDownloadUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceGetDownloadUrlArgs) SetReq(val *GetDownloadUrlRequest) {
	p.Req = val
}

func (p *PaperServiceGetDownloadUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceGetDownloadUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlArgs = map[int16]string{
	1: "req",
}

type PaperServiceGetDownloadUrlResult struct {
	Success *GetDownloadUrlResponse `thrift:"success,0,optional" frugal:"0,optional,GetDownloadUrlResponse" json:"success,omitempty"`
}

func NewPaperServiceGetDownloadUrlResult() *PaperServiceGetDownloadUrlResult {
	return &PaperServiceGetDownloadUrlResult{}
}

func (p *PaperServiceGetDownloadUrlResult) InitDefault() {
}

var PaperServiceGetDownloadUrlResult_Success_DEFAULT *GetDownloadUrlResponse

func (p *PaperServiceGetDownloadUrlResult) GetSuccess() (v *GetDownloadUrlResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceGetDownloadUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceGetDownloadUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDownloadUrlResponse)
}

func (p *PaperServiceGetDownloadUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceGetDownloadUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlResult(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlResult = map[int16]string{
	0: "success",
}

type PaperServiceListDirFilesForAndroidArgs struct {
	Req *ListDirFilesForAndroidRequest `thrift:"req,1" frugal:"1,default,ListDirFilesForAndroidRequest" json:"req"`
}

func NewPaperServiceListDirFilesForAndroidArgs() *PaperServiceListDirFilesForAndroidArgs {
	return &PaperServiceListDirFilesForAndroidArgs{}
}

func (p *PaperServiceListDirFilesForAndroidArgs) InitDefault() {
}

var PaperServiceListDirFilesForAndroidArgs_Req_DEFAULT *ListDirFilesForAndroidRequest

func (p *PaperServiceListDirFilesForAndroidArgs) GetReq() (v *ListDirFilesForAndroidRequest) {
	if !p.IsSetReq() {
		return PaperServiceListDirFilesForAndroidArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceListDirFilesForAndroidArgs) SetReq(val *ListDirFilesForAndroidRequest) {
	p.Req = val
}

func (p *PaperServiceListDirFilesForAndroidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceListDirFilesForAndroidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesForAndroidArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesForAndroidArgs = map[int16]string{
	1: "req",
}

type PaperServiceListDirFilesForAndroidResult struct {
	Success *ListDirFilesForAndroidResponse `thrift:"success,0,optional" frugal:"0,optional,ListDirFilesForAndroidResponse" json:"success,omitempty"`
}

func NewPaperServiceListDirFilesForAndroidResult() *PaperServiceListDirFilesForAndroidResult {
	return &PaperServiceListDirFilesForAndroidResult{}
}

func (p *PaperServiceListDirFilesForAndroidResult) InitDefault() {
}

var PaperServiceListDirFilesForAndroidResult_Success_DEFAULT *ListDirFilesForAndroidResponse

func (p *PaperServiceListDirFilesForAndroidResult) GetSuccess() (v *ListDirFilesForAndroidResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceListDirFilesForAndroidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceListDirFilesForAndroidResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDirFilesForAndroidResponse)
}

func (p *PaperServiceListDirFilesForAndroidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceListDirFilesForAndroidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesForAndroidResult(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesForAndroidResult = map[int16]string{
	0: "success",
}

type PaperServiceGetDownloadUrlForAndroidArgs struct {
	Req *GetDownloadUrlForAndroidRequest `thrift:"req,1" frugal:"1,default,GetDownloadUrlForAndroidRequest" json:"req"`
}

func NewPaperServiceGetDownloadUrlForAndroidArgs() *PaperServiceGetDownloadUrlForAndroidArgs {
	return &PaperServiceGetDownloadUrlForAndroidArgs{}
}

func (p *PaperServiceGetDownloadUrlForAndroidArgs) InitDefault() {
}

var PaperServiceGetDownloadUrlForAndroidArgs_Req_DEFAULT *GetDownloadUrlForAndroidRequest

func (p *PaperServiceGetDownloadUrlForAndroidArgs) GetReq() (v *GetDownloadUrlForAndroidRequest) {
	if !p.IsSetReq() {
		return PaperServiceGetDownloadUrlForAndroidArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceGetDownloadUrlForAndroidArgs) SetReq(val *GetDownloadUrlForAndroidRequest) {
	p.Req = val
}

func (p *PaperServiceGetDownloadUrlForAndroidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceGetDownloadUrlForAndroidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlForAndroidArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlForAndroidArgs = map[int16]string{
	1: "req",
}

type PaperServiceGetDownloadUrlForAndroidResult struct {
	Success *GetDownloadUrlForAndroidResponse `thrift:"success,0,optional" frugal:"0,optional,GetDownloadUrlForAndroidResponse" json:"success,omitempty"`
}

func NewPaperServiceGetDownloadUrlForAndroidResult() *PaperServiceGetDownloadUrlForAndroidResult {
	return &PaperServiceGetDownloadUrlForAndroidResult{}
}

func (p *PaperServiceGetDownloadUrlForAndroidResult) InitDefault() {
}

var PaperServiceGetDownloadUrlForAndroidResult_Success_DEFAULT *GetDownloadUrlForAndroidResponse

func (p *PaperServiceGetDownloadUrlForAndroidResult) GetSuccess() (v *GetDownloadUrlForAndroidResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceGetDownloadUrlForAndroidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceGetDownloadUrlForAndroidResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDownloadUrlForAndroidResponse)
}

func (p *PaperServiceGetDownloadUrlForAndroidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceGetDownloadUrlForAndroidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlForAndroidResult(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlForAndroidResult = map[int16]string{
	0: "success",
}

type AcademicService interface {
	GetScores(ctx context.Context, req *GetScoresRequest) (r *GetScoresResponse, err error)

	GetGPA(ctx context.Context, req *GetGPARequest) (r *GetGPAResponse, err error)

	GetCredit(ctx context.Context, req *GetCreditRequest) (r *GetCreditResponse, err error)

	GetUnifiedExam(ctx context.Context, req *GetUnifiedExamRequest) (r *GetUnifiedExamResponse, err error)

	GetPlan(ctx context.Context, req *GetPlanRequest) (r *GetPlanResponse, err error)
}

type AcademicServiceGetScoresArgs struct {
	Req *GetScoresRequest `thrift:"req,1" frugal:"1,default,GetScoresRequest" json:"req"`
}

func NewAcademicServiceGetScoresArgs() *AcademicServiceGetScoresArgs {
	return &AcademicServiceGetScoresArgs{}
}

func (p *AcademicServiceGetScoresArgs) InitDefault() {
}

var AcademicServiceGetScoresArgs_Req_DEFAULT *GetScoresRequest

func (p *AcademicServiceGetScoresArgs) GetReq() (v *GetScoresRequest) {
	if !p.IsSetReq() {
		return AcademicServiceGetScoresArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AcademicServiceGetScoresArgs) SetReq(val *GetScoresRequest) {
	p.Req = val
}

func (p *AcademicServiceGetScoresArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AcademicServiceGetScoresArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetScoresArgs(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetScoresArgs = map[int16]string{
	1: "req",
}

type AcademicServiceGetScoresResult struct {
	Success *GetScoresResponse `thrift:"success,0,optional" frugal:"0,optional,GetScoresResponse" json:"success,omitempty"`
}

func NewAcademicServiceGetScoresResult() *AcademicServiceGetScoresResult {
	return &AcademicServiceGetScoresResult{}
}

func (p *AcademicServiceGetScoresResult) InitDefault() {
}

var AcademicServiceGetScoresResult_Success_DEFAULT *GetScoresResponse

func (p *AcademicServiceGetScoresResult) GetSuccess() (v *GetScoresResponse) {
	if !p.IsSetSuccess() {
		return AcademicServiceGetScoresResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AcademicServiceGetScoresResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetScoresResponse)
}

func (p *AcademicServiceGetScoresResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcademicServiceGetScoresResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetScoresResult(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetScoresResult = map[int16]string{
	0: "success",
}

type AcademicServiceGetGPAArgs struct {
	Req *GetGPARequest `thrift:"req,1" frugal:"1,default,GetGPARequest" json:"req"`
}

func NewAcademicServiceGetGPAArgs() *AcademicServiceGetGPAArgs {
	return &AcademicServiceGetGPAArgs{}
}

func (p *AcademicServiceGetGPAArgs) InitDefault() {
}

var AcademicServiceGetGPAArgs_Req_DEFAULT *GetGPARequest

func (p *AcademicServiceGetGPAArgs) GetReq() (v *GetGPARequest) {
	if !p.IsSetReq() {
		return AcademicServiceGetGPAArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AcademicServiceGetGPAArgs) SetReq(val *GetGPARequest) {
	p.Req = val
}

func (p *AcademicServiceGetGPAArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AcademicServiceGetGPAArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetGPAArgs(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetGPAArgs = map[int16]string{
	1: "req",
}

type AcademicServiceGetGPAResult struct {
	Success *GetGPAResponse `thrift:"success,0,optional" frugal:"0,optional,GetGPAResponse" json:"success,omitempty"`
}

func NewAcademicServiceGetGPAResult() *AcademicServiceGetGPAResult {
	return &AcademicServiceGetGPAResult{}
}

func (p *AcademicServiceGetGPAResult) InitDefault() {
}

var AcademicServiceGetGPAResult_Success_DEFAULT *GetGPAResponse

func (p *AcademicServiceGetGPAResult) GetSuccess() (v *GetGPAResponse) {
	if !p.IsSetSuccess() {
		return AcademicServiceGetGPAResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AcademicServiceGetGPAResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetGPAResponse)
}

func (p *AcademicServiceGetGPAResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcademicServiceGetGPAResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetGPAResult(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetGPAResult = map[int16]string{
	0: "success",
}

type AcademicServiceGetCreditArgs struct {
	Req *GetCreditRequest `thrift:"req,1" frugal:"1,default,GetCreditRequest" json:"req"`
}

func NewAcademicServiceGetCreditArgs() *AcademicServiceGetCreditArgs {
	return &AcademicServiceGetCreditArgs{}
}

func (p *AcademicServiceGetCreditArgs) InitDefault() {
}

var AcademicServiceGetCreditArgs_Req_DEFAULT *GetCreditRequest

func (p *AcademicServiceGetCreditArgs) GetReq() (v *GetCreditRequest) {
	if !p.IsSetReq() {
		return AcademicServiceGetCreditArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AcademicServiceGetCreditArgs) SetReq(val *GetCreditRequest) {
	p.Req = val
}

func (p *AcademicServiceGetCreditArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AcademicServiceGetCreditArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetCreditArgs(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetCreditArgs = map[int16]string{
	1: "req",
}

type AcademicServiceGetCreditResult struct {
	Success *GetCreditResponse `thrift:"success,0,optional" frugal:"0,optional,GetCreditResponse" json:"success,omitempty"`
}

func NewAcademicServiceGetCreditResult() *AcademicServiceGetCreditResult {
	return &AcademicServiceGetCreditResult{}
}

func (p *AcademicServiceGetCreditResult) InitDefault() {
}

var AcademicServiceGetCreditResult_Success_DEFAULT *GetCreditResponse

func (p *AcademicServiceGetCreditResult) GetSuccess() (v *GetCreditResponse) {
	if !p.IsSetSuccess() {
		return AcademicServiceGetCreditResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AcademicServiceGetCreditResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCreditResponse)
}

func (p *AcademicServiceGetCreditResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcademicServiceGetCreditResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetCreditResult(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetCreditResult = map[int16]string{
	0: "success",
}

type AcademicServiceGetUnifiedExamArgs struct {
	Req *GetUnifiedExamRequest `thrift:"req,1" frugal:"1,default,GetUnifiedExamRequest" json:"req"`
}

func NewAcademicServiceGetUnifiedExamArgs() *AcademicServiceGetUnifiedExamArgs {
	return &AcademicServiceGetUnifiedExamArgs{}
}

func (p *AcademicServiceGetUnifiedExamArgs) InitDefault() {
}

var AcademicServiceGetUnifiedExamArgs_Req_DEFAULT *GetUnifiedExamRequest

func (p *AcademicServiceGetUnifiedExamArgs) GetReq() (v *GetUnifiedExamRequest) {
	if !p.IsSetReq() {
		return AcademicServiceGetUnifiedExamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AcademicServiceGetUnifiedExamArgs) SetReq(val *GetUnifiedExamRequest) {
	p.Req = val
}

func (p *AcademicServiceGetUnifiedExamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AcademicServiceGetUnifiedExamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetUnifiedExamArgs(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetUnifiedExamArgs = map[int16]string{
	1: "req",
}

type AcademicServiceGetUnifiedExamResult struct {
	Success *GetUnifiedExamResponse `thrift:"success,0,optional" frugal:"0,optional,GetUnifiedExamResponse" json:"success,omitempty"`
}

func NewAcademicServiceGetUnifiedExamResult() *AcademicServiceGetUnifiedExamResult {
	return &AcademicServiceGetUnifiedExamResult{}
}

func (p *AcademicServiceGetUnifiedExamResult) InitDefault() {
}

var AcademicServiceGetUnifiedExamResult_Success_DEFAULT *GetUnifiedExamResponse

func (p *AcademicServiceGetUnifiedExamResult) GetSuccess() (v *GetUnifiedExamResponse) {
	if !p.IsSetSuccess() {
		return AcademicServiceGetUnifiedExamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AcademicServiceGetUnifiedExamResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUnifiedExamResponse)
}

func (p *AcademicServiceGetUnifiedExamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcademicServiceGetUnifiedExamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetUnifiedExamResult(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetUnifiedExamResult = map[int16]string{
	0: "success",
}

type AcademicServiceGetPlanArgs struct {
	Req *GetPlanRequest `thrift:"req,1" frugal:"1,default,GetPlanRequest" json:"req"`
}

func NewAcademicServiceGetPlanArgs() *AcademicServiceGetPlanArgs {
	return &AcademicServiceGetPlanArgs{}
}

func (p *AcademicServiceGetPlanArgs) InitDefault() {
}

var AcademicServiceGetPlanArgs_Req_DEFAULT *GetPlanRequest

func (p *AcademicServiceGetPlanArgs) GetReq() (v *GetPlanRequest) {
	if !p.IsSetReq() {
		return AcademicServiceGetPlanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AcademicServiceGetPlanArgs) SetReq(val *GetPlanRequest) {
	p.Req = val
}

func (p *AcademicServiceGetPlanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AcademicServiceGetPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetPlanArgs(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetPlanArgs = map[int16]string{
	1: "req",
}

type AcademicServiceGetPlanResult struct {
	Success *GetPlanResponse `thrift:"success,0,optional" frugal:"0,optional,GetPlanResponse" json:"success,omitempty"`
}

func NewAcademicServiceGetPlanResult() *AcademicServiceGetPlanResult {
	return &AcademicServiceGetPlanResult{}
}

func (p *AcademicServiceGetPlanResult) InitDefault() {
}

var AcademicServiceGetPlanResult_Success_DEFAULT *GetPlanResponse

func (p *AcademicServiceGetPlanResult) GetSuccess() (v *GetPlanResponse) {
	if !p.IsSetSuccess() {
		return AcademicServiceGetPlanResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AcademicServiceGetPlanResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPlanResponse)
}

func (p *AcademicServiceGetPlanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcademicServiceGetPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcademicServiceGetPlanResult(%+v)", *p)
}

var fieldIDToName_AcademicServiceGetPlanResult = map[int16]string{
	0: "success",
}

type VersionService interface {
	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	UploadVersion(ctx context.Context, req *UploadRequest) (r *UploadResponse, err error)

	UploadParams(ctx context.Context, req *UploadParamsRequest) (r *UploadParamsResponse, err error)

	DownloadReleaseApk(ctx context.Context, req *DownloadReleaseApkRequest) (r *DownloadReleaseApkResponse, err error)

	DownloadBetaApk(ctx context.Context, req *DownloadBetaApkRequest) (r *DownloadBetaApkResponse, err error)

	GetReleaseVersion(ctx context.Context, req *GetReleaseVersionRequest) (r *GetReleaseVersionResponse, err error)

	GetBetaVersion(ctx context.Context, req *GetBetaVersionRequest) (r *GetBetaVersionResponse, err error)

	GetSetting(ctx context.Context, req *GetSettingRequest) (r *GetSettingResponse, err error)

	GetTest(ctx context.Context, req *GetTestRequest) (r *GetTestResponse, err error)

	GetCloud(ctx context.Context, req *GetCloudRequest) (r *GetCloudResponse, err error)

	SetCloud(ctx context.Context, req *SetCloudRequest) (r *SetCloudResponse, err error)

	GetDump(ctx context.Context, req *GetDumpRequest) (r *GetDumpResponse, err error)

	AndroidGetVersion(ctx context.Context, req *AndroidGetVersioneRequest) (r *AndroidGetVersionResponse, err error)
}

type VersionServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewVersionServiceLoginArgs() *VersionServiceLoginArgs {
	return &VersionServiceLoginArgs{}
}

func (p *VersionServiceLoginArgs) InitDefault() {
}

var VersionServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *VersionServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return VersionServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *VersionServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceLoginArgs = map[int16]string{
	1: "req",
}

type VersionServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewVersionServiceLoginResult() *VersionServiceLoginResult {
	return &VersionServiceLoginResult{}
}

func (p *VersionServiceLoginResult) InitDefault() {
}

var VersionServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *VersionServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *VersionServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginResult(%+v)", *p)
}

var fieldIDToName_VersionServiceLoginResult = map[int16]string{
	0: "success",
}

type VersionServiceUploadVersionArgs struct {
	Req *UploadRequest `thrift:"req,1" frugal:"1,default,UploadRequest" json:"req"`
}

func NewVersionServiceUploadVersionArgs() *VersionServiceUploadVersionArgs {
	return &VersionServiceUploadVersionArgs{}
}

func (p *VersionServiceUploadVersionArgs) InitDefault() {
}

var VersionServiceUploadVersionArgs_Req_DEFAULT *UploadRequest

func (p *VersionServiceUploadVersionArgs) GetReq() (v *UploadRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadVersionArgs) SetReq(val *UploadRequest) {
	p.Req = val
}

func (p *VersionServiceUploadVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceUploadVersionResult struct {
	Success *UploadResponse `thrift:"success,0,optional" frugal:"0,optional,UploadResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadVersionResult() *VersionServiceUploadVersionResult {
	return &VersionServiceUploadVersionResult{}
}

func (p *VersionServiceUploadVersionResult) InitDefault() {
}

var VersionServiceUploadVersionResult_Success_DEFAULT *UploadResponse

func (p *VersionServiceUploadVersionResult) GetSuccess() (v *UploadResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadResponse)
}

func (p *VersionServiceUploadVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceUploadParamsArgs struct {
	Req *UploadParamsRequest `thrift:"req,1" frugal:"1,default,UploadParamsRequest" json:"req"`
}

func NewVersionServiceUploadParamsArgs() *VersionServiceUploadParamsArgs {
	return &VersionServiceUploadParamsArgs{}
}

func (p *VersionServiceUploadParamsArgs) InitDefault() {
}

var VersionServiceUploadParamsArgs_Req_DEFAULT *UploadParamsRequest

func (p *VersionServiceUploadParamsArgs) GetReq() (v *UploadParamsRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadParamsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadParamsArgs) SetReq(val *UploadParamsRequest) {
	p.Req = val
}

func (p *VersionServiceUploadParamsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadParamsArgs = map[int16]string{
	1: "req",
}

type VersionServiceUploadParamsResult struct {
	Success *UploadParamsResponse `thrift:"success,0,optional" frugal:"0,optional,UploadParamsResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadParamsResult() *VersionServiceUploadParamsResult {
	return &VersionServiceUploadParamsResult{}
}

func (p *VersionServiceUploadParamsResult) InitDefault() {
}

var VersionServiceUploadParamsResult_Success_DEFAULT *UploadParamsResponse

func (p *VersionServiceUploadParamsResult) GetSuccess() (v *UploadParamsResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadParamsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadParamsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadParamsResponse)
}

func (p *VersionServiceUploadParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsResult(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadParamsResult = map[int16]string{
	0: "success",
}

type VersionServiceDownloadReleaseApkArgs struct {
	Req *DownloadReleaseApkRequest `thrift:"req,1" frugal:"1,default,DownloadReleaseApkRequest" json:"req"`
}

func NewVersionServiceDownloadReleaseApkArgs() *VersionServiceDownloadReleaseApkArgs {
	return &VersionServiceDownloadReleaseApkArgs{}
}

func (p *VersionServiceDownloadReleaseApkArgs) InitDefault() {
}

var VersionServiceDownloadReleaseApkArgs_Req_DEFAULT *DownloadReleaseApkRequest

func (p *VersionServiceDownloadReleaseApkArgs) GetReq() (v *DownloadReleaseApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadReleaseApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadReleaseApkArgs) SetReq(val *DownloadReleaseApkRequest) {
	p.Req = val
}

func (p *VersionServiceDownloadReleaseApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadReleaseApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadReleaseApkArgs = map[int16]string{
	1: "req",
}

type VersionServiceDownloadReleaseApkResult struct {
	Success *DownloadReleaseApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadReleaseApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadReleaseApkResult() *VersionServiceDownloadReleaseApkResult {
	return &VersionServiceDownloadReleaseApkResult{}
}

func (p *VersionServiceDownloadReleaseApkResult) InitDefault() {
}

var VersionServiceDownloadReleaseApkResult_Success_DEFAULT *DownloadReleaseApkResponse

func (p *VersionServiceDownloadReleaseApkResult) GetSuccess() (v *DownloadReleaseApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadReleaseApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadReleaseApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadReleaseApkResponse)
}

func (p *VersionServiceDownloadReleaseApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadReleaseApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkResult(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadReleaseApkResult = map[int16]string{
	0: "success",
}

type VersionServiceDownloadBetaApkArgs struct {
	Req *DownloadBetaApkRequest `thrift:"req,1" frugal:"1,default,DownloadBetaApkRequest" json:"req"`
}

func NewVersionServiceDownloadBetaApkArgs() *VersionServiceDownloadBetaApkArgs {
	return &VersionServiceDownloadBetaApkArgs{}
}

func (p *VersionServiceDownloadBetaApkArgs) InitDefault() {
}

var VersionServiceDownloadBetaApkArgs_Req_DEFAULT *DownloadBetaApkRequest

func (p *VersionServiceDownloadBetaApkArgs) GetReq() (v *DownloadBetaApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadBetaApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadBetaApkArgs) SetReq(val *DownloadBetaApkRequest) {
	p.Req = val
}

func (p *VersionServiceDownloadBetaApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadBetaApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadBetaApkArgs = map[int16]string{
	1: "req",
}

type VersionServiceDownloadBetaApkResult struct {
	Success *DownloadBetaApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadBetaApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadBetaApkResult() *VersionServiceDownloadBetaApkResult {
	return &VersionServiceDownloadBetaApkResult{}
}

func (p *VersionServiceDownloadBetaApkResult) InitDefault() {
}

var VersionServiceDownloadBetaApkResult_Success_DEFAULT *DownloadBetaApkResponse

func (p *VersionServiceDownloadBetaApkResult) GetSuccess() (v *DownloadBetaApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadBetaApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadBetaApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadBetaApkResponse)
}

func (p *VersionServiceDownloadBetaApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadBetaApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkResult(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadBetaApkResult = map[int16]string{
	0: "success",
}

type VersionServiceGetReleaseVersionArgs struct {
	Req *GetReleaseVersionRequest `thrift:"req,1" frugal:"1,default,GetReleaseVersionRequest" json:"req"`
}

func NewVersionServiceGetReleaseVersionArgs() *VersionServiceGetReleaseVersionArgs {
	return &VersionServiceGetReleaseVersionArgs{}
}

func (p *VersionServiceGetReleaseVersionArgs) InitDefault() {
}

var VersionServiceGetReleaseVersionArgs_Req_DEFAULT *GetReleaseVersionRequest

func (p *VersionServiceGetReleaseVersionArgs) GetReq() (v *GetReleaseVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetReleaseVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetReleaseVersionArgs) SetReq(val *GetReleaseVersionRequest) {
	p.Req = val
}

func (p *VersionServiceGetReleaseVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetReleaseVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetReleaseVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetReleaseVersionResult struct {
	Success *GetReleaseVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetReleaseVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetReleaseVersionResult() *VersionServiceGetReleaseVersionResult {
	return &VersionServiceGetReleaseVersionResult{}
}

func (p *VersionServiceGetReleaseVersionResult) InitDefault() {
}

var VersionServiceGetReleaseVersionResult_Success_DEFAULT *GetReleaseVersionResponse

func (p *VersionServiceGetReleaseVersionResult) GetSuccess() (v *GetReleaseVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetReleaseVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetReleaseVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetReleaseVersionResponse)
}

func (p *VersionServiceGetReleaseVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetReleaseVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetReleaseVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceGetBetaVersionArgs struct {
	Req *GetBetaVersionRequest `thrift:"req,1" frugal:"1,default,GetBetaVersionRequest" json:"req"`
}

func NewVersionServiceGetBetaVersionArgs() *VersionServiceGetBetaVersionArgs {
	return &VersionServiceGetBetaVersionArgs{}
}

func (p *VersionServiceGetBetaVersionArgs) InitDefault() {
}

var VersionServiceGetBetaVersionArgs_Req_DEFAULT *GetBetaVersionRequest

func (p *VersionServiceGetBetaVersionArgs) GetReq() (v *GetBetaVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetBetaVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetBetaVersionArgs) SetReq(val *GetBetaVersionRequest) {
	p.Req = val
}

func (p *VersionServiceGetBetaVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetBetaVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetBetaVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetBetaVersionResult struct {
	Success *GetBetaVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetBetaVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetBetaVersionResult() *VersionServiceGetBetaVersionResult {
	return &VersionServiceGetBetaVersionResult{}
}

func (p *VersionServiceGetBetaVersionResult) InitDefault() {
}

var VersionServiceGetBetaVersionResult_Success_DEFAULT *GetBetaVersionResponse

func (p *VersionServiceGetBetaVersionResult) GetSuccess() (v *GetBetaVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetBetaVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetBetaVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetBetaVersionResponse)
}

func (p *VersionServiceGetBetaVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetBetaVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetBetaVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceGetSettingArgs struct {
	Req *GetSettingRequest `thrift:"req,1" frugal:"1,default,GetSettingRequest" json:"req"`
}

func NewVersionServiceGetSettingArgs() *VersionServiceGetSettingArgs {
	return &VersionServiceGetSettingArgs{}
}

func (p *VersionServiceGetSettingArgs) InitDefault() {
}

var VersionServiceGetSettingArgs_Req_DEFAULT *GetSettingRequest

func (p *VersionServiceGetSettingArgs) GetReq() (v *GetSettingRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetSettingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetSettingArgs) SetReq(val *GetSettingRequest) {
	p.Req = val
}

func (p *VersionServiceGetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetSettingArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetSettingResult struct {
	Success *GetSettingResponse `thrift:"success,0,optional" frugal:"0,optional,GetSettingResponse" json:"success,omitempty"`
}

func NewVersionServiceGetSettingResult() *VersionServiceGetSettingResult {
	return &VersionServiceGetSettingResult{}
}

func (p *VersionServiceGetSettingResult) InitDefault() {
}

var VersionServiceGetSettingResult_Success_DEFAULT *GetSettingResponse

func (p *VersionServiceGetSettingResult) GetSuccess() (v *GetSettingResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetSettingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSettingResponse)
}

func (p *VersionServiceGetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetSettingResult = map[int16]string{
	0: "success",
}

type VersionServiceGetTestArgs struct {
	Req *GetTestRequest `thrift:"req,1" frugal:"1,default,GetTestRequest" json:"req"`
}

func NewVersionServiceGetTestArgs() *VersionServiceGetTestArgs {
	return &VersionServiceGetTestArgs{}
}

func (p *VersionServiceGetTestArgs) InitDefault() {
}

var VersionServiceGetTestArgs_Req_DEFAULT *GetTestRequest

func (p *VersionServiceGetTestArgs) GetReq() (v *GetTestRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetTestArgs) SetReq(val *GetTestRequest) {
	p.Req = val
}

func (p *VersionServiceGetTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetTestArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetTestResult struct {
	Success *GetTestResponse `thrift:"success,0,optional" frugal:"0,optional,GetTestResponse" json:"success,omitempty"`
}

func NewVersionServiceGetTestResult() *VersionServiceGetTestResult {
	return &VersionServiceGetTestResult{}
}

func (p *VersionServiceGetTestResult) InitDefault() {
}

var VersionServiceGetTestResult_Success_DEFAULT *GetTestResponse

func (p *VersionServiceGetTestResult) GetSuccess() (v *GetTestResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTestResponse)
}

func (p *VersionServiceGetTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetTestResult = map[int16]string{
	0: "success",
}

type VersionServiceGetCloudArgs struct {
	Req *GetCloudRequest `thrift:"req,1" frugal:"1,default,GetCloudRequest" json:"req"`
}

func NewVersionServiceGetCloudArgs() *VersionServiceGetCloudArgs {
	return &VersionServiceGetCloudArgs{}
}

func (p *VersionServiceGetCloudArgs) InitDefault() {
}

var VersionServiceGetCloudArgs_Req_DEFAULT *GetCloudRequest

func (p *VersionServiceGetCloudArgs) GetReq() (v *GetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetCloudArgs) SetReq(val *GetCloudRequest) {
	p.Req = val
}

func (p *VersionServiceGetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetCloudArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetCloudResult struct {
	Success *GetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,GetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceGetCloudResult() *VersionServiceGetCloudResult {
	return &VersionServiceGetCloudResult{}
}

func (p *VersionServiceGetCloudResult) InitDefault() {
}

var VersionServiceGetCloudResult_Success_DEFAULT *GetCloudResponse

func (p *VersionServiceGetCloudResult) GetSuccess() (v *GetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCloudResponse)
}

func (p *VersionServiceGetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetCloudResult = map[int16]string{
	0: "success",
}

type VersionServiceSetCloudArgs struct {
	Req *SetCloudRequest `thrift:"req,1" frugal:"1,default,SetCloudRequest" json:"req"`
}

func NewVersionServiceSetCloudArgs() *VersionServiceSetCloudArgs {
	return &VersionServiceSetCloudArgs{}
}

func (p *VersionServiceSetCloudArgs) InitDefault() {
}

var VersionServiceSetCloudArgs_Req_DEFAULT *SetCloudRequest

func (p *VersionServiceSetCloudArgs) GetReq() (v *SetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceSetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceSetCloudArgs) SetReq(val *SetCloudRequest) {
	p.Req = val
}

func (p *VersionServiceSetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceSetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceSetCloudArgs = map[int16]string{
	1: "req",
}

type VersionServiceSetCloudResult struct {
	Success *SetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,SetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceSetCloudResult() *VersionServiceSetCloudResult {
	return &VersionServiceSetCloudResult{}
}

func (p *VersionServiceSetCloudResult) InitDefault() {
}

var VersionServiceSetCloudResult_Success_DEFAULT *SetCloudResponse

func (p *VersionServiceSetCloudResult) GetSuccess() (v *SetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceSetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceSetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetCloudResponse)
}

func (p *VersionServiceSetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceSetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudResult(%+v)", *p)
}

var fieldIDToName_VersionServiceSetCloudResult = map[int16]string{
	0: "success",
}

type VersionServiceGetDumpArgs struct {
	Req *GetDumpRequest `thrift:"req,1" frugal:"1,default,GetDumpRequest" json:"req"`
}

func NewVersionServiceGetDumpArgs() *VersionServiceGetDumpArgs {
	return &VersionServiceGetDumpArgs{}
}

func (p *VersionServiceGetDumpArgs) InitDefault() {
}

var VersionServiceGetDumpArgs_Req_DEFAULT *GetDumpRequest

func (p *VersionServiceGetDumpArgs) GetReq() (v *GetDumpRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetDumpArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetDumpArgs) SetReq(val *GetDumpRequest) {
	p.Req = val
}

func (p *VersionServiceGetDumpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetDumpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetDumpArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetDumpResult struct {
	Success *GetDumpResponse `thrift:"success,0,optional" frugal:"0,optional,GetDumpResponse" json:"success,omitempty"`
}

func NewVersionServiceGetDumpResult() *VersionServiceGetDumpResult {
	return &VersionServiceGetDumpResult{}
}

func (p *VersionServiceGetDumpResult) InitDefault() {
}

var VersionServiceGetDumpResult_Success_DEFAULT *GetDumpResponse

func (p *VersionServiceGetDumpResult) GetSuccess() (v *GetDumpResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetDumpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetDumpResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDumpResponse)
}

func (p *VersionServiceGetDumpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetDumpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetDumpResult = map[int16]string{
	0: "success",
}

type VersionServiceAndroidGetVersionArgs struct {
	Req *AndroidGetVersioneRequest `thrift:"req,1" frugal:"1,default,AndroidGetVersioneRequest" json:"req"`
}

func NewVersionServiceAndroidGetVersionArgs() *VersionServiceAndroidGetVersionArgs {
	return &VersionServiceAndroidGetVersionArgs{}
}

func (p *VersionServiceAndroidGetVersionArgs) InitDefault() {
}

var VersionServiceAndroidGetVersionArgs_Req_DEFAULT *AndroidGetVersioneRequest

func (p *VersionServiceAndroidGetVersionArgs) GetReq() (v *AndroidGetVersioneRequest) {
	if !p.IsSetReq() {
		return VersionServiceAndroidGetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceAndroidGetVersionArgs) SetReq(val *AndroidGetVersioneRequest) {
	p.Req = val
}

func (p *VersionServiceAndroidGetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceAndroidGetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceAndroidGetVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceAndroidGetVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceAndroidGetVersionResult struct {
	Success *AndroidGetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,AndroidGetVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceAndroidGetVersionResult() *VersionServiceAndroidGetVersionResult {
	return &VersionServiceAndroidGetVersionResult{}
}

func (p *VersionServiceAndroidGetVersionResult) InitDefault() {
}

var VersionServiceAndroidGetVersionResult_Success_DEFAULT *AndroidGetVersionResponse

func (p *VersionServiceAndroidGetVersionResult) GetSuccess() (v *AndroidGetVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceAndroidGetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceAndroidGetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*AndroidGetVersionResponse)
}

func (p *VersionServiceAndroidGetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceAndroidGetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceAndroidGetVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceAndroidGetVersionResult = map[int16]string{
	0: "success",
}

type CommonService interface {
	GetCSS(ctx context.Context, req *GetCSSRequest) (r *GetCSSResponse, err error)

	GetHtml(ctx context.Context, req *GetHtmlRequest) (r *GetHtmlResponse, err error)

	GetUserAgreement(ctx context.Context, req *GetUserAgreementRequest) (r *GetUserAgreementResponse, err error)

	GetTermsList(ctx context.Context, req *TermListRequest) (r *TermListResponse, err error)

	GetTerm(ctx context.Context, req *TermRequest) (r *TermResponse, err error)

	GetNotice(ctx context.Context, req *GetNoticeRequst) (r *GetNoticeResponse, err error)

	GetContributorInfo(ctx context.Context, req *GetContributorInfoRequest) (r *GetContributorInfoResponse, err error)

	GetToolboxConfig(ctx context.Context, req *GetToolboxConfigRequest) (r *GetToolboxConfigResponse, err error)

	PutToolboxConfig(ctx context.Context, req *PutToolboxConfigRequest) (r *PutToolboxConfigResponse, err error)
}

type CommonServiceGetCSSArgs struct {
	Req *GetCSSRequest `thrift:"req,1" frugal:"1,default,GetCSSRequest" json:"req"`
}

func NewCommonServiceGetCSSArgs() *CommonServiceGetCSSArgs {
	return &CommonServiceGetCSSArgs{}
}

func (p *CommonServiceGetCSSArgs) InitDefault() {
}

var CommonServiceGetCSSArgs_Req_DEFAULT *GetCSSRequest

func (p *CommonServiceGetCSSArgs) GetReq() (v *GetCSSRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetCSSArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetCSSArgs) SetReq(val *GetCSSRequest) {
	p.Req = val
}

func (p *CommonServiceGetCSSArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetCSSArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetCSSArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetCSSArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetCSSResult struct {
	Success *GetCSSResponse `thrift:"success,0,optional" frugal:"0,optional,GetCSSResponse" json:"success,omitempty"`
}

func NewCommonServiceGetCSSResult() *CommonServiceGetCSSResult {
	return &CommonServiceGetCSSResult{}
}

func (p *CommonServiceGetCSSResult) InitDefault() {
}

var CommonServiceGetCSSResult_Success_DEFAULT *GetCSSResponse

func (p *CommonServiceGetCSSResult) GetSuccess() (v *GetCSSResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetCSSResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetCSSResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCSSResponse)
}

func (p *CommonServiceGetCSSResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetCSSResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetCSSResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetCSSResult = map[int16]string{
	0: "success",
}

type CommonServiceGetHtmlArgs struct {
	Req *GetHtmlRequest `thrift:"req,1" frugal:"1,default,GetHtmlRequest" json:"req"`
}

func NewCommonServiceGetHtmlArgs() *CommonServiceGetHtmlArgs {
	return &CommonServiceGetHtmlArgs{}
}

func (p *CommonServiceGetHtmlArgs) InitDefault() {
}

var CommonServiceGetHtmlArgs_Req_DEFAULT *GetHtmlRequest

func (p *CommonServiceGetHtmlArgs) GetReq() (v *GetHtmlRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetHtmlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetHtmlArgs) SetReq(val *GetHtmlRequest) {
	p.Req = val
}

func (p *CommonServiceGetHtmlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetHtmlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetHtmlArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetHtmlArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetHtmlResult struct {
	Success *GetHtmlResponse `thrift:"success,0,optional" frugal:"0,optional,GetHtmlResponse" json:"success,omitempty"`
}

func NewCommonServiceGetHtmlResult() *CommonServiceGetHtmlResult {
	return &CommonServiceGetHtmlResult{}
}

func (p *CommonServiceGetHtmlResult) InitDefault() {
}

var CommonServiceGetHtmlResult_Success_DEFAULT *GetHtmlResponse

func (p *CommonServiceGetHtmlResult) GetSuccess() (v *GetHtmlResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetHtmlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetHtmlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHtmlResponse)
}

func (p *CommonServiceGetHtmlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetHtmlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetHtmlResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetHtmlResult = map[int16]string{
	0: "success",
}

type CommonServiceGetUserAgreementArgs struct {
	Req *GetUserAgreementRequest `thrift:"req,1" frugal:"1,default,GetUserAgreementRequest" json:"req"`
}

func NewCommonServiceGetUserAgreementArgs() *CommonServiceGetUserAgreementArgs {
	return &CommonServiceGetUserAgreementArgs{}
}

func (p *CommonServiceGetUserAgreementArgs) InitDefault() {
}

var CommonServiceGetUserAgreementArgs_Req_DEFAULT *GetUserAgreementRequest

func (p *CommonServiceGetUserAgreementArgs) GetReq() (v *GetUserAgreementRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetUserAgreementArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetUserAgreementArgs) SetReq(val *GetUserAgreementRequest) {
	p.Req = val
}

func (p *CommonServiceGetUserAgreementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetUserAgreementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetUserAgreementArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetUserAgreementArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetUserAgreementResult struct {
	Success *GetUserAgreementResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserAgreementResponse" json:"success,omitempty"`
}

func NewCommonServiceGetUserAgreementResult() *CommonServiceGetUserAgreementResult {
	return &CommonServiceGetUserAgreementResult{}
}

func (p *CommonServiceGetUserAgreementResult) InitDefault() {
}

var CommonServiceGetUserAgreementResult_Success_DEFAULT *GetUserAgreementResponse

func (p *CommonServiceGetUserAgreementResult) GetSuccess() (v *GetUserAgreementResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetUserAgreementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetUserAgreementResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserAgreementResponse)
}

func (p *CommonServiceGetUserAgreementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetUserAgreementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetUserAgreementResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetUserAgreementResult = map[int16]string{
	0: "success",
}

type CommonServiceGetTermsListArgs struct {
	Req *TermListRequest `thrift:"req,1" frugal:"1,default,TermListRequest" json:"req"`
}

func NewCommonServiceGetTermsListArgs() *CommonServiceGetTermsListArgs {
	return &CommonServiceGetTermsListArgs{}
}

func (p *CommonServiceGetTermsListArgs) InitDefault() {
}

var CommonServiceGetTermsListArgs_Req_DEFAULT *TermListRequest

func (p *CommonServiceGetTermsListArgs) GetReq() (v *TermListRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetTermsListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetTermsListArgs) SetReq(val *TermListRequest) {
	p.Req = val
}

func (p *CommonServiceGetTermsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetTermsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermsListArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermsListArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetTermsListResult struct {
	Success *TermListResponse `thrift:"success,0,optional" frugal:"0,optional,TermListResponse" json:"success,omitempty"`
}

func NewCommonServiceGetTermsListResult() *CommonServiceGetTermsListResult {
	return &CommonServiceGetTermsListResult{}
}

func (p *CommonServiceGetTermsListResult) InitDefault() {
}

var CommonServiceGetTermsListResult_Success_DEFAULT *TermListResponse

func (p *CommonServiceGetTermsListResult) GetSuccess() (v *TermListResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetTermsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetTermsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*TermListResponse)
}

func (p *CommonServiceGetTermsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetTermsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermsListResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermsListResult = map[int16]string{
	0: "success",
}

type CommonServiceGetTermArgs struct {
	Req *TermRequest `thrift:"req,1" frugal:"1,default,TermRequest" json:"req"`
}

func NewCommonServiceGetTermArgs() *CommonServiceGetTermArgs {
	return &CommonServiceGetTermArgs{}
}

func (p *CommonServiceGetTermArgs) InitDefault() {
}

var CommonServiceGetTermArgs_Req_DEFAULT *TermRequest

func (p *CommonServiceGetTermArgs) GetReq() (v *TermRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetTermArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetTermArgs) SetReq(val *TermRequest) {
	p.Req = val
}

func (p *CommonServiceGetTermArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetTermArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetTermResult struct {
	Success *TermResponse `thrift:"success,0,optional" frugal:"0,optional,TermResponse" json:"success,omitempty"`
}

func NewCommonServiceGetTermResult() *CommonServiceGetTermResult {
	return &CommonServiceGetTermResult{}
}

func (p *CommonServiceGetTermResult) InitDefault() {
}

var CommonServiceGetTermResult_Success_DEFAULT *TermResponse

func (p *CommonServiceGetTermResult) GetSuccess() (v *TermResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetTermResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetTermResult) SetSuccess(x interface{}) {
	p.Success = x.(*TermResponse)
}

func (p *CommonServiceGetTermResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetTermResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermResult = map[int16]string{
	0: "success",
}

type CommonServiceGetNoticeArgs struct {
	Req *GetNoticeRequst `thrift:"req,1" frugal:"1,default,GetNoticeRequst" json:"req"`
}

func NewCommonServiceGetNoticeArgs() *CommonServiceGetNoticeArgs {
	return &CommonServiceGetNoticeArgs{}
}

func (p *CommonServiceGetNoticeArgs) InitDefault() {
}

var CommonServiceGetNoticeArgs_Req_DEFAULT *GetNoticeRequst

func (p *CommonServiceGetNoticeArgs) GetReq() (v *GetNoticeRequst) {
	if !p.IsSetReq() {
		return CommonServiceGetNoticeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetNoticeArgs) SetReq(val *GetNoticeRequst) {
	p.Req = val
}

func (p *CommonServiceGetNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetNoticeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetNoticeArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetNoticeArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetNoticeResult struct {
	Success *GetNoticeResponse `thrift:"success,0,optional" frugal:"0,optional,GetNoticeResponse" json:"success,omitempty"`
}

func NewCommonServiceGetNoticeResult() *CommonServiceGetNoticeResult {
	return &CommonServiceGetNoticeResult{}
}

func (p *CommonServiceGetNoticeResult) InitDefault() {
}

var CommonServiceGetNoticeResult_Success_DEFAULT *GetNoticeResponse

func (p *CommonServiceGetNoticeResult) GetSuccess() (v *GetNoticeResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetNoticeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetNoticeResponse)
}

func (p *CommonServiceGetNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetNoticeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetNoticeResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetNoticeResult = map[int16]string{
	0: "success",
}

type CommonServiceGetContributorInfoArgs struct {
	Req *GetContributorInfoRequest `thrift:"req,1" frugal:"1,default,GetContributorInfoRequest" json:"req"`
}

func NewCommonServiceGetContributorInfoArgs() *CommonServiceGetContributorInfoArgs {
	return &CommonServiceGetContributorInfoArgs{}
}

func (p *CommonServiceGetContributorInfoArgs) InitDefault() {
}

var CommonServiceGetContributorInfoArgs_Req_DEFAULT *GetContributorInfoRequest

func (p *CommonServiceGetContributorInfoArgs) GetReq() (v *GetContributorInfoRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetContributorInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetContributorInfoArgs) SetReq(val *GetContributorInfoRequest) {
	p.Req = val
}

func (p *CommonServiceGetContributorInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetContributorInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetContributorInfoArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetContributorInfoArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetContributorInfoResult struct {
	Success *GetContributorInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetContributorInfoResponse" json:"success,omitempty"`
}

func NewCommonServiceGetContributorInfoResult() *CommonServiceGetContributorInfoResult {
	return &CommonServiceGetContributorInfoResult{}
}

func (p *CommonServiceGetContributorInfoResult) InitDefault() {
}

var CommonServiceGetContributorInfoResult_Success_DEFAULT *GetContributorInfoResponse

func (p *CommonServiceGetContributorInfoResult) GetSuccess() (v *GetContributorInfoResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetContributorInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetContributorInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetContributorInfoResponse)
}

func (p *CommonServiceGetContributorInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetContributorInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetContributorInfoResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetContributorInfoResult = map[int16]string{
	0: "success",
}

type CommonServiceGetToolboxConfigArgs struct {
	Req *GetToolboxConfigRequest `thrift:"req,1" frugal:"1,default,GetToolboxConfigRequest" json:"req"`
}

func NewCommonServiceGetToolboxConfigArgs() *CommonServiceGetToolboxConfigArgs {
	return &CommonServiceGetToolboxConfigArgs{}
}

func (p *CommonServiceGetToolboxConfigArgs) InitDefault() {
}

var CommonServiceGetToolboxConfigArgs_Req_DEFAULT *GetToolboxConfigRequest

func (p *CommonServiceGetToolboxConfigArgs) GetReq() (v *GetToolboxConfigRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetToolboxConfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetToolboxConfigArgs) SetReq(val *GetToolboxConfigRequest) {
	p.Req = val
}

func (p *CommonServiceGetToolboxConfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetToolboxConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetToolboxConfigArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetToolboxConfigArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetToolboxConfigResult struct {
	Success *GetToolboxConfigResponse `thrift:"success,0,optional" frugal:"0,optional,GetToolboxConfigResponse" json:"success,omitempty"`
}

func NewCommonServiceGetToolboxConfigResult() *CommonServiceGetToolboxConfigResult {
	return &CommonServiceGetToolboxConfigResult{}
}

func (p *CommonServiceGetToolboxConfigResult) InitDefault() {
}

var CommonServiceGetToolboxConfigResult_Success_DEFAULT *GetToolboxConfigResponse

func (p *CommonServiceGetToolboxConfigResult) GetSuccess() (v *GetToolboxConfigResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetToolboxConfigResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetToolboxConfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetToolboxConfigResponse)
}

func (p *CommonServiceGetToolboxConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetToolboxConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetToolboxConfigResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetToolboxConfigResult = map[int16]string{
	0: "success",
}

type CommonServicePutToolboxConfigArgs struct {
	Req *PutToolboxConfigRequest `thrift:"req,1" frugal:"1,default,PutToolboxConfigRequest" json:"req"`
}

func NewCommonServicePutToolboxConfigArgs() *CommonServicePutToolboxConfigArgs {
	return &CommonServicePutToolboxConfigArgs{}
}

func (p *CommonServicePutToolboxConfigArgs) InitDefault() {
}

var CommonServicePutToolboxConfigArgs_Req_DEFAULT *PutToolboxConfigRequest

func (p *CommonServicePutToolboxConfigArgs) GetReq() (v *PutToolboxConfigRequest) {
	if !p.IsSetReq() {
		return CommonServicePutToolboxConfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServicePutToolboxConfigArgs) SetReq(val *PutToolboxConfigRequest) {
	p.Req = val
}

func (p *CommonServicePutToolboxConfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServicePutToolboxConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServicePutToolboxConfigArgs(%+v)", *p)
}

var fieldIDToName_CommonServicePutToolboxConfigArgs = map[int16]string{
	1: "req",
}

type CommonServicePutToolboxConfigResult struct {
	Success *PutToolboxConfigResponse `thrift:"success,0,optional" frugal:"0,optional,PutToolboxConfigResponse" json:"success,omitempty"`
}

func NewCommonServicePutToolboxConfigResult() *CommonServicePutToolboxConfigResult {
	return &CommonServicePutToolboxConfigResult{}
}

func (p *CommonServicePutToolboxConfigResult) InitDefault() {
}

var CommonServicePutToolboxConfigResult_Success_DEFAULT *PutToolboxConfigResponse

func (p *CommonServicePutToolboxConfigResult) GetSuccess() (v *PutToolboxConfigResponse) {
	if !p.IsSetSuccess() {
		return CommonServicePutToolboxConfigResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServicePutToolboxConfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*PutToolboxConfigResponse)
}

func (p *CommonServicePutToolboxConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServicePutToolboxConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServicePutToolboxConfigResult(%+v)", *p)
}

var fieldIDToName_CommonServicePutToolboxConfigResult = map[int16]string{
	0: "success",
}

type FeedbackService interface {
	CreateFeedback(ctx context.Context, request *CreateFeedbackRequest) (r *CreateFeedbackResponse, err error)

	GetFeedback(ctx context.Context, request *GetFeedbackRequest) (r *GetFeedbackResponse, err error)
}

type FeedbackServiceCreateFeedbackArgs struct {
	Request *CreateFeedbackRequest `thrift:"request,1" frugal:"1,default,CreateFeedbackRequest" json:"request"`
}

func NewFeedbackServiceCreateFeedbackArgs() *FeedbackServiceCreateFeedbackArgs {
	return &FeedbackServiceCreateFeedbackArgs{}
}

func (p *FeedbackServiceCreateFeedbackArgs) InitDefault() {
}

var FeedbackServiceCreateFeedbackArgs_Request_DEFAULT *CreateFeedbackRequest

func (p *FeedbackServiceCreateFeedbackArgs) GetRequest() (v *CreateFeedbackRequest) {
	if !p.IsSetRequest() {
		return FeedbackServiceCreateFeedbackArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FeedbackServiceCreateFeedbackArgs) SetRequest(val *CreateFeedbackRequest) {
	p.Request = val
}

func (p *FeedbackServiceCreateFeedbackArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FeedbackServiceCreateFeedbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedbackServiceCreateFeedbackArgs(%+v)", *p)
}

var fieldIDToName_FeedbackServiceCreateFeedbackArgs = map[int16]string{
	1: "request",
}

type FeedbackServiceCreateFeedbackResult struct {
	Success *CreateFeedbackResponse `thrift:"success,0,optional" frugal:"0,optional,CreateFeedbackResponse" json:"success,omitempty"`
}

func NewFeedbackServiceCreateFeedbackResult() *FeedbackServiceCreateFeedbackResult {
	return &FeedbackServiceCreateFeedbackResult{}
}

func (p *FeedbackServiceCreateFeedbackResult) InitDefault() {
}

var FeedbackServiceCreateFeedbackResult_Success_DEFAULT *CreateFeedbackResponse

func (p *FeedbackServiceCreateFeedbackResult) GetSuccess() (v *CreateFeedbackResponse) {
	if !p.IsSetSuccess() {
		return FeedbackServiceCreateFeedbackResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedbackServiceCreateFeedbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFeedbackResponse)
}

func (p *FeedbackServiceCreateFeedbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedbackServiceCreateFeedbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedbackServiceCreateFeedbackResult(%+v)", *p)
}

var fieldIDToName_FeedbackServiceCreateFeedbackResult = map[int16]string{
	0: "success",
}

type FeedbackServiceGetFeedbackArgs struct {
	Request *GetFeedbackRequest `thrift:"request,1" frugal:"1,default,GetFeedbackRequest" json:"request"`
}

func NewFeedbackServiceGetFeedbackArgs() *FeedbackServiceGetFeedbackArgs {
	return &FeedbackServiceGetFeedbackArgs{}
}

func (p *FeedbackServiceGetFeedbackArgs) InitDefault() {
}

var FeedbackServiceGetFeedbackArgs_Request_DEFAULT *GetFeedbackRequest

func (p *FeedbackServiceGetFeedbackArgs) GetRequest() (v *GetFeedbackRequest) {
	if !p.IsSetRequest() {
		return FeedbackServiceGetFeedbackArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FeedbackServiceGetFeedbackArgs) SetRequest(val *GetFeedbackRequest) {
	p.Request = val
}

func (p *FeedbackServiceGetFeedbackArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FeedbackServiceGetFeedbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedbackServiceGetFeedbackArgs(%+v)", *p)
}

var fieldIDToName_FeedbackServiceGetFeedbackArgs = map[int16]string{
	1: "request",
}

type FeedbackServiceGetFeedbackResult struct {
	Success *GetFeedbackResponse `thrift:"success,0,optional" frugal:"0,optional,GetFeedbackResponse" json:"success,omitempty"`
}

func NewFeedbackServiceGetFeedbackResult() *FeedbackServiceGetFeedbackResult {
	return &FeedbackServiceGetFeedbackResult{}
}

func (p *FeedbackServiceGetFeedbackResult) InitDefault() {
}

var FeedbackServiceGetFeedbackResult_Success_DEFAULT *GetFeedbackResponse

func (p *FeedbackServiceGetFeedbackResult) GetSuccess() (v *GetFeedbackResponse) {
	if !p.IsSetSuccess() {
		return FeedbackServiceGetFeedbackResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedbackServiceGetFeedbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFeedbackResponse)
}

func (p *FeedbackServiceGetFeedbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedbackServiceGetFeedbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedbackServiceGetFeedbackResult(%+v)", *p)
}

var fieldIDToName_FeedbackServiceGetFeedbackResult = map[int16]string{
	0: "success",
}
