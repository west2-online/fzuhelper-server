// Code generated by Kitex v0.15.1. DO NOT EDIT.

package launchscreenservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateImage(ctx context.Context, req *api.CreateImageRequest, callOptions ...callopt.Option) (r *api.CreateImageResponse, err error)
	GetImage(ctx context.Context, req *api.GetImageRequest, callOptions ...callopt.Option) (r *api.GetImageResponse, err error)
	ChangeImageProperty(ctx context.Context, req *api.ChangeImagePropertyRequest, callOptions ...callopt.Option) (r *api.ChangeImagePropertyResponse, err error)
	ChangeImage(ctx context.Context, req *api.ChangeImageRequest, callOptions ...callopt.Option) (r *api.ChangeImageResponse, err error)
	DeleteImage(ctx context.Context, req *api.DeleteImageRequest, callOptions ...callopt.Option) (r *api.DeleteImageResponse, err error)
	MobileGetImage(ctx context.Context, req *api.MobileGetImageRequest, callOptions ...callopt.Option) (r *api.MobileGetImageResponse, err error)
	AddImagePointTime(ctx context.Context, req *api.AddImagePointTimeRequest, callOptions ...callopt.Option) (r *api.AddImagePointTimeResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kLaunchScreenServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLaunchScreenServiceClient struct {
	*kClient
}

func (p *kLaunchScreenServiceClient) CreateImage(ctx context.Context, req *api.CreateImageRequest, callOptions ...callopt.Option) (r *api.CreateImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) GetImage(ctx context.Context, req *api.GetImageRequest, callOptions ...callopt.Option) (r *api.GetImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) ChangeImageProperty(ctx context.Context, req *api.ChangeImagePropertyRequest, callOptions ...callopt.Option) (r *api.ChangeImagePropertyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeImageProperty(ctx, req)
}

func (p *kLaunchScreenServiceClient) ChangeImage(ctx context.Context, req *api.ChangeImageRequest, callOptions ...callopt.Option) (r *api.ChangeImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) DeleteImage(ctx context.Context, req *api.DeleteImageRequest, callOptions ...callopt.Option) (r *api.DeleteImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) MobileGetImage(ctx context.Context, req *api.MobileGetImageRequest, callOptions ...callopt.Option) (r *api.MobileGetImageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MobileGetImage(ctx, req)
}

func (p *kLaunchScreenServiceClient) AddImagePointTime(ctx context.Context, req *api.AddImagePointTimeRequest, callOptions ...callopt.Option) (r *api.AddImagePointTimeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddImagePointTime(ctx, req)
}
