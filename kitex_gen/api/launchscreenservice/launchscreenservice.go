/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.11.3. DO NOT EDIT.

package launchscreenservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateImage": kitex.NewMethodInfo(
		createImageHandler,
		newLaunchScreenServiceCreateImageArgs,
		newLaunchScreenServiceCreateImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetImage": kitex.NewMethodInfo(
		getImageHandler,
		newLaunchScreenServiceGetImageArgs,
		newLaunchScreenServiceGetImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeImageProperty": kitex.NewMethodInfo(
		changeImagePropertyHandler,
		newLaunchScreenServiceChangeImagePropertyArgs,
		newLaunchScreenServiceChangeImagePropertyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeImage": kitex.NewMethodInfo(
		changeImageHandler,
		newLaunchScreenServiceChangeImageArgs,
		newLaunchScreenServiceChangeImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteImage": kitex.NewMethodInfo(
		deleteImageHandler,
		newLaunchScreenServiceDeleteImageArgs,
		newLaunchScreenServiceDeleteImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MobileGetImage": kitex.NewMethodInfo(
		mobileGetImageHandler,
		newLaunchScreenServiceMobileGetImageArgs,
		newLaunchScreenServiceMobileGetImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddImagePointTime": kitex.NewMethodInfo(
		addImagePointTimeHandler,
		newLaunchScreenServiceAddImagePointTimeArgs,
		newLaunchScreenServiceAddImagePointTimeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	launchScreenServiceServiceInfo                = NewServiceInfo()
	launchScreenServiceServiceInfoForClient       = NewServiceInfoForClient()
	launchScreenServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LaunchScreenService"
	handlerType := (*api.LaunchScreenService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceCreateImageArgs)
	realResult := result.(*api.LaunchScreenServiceCreateImageResult)
	success, err := handler.(api.LaunchScreenService).CreateImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceCreateImageArgs() interface{} {
	return api.NewLaunchScreenServiceCreateImageArgs()
}

func newLaunchScreenServiceCreateImageResult() interface{} {
	return api.NewLaunchScreenServiceCreateImageResult()
}

func getImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceGetImageArgs)
	realResult := result.(*api.LaunchScreenServiceGetImageResult)
	success, err := handler.(api.LaunchScreenService).GetImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceGetImageArgs() interface{} {
	return api.NewLaunchScreenServiceGetImageArgs()
}

func newLaunchScreenServiceGetImageResult() interface{} {
	return api.NewLaunchScreenServiceGetImageResult()
}

func changeImagePropertyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceChangeImagePropertyArgs)
	realResult := result.(*api.LaunchScreenServiceChangeImagePropertyResult)
	success, err := handler.(api.LaunchScreenService).ChangeImageProperty(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceChangeImagePropertyArgs() interface{} {
	return api.NewLaunchScreenServiceChangeImagePropertyArgs()
}

func newLaunchScreenServiceChangeImagePropertyResult() interface{} {
	return api.NewLaunchScreenServiceChangeImagePropertyResult()
}

func changeImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceChangeImageArgs)
	realResult := result.(*api.LaunchScreenServiceChangeImageResult)
	success, err := handler.(api.LaunchScreenService).ChangeImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceChangeImageArgs() interface{} {
	return api.NewLaunchScreenServiceChangeImageArgs()
}

func newLaunchScreenServiceChangeImageResult() interface{} {
	return api.NewLaunchScreenServiceChangeImageResult()
}

func deleteImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceDeleteImageArgs)
	realResult := result.(*api.LaunchScreenServiceDeleteImageResult)
	success, err := handler.(api.LaunchScreenService).DeleteImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceDeleteImageArgs() interface{} {
	return api.NewLaunchScreenServiceDeleteImageArgs()
}

func newLaunchScreenServiceDeleteImageResult() interface{} {
	return api.NewLaunchScreenServiceDeleteImageResult()
}

func mobileGetImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceMobileGetImageArgs)
	realResult := result.(*api.LaunchScreenServiceMobileGetImageResult)
	success, err := handler.(api.LaunchScreenService).MobileGetImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceMobileGetImageArgs() interface{} {
	return api.NewLaunchScreenServiceMobileGetImageArgs()
}

func newLaunchScreenServiceMobileGetImageResult() interface{} {
	return api.NewLaunchScreenServiceMobileGetImageResult()
}

func addImagePointTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.LaunchScreenServiceAddImagePointTimeArgs)
	realResult := result.(*api.LaunchScreenServiceAddImagePointTimeResult)
	success, err := handler.(api.LaunchScreenService).AddImagePointTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceAddImagePointTimeArgs() interface{} {
	return api.NewLaunchScreenServiceAddImagePointTimeArgs()
}

func newLaunchScreenServiceAddImagePointTimeResult() interface{} {
	return api.NewLaunchScreenServiceAddImagePointTimeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateImage(ctx context.Context, req *api.CreateImageRequest) (r *api.CreateImageResponse, err error) {
	var _args api.LaunchScreenServiceCreateImageArgs
	_args.Req = req
	var _result api.LaunchScreenServiceCreateImageResult
	if err = p.c.Call(ctx, "CreateImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetImage(ctx context.Context, req *api.GetImageRequest) (r *api.GetImageResponse, err error) {
	var _args api.LaunchScreenServiceGetImageArgs
	_args.Req = req
	var _result api.LaunchScreenServiceGetImageResult
	if err = p.c.Call(ctx, "GetImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeImageProperty(ctx context.Context, req *api.ChangeImagePropertyRequest) (r *api.ChangeImagePropertyResponse, err error) {
	var _args api.LaunchScreenServiceChangeImagePropertyArgs
	_args.Req = req
	var _result api.LaunchScreenServiceChangeImagePropertyResult
	if err = p.c.Call(ctx, "ChangeImageProperty", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeImage(ctx context.Context, req *api.ChangeImageRequest) (r *api.ChangeImageResponse, err error) {
	var _args api.LaunchScreenServiceChangeImageArgs
	_args.Req = req
	var _result api.LaunchScreenServiceChangeImageResult
	if err = p.c.Call(ctx, "ChangeImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteImage(ctx context.Context, req *api.DeleteImageRequest) (r *api.DeleteImageResponse, err error) {
	var _args api.LaunchScreenServiceDeleteImageArgs
	_args.Req = req
	var _result api.LaunchScreenServiceDeleteImageResult
	if err = p.c.Call(ctx, "DeleteImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MobileGetImage(ctx context.Context, req *api.MobileGetImageRequest) (r *api.MobileGetImageResponse, err error) {
	var _args api.LaunchScreenServiceMobileGetImageArgs
	_args.Req = req
	var _result api.LaunchScreenServiceMobileGetImageResult
	if err = p.c.Call(ctx, "MobileGetImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddImagePointTime(ctx context.Context, req *api.AddImagePointTimeRequest) (r *api.AddImagePointTimeResponse, err error) {
	var _args api.LaunchScreenServiceAddImagePointTimeArgs
	_args.Req = req
	var _result api.LaunchScreenServiceAddImagePointTimeResult
	if err = p.c.Call(ctx, "AddImagePointTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
