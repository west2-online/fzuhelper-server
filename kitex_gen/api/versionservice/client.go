// Code generated by Kitex v0.15.1. DO NOT EDIT.

package versionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Login(ctx context.Context, req *api.LoginRequest, callOptions ...callopt.Option) (r *api.LoginResponse, err error)
	UploadVersion(ctx context.Context, req *api.UploadRequest, callOptions ...callopt.Option) (r *api.UploadResponse, err error)
	UploadParams(ctx context.Context, req *api.UploadParamsRequest, callOptions ...callopt.Option) (r *api.UploadParamsResponse, err error)
	DownloadReleaseApk(ctx context.Context, req *api.DownloadReleaseApkRequest, callOptions ...callopt.Option) (r *api.DownloadReleaseApkResponse, err error)
	DownloadBetaApk(ctx context.Context, req *api.DownloadBetaApkRequest, callOptions ...callopt.Option) (r *api.DownloadBetaApkResponse, err error)
	GetReleaseVersion(ctx context.Context, req *api.GetReleaseVersionRequest, callOptions ...callopt.Option) (r *api.GetReleaseVersionResponse, err error)
	GetBetaVersion(ctx context.Context, req *api.GetBetaVersionRequest, callOptions ...callopt.Option) (r *api.GetBetaVersionResponse, err error)
	GetSetting(ctx context.Context, req *api.GetSettingRequest, callOptions ...callopt.Option) (r *api.GetSettingResponse, err error)
	GetTest(ctx context.Context, req *api.GetTestRequest, callOptions ...callopt.Option) (r *api.GetTestResponse, err error)
	GetCloud(ctx context.Context, req *api.GetCloudRequest, callOptions ...callopt.Option) (r *api.GetCloudResponse, err error)
	SetCloud(ctx context.Context, req *api.SetCloudRequest, callOptions ...callopt.Option) (r *api.SetCloudResponse, err error)
	GetDump(ctx context.Context, req *api.GetDumpRequest, callOptions ...callopt.Option) (r *api.GetDumpResponse, err error)
	AndroidGetVersion(ctx context.Context, req *api.AndroidGetVersioneRequest, callOptions ...callopt.Option) (r *api.AndroidGetVersionResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVersionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVersionServiceClient struct {
	*kClient
}

func (p *kVersionServiceClient) Login(ctx context.Context, req *api.LoginRequest, callOptions ...callopt.Option) (r *api.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kVersionServiceClient) UploadVersion(ctx context.Context, req *api.UploadRequest, callOptions ...callopt.Option) (r *api.UploadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadVersion(ctx, req)
}

func (p *kVersionServiceClient) UploadParams(ctx context.Context, req *api.UploadParamsRequest, callOptions ...callopt.Option) (r *api.UploadParamsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadParams(ctx, req)
}

func (p *kVersionServiceClient) DownloadReleaseApk(ctx context.Context, req *api.DownloadReleaseApkRequest, callOptions ...callopt.Option) (r *api.DownloadReleaseApkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadReleaseApk(ctx, req)
}

func (p *kVersionServiceClient) DownloadBetaApk(ctx context.Context, req *api.DownloadBetaApkRequest, callOptions ...callopt.Option) (r *api.DownloadBetaApkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadBetaApk(ctx, req)
}

func (p *kVersionServiceClient) GetReleaseVersion(ctx context.Context, req *api.GetReleaseVersionRequest, callOptions ...callopt.Option) (r *api.GetReleaseVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetReleaseVersion(ctx, req)
}

func (p *kVersionServiceClient) GetBetaVersion(ctx context.Context, req *api.GetBetaVersionRequest, callOptions ...callopt.Option) (r *api.GetBetaVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBetaVersion(ctx, req)
}

func (p *kVersionServiceClient) GetSetting(ctx context.Context, req *api.GetSettingRequest, callOptions ...callopt.Option) (r *api.GetSettingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSetting(ctx, req)
}

func (p *kVersionServiceClient) GetTest(ctx context.Context, req *api.GetTestRequest, callOptions ...callopt.Option) (r *api.GetTestResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTest(ctx, req)
}

func (p *kVersionServiceClient) GetCloud(ctx context.Context, req *api.GetCloudRequest, callOptions ...callopt.Option) (r *api.GetCloudResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCloud(ctx, req)
}

func (p *kVersionServiceClient) SetCloud(ctx context.Context, req *api.SetCloudRequest, callOptions ...callopt.Option) (r *api.SetCloudResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetCloud(ctx, req)
}

func (p *kVersionServiceClient) GetDump(ctx context.Context, req *api.GetDumpRequest, callOptions ...callopt.Option) (r *api.GetDumpResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDump(ctx, req)
}

func (p *kVersionServiceClient) AndroidGetVersion(ctx context.Context, req *api.AndroidGetVersioneRequest, callOptions ...callopt.Option) (r *api.AndroidGetVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AndroidGetVersion(ctx, req)
}
