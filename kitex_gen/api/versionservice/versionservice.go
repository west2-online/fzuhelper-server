// Code generated by Kitex v0.15.1. DO NOT EDIT.

package versionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newVersionServiceLoginArgs,
		newVersionServiceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadVersion": kitex.NewMethodInfo(
		uploadVersionHandler,
		newVersionServiceUploadVersionArgs,
		newVersionServiceUploadVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadParams": kitex.NewMethodInfo(
		uploadParamsHandler,
		newVersionServiceUploadParamsArgs,
		newVersionServiceUploadParamsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DownloadReleaseApk": kitex.NewMethodInfo(
		downloadReleaseApkHandler,
		newVersionServiceDownloadReleaseApkArgs,
		newVersionServiceDownloadReleaseApkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DownloadBetaApk": kitex.NewMethodInfo(
		downloadBetaApkHandler,
		newVersionServiceDownloadBetaApkArgs,
		newVersionServiceDownloadBetaApkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetReleaseVersion": kitex.NewMethodInfo(
		getReleaseVersionHandler,
		newVersionServiceGetReleaseVersionArgs,
		newVersionServiceGetReleaseVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetBetaVersion": kitex.NewMethodInfo(
		getBetaVersionHandler,
		newVersionServiceGetBetaVersionArgs,
		newVersionServiceGetBetaVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSetting": kitex.NewMethodInfo(
		getSettingHandler,
		newVersionServiceGetSettingArgs,
		newVersionServiceGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTest": kitex.NewMethodInfo(
		getTestHandler,
		newVersionServiceGetTestArgs,
		newVersionServiceGetTestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCloud": kitex.NewMethodInfo(
		getCloudHandler,
		newVersionServiceGetCloudArgs,
		newVersionServiceGetCloudResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetCloud": kitex.NewMethodInfo(
		setCloudHandler,
		newVersionServiceSetCloudArgs,
		newVersionServiceSetCloudResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDump": kitex.NewMethodInfo(
		getDumpHandler,
		newVersionServiceGetDumpArgs,
		newVersionServiceGetDumpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AndroidGetVersion": kitex.NewMethodInfo(
		androidGetVersionHandler,
		newVersionServiceAndroidGetVersionArgs,
		newVersionServiceAndroidGetVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	versionServiceServiceInfo                = NewServiceInfo()
	versionServiceServiceInfoForClient       = NewServiceInfoForClient()
	versionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return versionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return versionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return versionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VersionService"
	handlerType := (*api.VersionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceLoginArgs)
	realResult := result.(*api.VersionServiceLoginResult)
	success, err := handler.(api.VersionService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceLoginArgs() interface{} {
	return api.NewVersionServiceLoginArgs()
}

func newVersionServiceLoginResult() interface{} {
	return api.NewVersionServiceLoginResult()
}

func uploadVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceUploadVersionArgs)
	realResult := result.(*api.VersionServiceUploadVersionResult)
	success, err := handler.(api.VersionService).UploadVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceUploadVersionArgs() interface{} {
	return api.NewVersionServiceUploadVersionArgs()
}

func newVersionServiceUploadVersionResult() interface{} {
	return api.NewVersionServiceUploadVersionResult()
}

func uploadParamsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceUploadParamsArgs)
	realResult := result.(*api.VersionServiceUploadParamsResult)
	success, err := handler.(api.VersionService).UploadParams(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceUploadParamsArgs() interface{} {
	return api.NewVersionServiceUploadParamsArgs()
}

func newVersionServiceUploadParamsResult() interface{} {
	return api.NewVersionServiceUploadParamsResult()
}

func downloadReleaseApkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceDownloadReleaseApkArgs)
	realResult := result.(*api.VersionServiceDownloadReleaseApkResult)
	success, err := handler.(api.VersionService).DownloadReleaseApk(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceDownloadReleaseApkArgs() interface{} {
	return api.NewVersionServiceDownloadReleaseApkArgs()
}

func newVersionServiceDownloadReleaseApkResult() interface{} {
	return api.NewVersionServiceDownloadReleaseApkResult()
}

func downloadBetaApkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceDownloadBetaApkArgs)
	realResult := result.(*api.VersionServiceDownloadBetaApkResult)
	success, err := handler.(api.VersionService).DownloadBetaApk(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceDownloadBetaApkArgs() interface{} {
	return api.NewVersionServiceDownloadBetaApkArgs()
}

func newVersionServiceDownloadBetaApkResult() interface{} {
	return api.NewVersionServiceDownloadBetaApkResult()
}

func getReleaseVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetReleaseVersionArgs)
	realResult := result.(*api.VersionServiceGetReleaseVersionResult)
	success, err := handler.(api.VersionService).GetReleaseVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetReleaseVersionArgs() interface{} {
	return api.NewVersionServiceGetReleaseVersionArgs()
}

func newVersionServiceGetReleaseVersionResult() interface{} {
	return api.NewVersionServiceGetReleaseVersionResult()
}

func getBetaVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetBetaVersionArgs)
	realResult := result.(*api.VersionServiceGetBetaVersionResult)
	success, err := handler.(api.VersionService).GetBetaVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetBetaVersionArgs() interface{} {
	return api.NewVersionServiceGetBetaVersionArgs()
}

func newVersionServiceGetBetaVersionResult() interface{} {
	return api.NewVersionServiceGetBetaVersionResult()
}

func getSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetSettingArgs)
	realResult := result.(*api.VersionServiceGetSettingResult)
	success, err := handler.(api.VersionService).GetSetting(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetSettingArgs() interface{} {
	return api.NewVersionServiceGetSettingArgs()
}

func newVersionServiceGetSettingResult() interface{} {
	return api.NewVersionServiceGetSettingResult()
}

func getTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetTestArgs)
	realResult := result.(*api.VersionServiceGetTestResult)
	success, err := handler.(api.VersionService).GetTest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetTestArgs() interface{} {
	return api.NewVersionServiceGetTestArgs()
}

func newVersionServiceGetTestResult() interface{} {
	return api.NewVersionServiceGetTestResult()
}

func getCloudHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetCloudArgs)
	realResult := result.(*api.VersionServiceGetCloudResult)
	success, err := handler.(api.VersionService).GetCloud(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetCloudArgs() interface{} {
	return api.NewVersionServiceGetCloudArgs()
}

func newVersionServiceGetCloudResult() interface{} {
	return api.NewVersionServiceGetCloudResult()
}

func setCloudHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceSetCloudArgs)
	realResult := result.(*api.VersionServiceSetCloudResult)
	success, err := handler.(api.VersionService).SetCloud(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceSetCloudArgs() interface{} {
	return api.NewVersionServiceSetCloudArgs()
}

func newVersionServiceSetCloudResult() interface{} {
	return api.NewVersionServiceSetCloudResult()
}

func getDumpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceGetDumpArgs)
	realResult := result.(*api.VersionServiceGetDumpResult)
	success, err := handler.(api.VersionService).GetDump(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceGetDumpArgs() interface{} {
	return api.NewVersionServiceGetDumpArgs()
}

func newVersionServiceGetDumpResult() interface{} {
	return api.NewVersionServiceGetDumpResult()
}

func androidGetVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.VersionServiceAndroidGetVersionArgs)
	realResult := result.(*api.VersionServiceAndroidGetVersionResult)
	success, err := handler.(api.VersionService).AndroidGetVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVersionServiceAndroidGetVersionArgs() interface{} {
	return api.NewVersionServiceAndroidGetVersionArgs()
}

func newVersionServiceAndroidGetVersionResult() interface{} {
	return api.NewVersionServiceAndroidGetVersionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *api.LoginRequest) (r *api.LoginResponse, err error) {
	var _args api.VersionServiceLoginArgs
	_args.Req = req
	var _result api.VersionServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadVersion(ctx context.Context, req *api.UploadRequest) (r *api.UploadResponse, err error) {
	var _args api.VersionServiceUploadVersionArgs
	_args.Req = req
	var _result api.VersionServiceUploadVersionResult
	if err = p.c.Call(ctx, "UploadVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadParams(ctx context.Context, req *api.UploadParamsRequest) (r *api.UploadParamsResponse, err error) {
	var _args api.VersionServiceUploadParamsArgs
	_args.Req = req
	var _result api.VersionServiceUploadParamsResult
	if err = p.c.Call(ctx, "UploadParams", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadReleaseApk(ctx context.Context, req *api.DownloadReleaseApkRequest) (r *api.DownloadReleaseApkResponse, err error) {
	var _args api.VersionServiceDownloadReleaseApkArgs
	_args.Req = req
	var _result api.VersionServiceDownloadReleaseApkResult
	if err = p.c.Call(ctx, "DownloadReleaseApk", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadBetaApk(ctx context.Context, req *api.DownloadBetaApkRequest) (r *api.DownloadBetaApkResponse, err error) {
	var _args api.VersionServiceDownloadBetaApkArgs
	_args.Req = req
	var _result api.VersionServiceDownloadBetaApkResult
	if err = p.c.Call(ctx, "DownloadBetaApk", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetReleaseVersion(ctx context.Context, req *api.GetReleaseVersionRequest) (r *api.GetReleaseVersionResponse, err error) {
	var _args api.VersionServiceGetReleaseVersionArgs
	_args.Req = req
	var _result api.VersionServiceGetReleaseVersionResult
	if err = p.c.Call(ctx, "GetReleaseVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBetaVersion(ctx context.Context, req *api.GetBetaVersionRequest) (r *api.GetBetaVersionResponse, err error) {
	var _args api.VersionServiceGetBetaVersionArgs
	_args.Req = req
	var _result api.VersionServiceGetBetaVersionResult
	if err = p.c.Call(ctx, "GetBetaVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSetting(ctx context.Context, req *api.GetSettingRequest) (r *api.GetSettingResponse, err error) {
	var _args api.VersionServiceGetSettingArgs
	_args.Req = req
	var _result api.VersionServiceGetSettingResult
	if err = p.c.Call(ctx, "GetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTest(ctx context.Context, req *api.GetTestRequest) (r *api.GetTestResponse, err error) {
	var _args api.VersionServiceGetTestArgs
	_args.Req = req
	var _result api.VersionServiceGetTestResult
	if err = p.c.Call(ctx, "GetTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCloud(ctx context.Context, req *api.GetCloudRequest) (r *api.GetCloudResponse, err error) {
	var _args api.VersionServiceGetCloudArgs
	_args.Req = req
	var _result api.VersionServiceGetCloudResult
	if err = p.c.Call(ctx, "GetCloud", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCloud(ctx context.Context, req *api.SetCloudRequest) (r *api.SetCloudResponse, err error) {
	var _args api.VersionServiceSetCloudArgs
	_args.Req = req
	var _result api.VersionServiceSetCloudResult
	if err = p.c.Call(ctx, "SetCloud", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDump(ctx context.Context, req *api.GetDumpRequest) (r *api.GetDumpResponse, err error) {
	var _args api.VersionServiceGetDumpArgs
	_args.Req = req
	var _result api.VersionServiceGetDumpResult
	if err = p.c.Call(ctx, "GetDump", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AndroidGetVersion(ctx context.Context, req *api.AndroidGetVersioneRequest) (r *api.AndroidGetVersionResponse, err error) {
	var _args api.VersionServiceAndroidGetVersionArgs
	_args.Req = req
	var _result api.VersionServiceAndroidGetVersionResult
	if err = p.c.Call(ctx, "AndroidGetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
