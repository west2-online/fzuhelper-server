// Code generated by Kitex v0.15.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetLoginData": kitex.NewMethodInfo(
		getLoginDataHandler,
		newUserServiceGetLoginDataArgs,
		newUserServiceGetLoginDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetGetLoginDataForYJSY": kitex.NewMethodInfo(
		getGetLoginDataForYJSYHandler,
		newUserServiceGetGetLoginDataForYJSYArgs,
		newUserServiceGetGetLoginDataForYJSYResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ValidateCode": kitex.NewMethodInfo(
		validateCodeHandler,
		newUserServiceValidateCodeArgs,
		newUserServiceValidateCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ValidateCodeForAndroid": kitex.NewMethodInfo(
		validateCodeForAndroidHandler,
		newUserServiceValidateCodeForAndroidArgs,
		newUserServiceValidateCodeForAndroidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetToken": kitex.NewMethodInfo(
		getTokenHandler,
		newUserServiceGetTokenArgs,
		newUserServiceGetTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RefreshToken": kitex.NewMethodInfo(
		refreshTokenHandler,
		newUserServiceRefreshTokenArgs,
		newUserServiceRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"TestAuth": kitex.NewMethodInfo(
		testAuthHandler,
		newUserServiceTestAuthArgs,
		newUserServiceTestAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newUserServiceGetUserInfoArgs,
		newUserServiceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*api.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getLoginDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceGetLoginDataArgs)
	realResult := result.(*api.UserServiceGetLoginDataResult)
	success, err := handler.(api.UserService).GetLoginData(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetLoginDataArgs() interface{} {
	return api.NewUserServiceGetLoginDataArgs()
}

func newUserServiceGetLoginDataResult() interface{} {
	return api.NewUserServiceGetLoginDataResult()
}

func getGetLoginDataForYJSYHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceGetGetLoginDataForYJSYArgs)
	realResult := result.(*api.UserServiceGetGetLoginDataForYJSYResult)
	success, err := handler.(api.UserService).GetGetLoginDataForYJSY(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetGetLoginDataForYJSYArgs() interface{} {
	return api.NewUserServiceGetGetLoginDataForYJSYArgs()
}

func newUserServiceGetGetLoginDataForYJSYResult() interface{} {
	return api.NewUserServiceGetGetLoginDataForYJSYResult()
}

func validateCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceValidateCodeArgs)
	realResult := result.(*api.UserServiceValidateCodeResult)
	success, err := handler.(api.UserService).ValidateCode(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceValidateCodeArgs() interface{} {
	return api.NewUserServiceValidateCodeArgs()
}

func newUserServiceValidateCodeResult() interface{} {
	return api.NewUserServiceValidateCodeResult()
}

func validateCodeForAndroidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceValidateCodeForAndroidArgs)
	realResult := result.(*api.UserServiceValidateCodeForAndroidResult)
	success, err := handler.(api.UserService).ValidateCodeForAndroid(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceValidateCodeForAndroidArgs() interface{} {
	return api.NewUserServiceValidateCodeForAndroidArgs()
}

func newUserServiceValidateCodeForAndroidResult() interface{} {
	return api.NewUserServiceValidateCodeForAndroidResult()
}

func getTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceGetTokenArgs)
	realResult := result.(*api.UserServiceGetTokenResult)
	success, err := handler.(api.UserService).GetToken(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetTokenArgs() interface{} {
	return api.NewUserServiceGetTokenArgs()
}

func newUserServiceGetTokenResult() interface{} {
	return api.NewUserServiceGetTokenResult()
}

func refreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceRefreshTokenArgs)
	realResult := result.(*api.UserServiceRefreshTokenResult)
	success, err := handler.(api.UserService).RefreshToken(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRefreshTokenArgs() interface{} {
	return api.NewUserServiceRefreshTokenArgs()
}

func newUserServiceRefreshTokenResult() interface{} {
	return api.NewUserServiceRefreshTokenResult()
}

func testAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceTestAuthArgs)
	realResult := result.(*api.UserServiceTestAuthResult)
	success, err := handler.(api.UserService).TestAuth(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceTestAuthArgs() interface{} {
	return api.NewUserServiceTestAuthArgs()
}

func newUserServiceTestAuthResult() interface{} {
	return api.NewUserServiceTestAuthResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceGetUserInfoArgs)
	realResult := result.(*api.UserServiceGetUserInfoResult)
	success, err := handler.(api.UserService).GetUserInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserInfoArgs() interface{} {
	return api.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return api.NewUserServiceGetUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetLoginData(ctx context.Context, request *api.GetLoginDataRequest) (r *api.GetLoginDataResponse, err error) {
	var _args api.UserServiceGetLoginDataArgs
	_args.Request = request
	var _result api.UserServiceGetLoginDataResult
	if err = p.c.Call(ctx, "GetLoginData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGetLoginDataForYJSY(ctx context.Context, request *api.GetLoginDataForYJSYRequest) (r *api.GetLoginDataForYJSYResponse, err error) {
	var _args api.UserServiceGetGetLoginDataForYJSYArgs
	_args.Request = request
	var _result api.UserServiceGetGetLoginDataForYJSYResult
	if err = p.c.Call(ctx, "GetGetLoginDataForYJSY", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ValidateCode(ctx context.Context, request *api.ValidateCodeRequest) (r *api.ValidateCodeResponse, err error) {
	var _args api.UserServiceValidateCodeArgs
	_args.Request = request
	var _result api.UserServiceValidateCodeResult
	if err = p.c.Call(ctx, "ValidateCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ValidateCodeForAndroid(ctx context.Context, request *api.ValidateCodeForAndroidRequest) (r *api.ValidateCodeForAndroidResponse, err error) {
	var _args api.UserServiceValidateCodeForAndroidArgs
	_args.Request = request
	var _result api.UserServiceValidateCodeForAndroidResult
	if err = p.c.Call(ctx, "ValidateCodeForAndroid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToken(ctx context.Context, request *api.GetAccessTokenRequest) (r *api.GetAccessTokenResponse, err error) {
	var _args api.UserServiceGetTokenArgs
	_args.Request = request
	var _result api.UserServiceGetTokenResult
	if err = p.c.Call(ctx, "GetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshToken(ctx context.Context, request *api.RefreshTokenRequest) (r *api.RefreshTokenResponse, err error) {
	var _args api.UserServiceRefreshTokenArgs
	_args.Request = request
	var _result api.UserServiceRefreshTokenResult
	if err = p.c.Call(ctx, "RefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestAuth(ctx context.Context, request *api.TestAuthRequest) (r *api.TestAuthResponse, err error) {
	var _args api.UserServiceTestAuthArgs
	_args.Request = request
	var _result api.UserServiceTestAuthResult
	if err = p.c.Call(ctx, "TestAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, request *api.GetUserInfoRequest) (r *api.GetUserInfoResponse, err error) {
	var _args api.UserServiceGetUserInfoArgs
	_args.Request = request
	var _result api.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
