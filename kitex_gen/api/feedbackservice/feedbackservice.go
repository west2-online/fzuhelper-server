// Code generated by Kitex v0.15.1. DO NOT EDIT.

package feedbackservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateFeedback": kitex.NewMethodInfo(
		createFeedbackHandler,
		newFeedbackServiceCreateFeedbackArgs,
		newFeedbackServiceCreateFeedbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFeedback": kitex.NewMethodInfo(
		getFeedbackHandler,
		newFeedbackServiceGetFeedbackArgs,
		newFeedbackServiceGetFeedbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	feedbackServiceServiceInfo                = NewServiceInfo()
	feedbackServiceServiceInfoForClient       = NewServiceInfoForClient()
	feedbackServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return feedbackServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return feedbackServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return feedbackServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FeedbackService"
	handlerType := (*api.FeedbackService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createFeedbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.FeedbackServiceCreateFeedbackArgs)
	realResult := result.(*api.FeedbackServiceCreateFeedbackResult)
	success, err := handler.(api.FeedbackService).CreateFeedback(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedbackServiceCreateFeedbackArgs() interface{} {
	return api.NewFeedbackServiceCreateFeedbackArgs()
}

func newFeedbackServiceCreateFeedbackResult() interface{} {
	return api.NewFeedbackServiceCreateFeedbackResult()
}

func getFeedbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.FeedbackServiceGetFeedbackArgs)
	realResult := result.(*api.FeedbackServiceGetFeedbackResult)
	success, err := handler.(api.FeedbackService).GetFeedback(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedbackServiceGetFeedbackArgs() interface{} {
	return api.NewFeedbackServiceGetFeedbackArgs()
}

func newFeedbackServiceGetFeedbackResult() interface{} {
	return api.NewFeedbackServiceGetFeedbackResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateFeedback(ctx context.Context, request *api.CreateFeedbackRequest) (r *api.CreateFeedbackResponse, err error) {
	var _args api.FeedbackServiceCreateFeedbackArgs
	_args.Request = request
	var _result api.FeedbackServiceCreateFeedbackResult
	if err = p.c.Call(ctx, "CreateFeedback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeedback(ctx context.Context, request *api.GetFeedbackRequest) (r *api.GetFeedbackResponse, err error) {
	var _args api.FeedbackServiceGetFeedbackArgs
	_args.Request = request
	var _result api.FeedbackServiceGetFeedbackResult
	if err = p.c.Call(ctx, "GetFeedback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
