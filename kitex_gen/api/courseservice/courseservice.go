// Code generated by Kitex v0.15.1. DO NOT EDIT.

package courseservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetCourseList": kitex.NewMethodInfo(
		getCourseListHandler,
		newCourseServiceGetCourseListArgs,
		newCourseServiceGetCourseListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTermList": kitex.NewMethodInfo(
		getTermListHandler,
		newCourseServiceGetTermListArgs,
		newCourseServiceGetTermListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCalendar": kitex.NewMethodInfo(
		getCalendarHandler,
		newCourseServiceGetCalendarArgs,
		newCourseServiceGetCalendarResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SubscribeCalendar": kitex.NewMethodInfo(
		subscribeCalendarHandler,
		newCourseServiceSubscribeCalendarArgs,
		newCourseServiceSubscribeCalendarResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLocateDate": kitex.NewMethodInfo(
		getLocateDateHandler,
		newCourseServiceGetLocateDateArgs,
		newCourseServiceGetLocateDateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	courseServiceServiceInfo                = NewServiceInfo()
	courseServiceServiceInfoForClient       = NewServiceInfoForClient()
	courseServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return courseServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return courseServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return courseServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CourseService"
	handlerType := (*api.CourseService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getCourseListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CourseServiceGetCourseListArgs)
	realResult := result.(*api.CourseServiceGetCourseListResult)
	success, err := handler.(api.CourseService).GetCourseList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCourseServiceGetCourseListArgs() interface{} {
	return api.NewCourseServiceGetCourseListArgs()
}

func newCourseServiceGetCourseListResult() interface{} {
	return api.NewCourseServiceGetCourseListResult()
}

func getTermListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CourseServiceGetTermListArgs)
	realResult := result.(*api.CourseServiceGetTermListResult)
	success, err := handler.(api.CourseService).GetTermList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCourseServiceGetTermListArgs() interface{} {
	return api.NewCourseServiceGetTermListArgs()
}

func newCourseServiceGetTermListResult() interface{} {
	return api.NewCourseServiceGetTermListResult()
}

func getCalendarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CourseServiceGetCalendarArgs)
	realResult := result.(*api.CourseServiceGetCalendarResult)
	success, err := handler.(api.CourseService).GetCalendar(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCourseServiceGetCalendarArgs() interface{} {
	return api.NewCourseServiceGetCalendarArgs()
}

func newCourseServiceGetCalendarResult() interface{} {
	return api.NewCourseServiceGetCalendarResult()
}

func subscribeCalendarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CourseServiceSubscribeCalendarArgs)
	realResult := result.(*api.CourseServiceSubscribeCalendarResult)
	success, err := handler.(api.CourseService).SubscribeCalendar(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCourseServiceSubscribeCalendarArgs() interface{} {
	return api.NewCourseServiceSubscribeCalendarArgs()
}

func newCourseServiceSubscribeCalendarResult() interface{} {
	return api.NewCourseServiceSubscribeCalendarResult()
}

func getLocateDateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CourseServiceGetLocateDateArgs)
	realResult := result.(*api.CourseServiceGetLocateDateResult)
	success, err := handler.(api.CourseService).GetLocateDate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCourseServiceGetLocateDateArgs() interface{} {
	return api.NewCourseServiceGetLocateDateArgs()
}

func newCourseServiceGetLocateDateResult() interface{} {
	return api.NewCourseServiceGetLocateDateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCourseList(ctx context.Context, req *api.CourseListRequest) (r *api.CourseListResponse, err error) {
	var _args api.CourseServiceGetCourseListArgs
	_args.Req = req
	var _result api.CourseServiceGetCourseListResult
	if err = p.c.Call(ctx, "GetCourseList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTermList(ctx context.Context, req *api.CourseTermListRequest) (r *api.CourseTermListResponse, err error) {
	var _args api.CourseServiceGetTermListArgs
	_args.Req = req
	var _result api.CourseServiceGetTermListResult
	if err = p.c.Call(ctx, "GetTermList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCalendar(ctx context.Context, req *api.GetCalendarTokenRequest) (r *api.GetCalendarTokenResponse, err error) {
	var _args api.CourseServiceGetCalendarArgs
	_args.Req = req
	var _result api.CourseServiceGetCalendarResult
	if err = p.c.Call(ctx, "GetCalendar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubscribeCalendar(ctx context.Context, req *api.SubscribeCalendarRequest) (r *api.SubscribeCalendarResponse, err error) {
	var _args api.CourseServiceSubscribeCalendarArgs
	_args.Req = req
	var _result api.CourseServiceSubscribeCalendarResult
	if err = p.c.Call(ctx, "SubscribeCalendar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLocateDate(ctx context.Context, req *api.GetLocateDateRequest) (r *api.GetLocateDateResponse, err error) {
	var _args api.CourseServiceGetLocateDateArgs
	_args.Req = req
	var _result api.CourseServiceGetLocateDateResult
	if err = p.c.Call(ctx, "GetLocateDate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
