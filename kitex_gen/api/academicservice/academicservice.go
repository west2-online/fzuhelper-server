// Code generated by Kitex v0.15.1. DO NOT EDIT.

package academicservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetScores": kitex.NewMethodInfo(
		getScoresHandler,
		newAcademicServiceGetScoresArgs,
		newAcademicServiceGetScoresResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetGPA": kitex.NewMethodInfo(
		getGPAHandler,
		newAcademicServiceGetGPAArgs,
		newAcademicServiceGetGPAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCredit": kitex.NewMethodInfo(
		getCreditHandler,
		newAcademicServiceGetCreditArgs,
		newAcademicServiceGetCreditResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUnifiedExam": kitex.NewMethodInfo(
		getUnifiedExamHandler,
		newAcademicServiceGetUnifiedExamArgs,
		newAcademicServiceGetUnifiedExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPlan": kitex.NewMethodInfo(
		getPlanHandler,
		newAcademicServiceGetPlanArgs,
		newAcademicServiceGetPlanResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	academicServiceServiceInfo                = NewServiceInfo()
	academicServiceServiceInfoForClient       = NewServiceInfoForClient()
	academicServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return academicServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return academicServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return academicServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AcademicService"
	handlerType := (*api.AcademicService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getScoresHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AcademicServiceGetScoresArgs)
	realResult := result.(*api.AcademicServiceGetScoresResult)
	success, err := handler.(api.AcademicService).GetScores(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetScoresArgs() interface{} {
	return api.NewAcademicServiceGetScoresArgs()
}

func newAcademicServiceGetScoresResult() interface{} {
	return api.NewAcademicServiceGetScoresResult()
}

func getGPAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AcademicServiceGetGPAArgs)
	realResult := result.(*api.AcademicServiceGetGPAResult)
	success, err := handler.(api.AcademicService).GetGPA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetGPAArgs() interface{} {
	return api.NewAcademicServiceGetGPAArgs()
}

func newAcademicServiceGetGPAResult() interface{} {
	return api.NewAcademicServiceGetGPAResult()
}

func getCreditHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AcademicServiceGetCreditArgs)
	realResult := result.(*api.AcademicServiceGetCreditResult)
	success, err := handler.(api.AcademicService).GetCredit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetCreditArgs() interface{} {
	return api.NewAcademicServiceGetCreditArgs()
}

func newAcademicServiceGetCreditResult() interface{} {
	return api.NewAcademicServiceGetCreditResult()
}

func getUnifiedExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AcademicServiceGetUnifiedExamArgs)
	realResult := result.(*api.AcademicServiceGetUnifiedExamResult)
	success, err := handler.(api.AcademicService).GetUnifiedExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetUnifiedExamArgs() interface{} {
	return api.NewAcademicServiceGetUnifiedExamArgs()
}

func newAcademicServiceGetUnifiedExamResult() interface{} {
	return api.NewAcademicServiceGetUnifiedExamResult()
}

func getPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AcademicServiceGetPlanArgs)
	realResult := result.(*api.AcademicServiceGetPlanResult)
	success, err := handler.(api.AcademicService).GetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetPlanArgs() interface{} {
	return api.NewAcademicServiceGetPlanArgs()
}

func newAcademicServiceGetPlanResult() interface{} {
	return api.NewAcademicServiceGetPlanResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetScores(ctx context.Context, req *api.GetScoresRequest) (r *api.GetScoresResponse, err error) {
	var _args api.AcademicServiceGetScoresArgs
	_args.Req = req
	var _result api.AcademicServiceGetScoresResult
	if err = p.c.Call(ctx, "GetScores", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGPA(ctx context.Context, req *api.GetGPARequest) (r *api.GetGPAResponse, err error) {
	var _args api.AcademicServiceGetGPAArgs
	_args.Req = req
	var _result api.AcademicServiceGetGPAResult
	if err = p.c.Call(ctx, "GetGPA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCredit(ctx context.Context, req *api.GetCreditRequest) (r *api.GetCreditResponse, err error) {
	var _args api.AcademicServiceGetCreditArgs
	_args.Req = req
	var _result api.AcademicServiceGetCreditResult
	if err = p.c.Call(ctx, "GetCredit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUnifiedExam(ctx context.Context, req *api.GetUnifiedExamRequest) (r *api.GetUnifiedExamResponse, err error) {
	var _args api.AcademicServiceGetUnifiedExamArgs
	_args.Req = req
	var _result api.AcademicServiceGetUnifiedExamResult
	if err = p.c.Call(ctx, "GetUnifiedExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPlan(ctx context.Context, req *api.GetPlanRequest) (r *api.GetPlanResponse, err error) {
	var _args api.AcademicServiceGetPlanArgs
	_args.Req = req
	var _result api.AcademicServiceGetPlanResult
	if err = p.c.Call(ctx, "GetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
