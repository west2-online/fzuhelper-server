// Code generated by Kitex v0.15.1. DO NOT EDIT.

package commonservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetCSS": kitex.NewMethodInfo(
		getCSSHandler,
		newCommonServiceGetCSSArgs,
		newCommonServiceGetCSSResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHtml": kitex.NewMethodInfo(
		getHtmlHandler,
		newCommonServiceGetHtmlArgs,
		newCommonServiceGetHtmlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserAgreement": kitex.NewMethodInfo(
		getUserAgreementHandler,
		newCommonServiceGetUserAgreementArgs,
		newCommonServiceGetUserAgreementResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTermsList": kitex.NewMethodInfo(
		getTermsListHandler,
		newCommonServiceGetTermsListArgs,
		newCommonServiceGetTermsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTerm": kitex.NewMethodInfo(
		getTermHandler,
		newCommonServiceGetTermArgs,
		newCommonServiceGetTermResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetNotice": kitex.NewMethodInfo(
		getNoticeHandler,
		newCommonServiceGetNoticeArgs,
		newCommonServiceGetNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetContributorInfo": kitex.NewMethodInfo(
		getContributorInfoHandler,
		newCommonServiceGetContributorInfoArgs,
		newCommonServiceGetContributorInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetToolboxConfig": kitex.NewMethodInfo(
		getToolboxConfigHandler,
		newCommonServiceGetToolboxConfigArgs,
		newCommonServiceGetToolboxConfigResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PutToolboxConfig": kitex.NewMethodInfo(
		putToolboxConfigHandler,
		newCommonServicePutToolboxConfigArgs,
		newCommonServicePutToolboxConfigResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	commonServiceServiceInfo                = NewServiceInfo()
	commonServiceServiceInfoForClient       = NewServiceInfoForClient()
	commonServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commonServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commonServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commonServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommonService"
	handlerType := (*api.CommonService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getCSSHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetCSSArgs)
	realResult := result.(*api.CommonServiceGetCSSResult)
	success, err := handler.(api.CommonService).GetCSS(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetCSSArgs() interface{} {
	return api.NewCommonServiceGetCSSArgs()
}

func newCommonServiceGetCSSResult() interface{} {
	return api.NewCommonServiceGetCSSResult()
}

func getHtmlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetHtmlArgs)
	realResult := result.(*api.CommonServiceGetHtmlResult)
	success, err := handler.(api.CommonService).GetHtml(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetHtmlArgs() interface{} {
	return api.NewCommonServiceGetHtmlArgs()
}

func newCommonServiceGetHtmlResult() interface{} {
	return api.NewCommonServiceGetHtmlResult()
}

func getUserAgreementHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetUserAgreementArgs)
	realResult := result.(*api.CommonServiceGetUserAgreementResult)
	success, err := handler.(api.CommonService).GetUserAgreement(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetUserAgreementArgs() interface{} {
	return api.NewCommonServiceGetUserAgreementArgs()
}

func newCommonServiceGetUserAgreementResult() interface{} {
	return api.NewCommonServiceGetUserAgreementResult()
}

func getTermsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetTermsListArgs)
	realResult := result.(*api.CommonServiceGetTermsListResult)
	success, err := handler.(api.CommonService).GetTermsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetTermsListArgs() interface{} {
	return api.NewCommonServiceGetTermsListArgs()
}

func newCommonServiceGetTermsListResult() interface{} {
	return api.NewCommonServiceGetTermsListResult()
}

func getTermHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetTermArgs)
	realResult := result.(*api.CommonServiceGetTermResult)
	success, err := handler.(api.CommonService).GetTerm(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetTermArgs() interface{} {
	return api.NewCommonServiceGetTermArgs()
}

func newCommonServiceGetTermResult() interface{} {
	return api.NewCommonServiceGetTermResult()
}

func getNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetNoticeArgs)
	realResult := result.(*api.CommonServiceGetNoticeResult)
	success, err := handler.(api.CommonService).GetNotice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetNoticeArgs() interface{} {
	return api.NewCommonServiceGetNoticeArgs()
}

func newCommonServiceGetNoticeResult() interface{} {
	return api.NewCommonServiceGetNoticeResult()
}

func getContributorInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetContributorInfoArgs)
	realResult := result.(*api.CommonServiceGetContributorInfoResult)
	success, err := handler.(api.CommonService).GetContributorInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetContributorInfoArgs() interface{} {
	return api.NewCommonServiceGetContributorInfoArgs()
}

func newCommonServiceGetContributorInfoResult() interface{} {
	return api.NewCommonServiceGetContributorInfoResult()
}

func getToolboxConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServiceGetToolboxConfigArgs)
	realResult := result.(*api.CommonServiceGetToolboxConfigResult)
	success, err := handler.(api.CommonService).GetToolboxConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetToolboxConfigArgs() interface{} {
	return api.NewCommonServiceGetToolboxConfigArgs()
}

func newCommonServiceGetToolboxConfigResult() interface{} {
	return api.NewCommonServiceGetToolboxConfigResult()
}

func putToolboxConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommonServicePutToolboxConfigArgs)
	realResult := result.(*api.CommonServicePutToolboxConfigResult)
	success, err := handler.(api.CommonService).PutToolboxConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServicePutToolboxConfigArgs() interface{} {
	return api.NewCommonServicePutToolboxConfigArgs()
}

func newCommonServicePutToolboxConfigResult() interface{} {
	return api.NewCommonServicePutToolboxConfigResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCSS(ctx context.Context, req *api.GetCSSRequest) (r *api.GetCSSResponse, err error) {
	var _args api.CommonServiceGetCSSArgs
	_args.Req = req
	var _result api.CommonServiceGetCSSResult
	if err = p.c.Call(ctx, "GetCSS", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHtml(ctx context.Context, req *api.GetHtmlRequest) (r *api.GetHtmlResponse, err error) {
	var _args api.CommonServiceGetHtmlArgs
	_args.Req = req
	var _result api.CommonServiceGetHtmlResult
	if err = p.c.Call(ctx, "GetHtml", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserAgreement(ctx context.Context, req *api.GetUserAgreementRequest) (r *api.GetUserAgreementResponse, err error) {
	var _args api.CommonServiceGetUserAgreementArgs
	_args.Req = req
	var _result api.CommonServiceGetUserAgreementResult
	if err = p.c.Call(ctx, "GetUserAgreement", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTermsList(ctx context.Context, req *api.TermListRequest) (r *api.TermListResponse, err error) {
	var _args api.CommonServiceGetTermsListArgs
	_args.Req = req
	var _result api.CommonServiceGetTermsListResult
	if err = p.c.Call(ctx, "GetTermsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTerm(ctx context.Context, req *api.TermRequest) (r *api.TermResponse, err error) {
	var _args api.CommonServiceGetTermArgs
	_args.Req = req
	var _result api.CommonServiceGetTermResult
	if err = p.c.Call(ctx, "GetTerm", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotice(ctx context.Context, req *api.GetNoticeRequst) (r *api.GetNoticeResponse, err error) {
	var _args api.CommonServiceGetNoticeArgs
	_args.Req = req
	var _result api.CommonServiceGetNoticeResult
	if err = p.c.Call(ctx, "GetNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetContributorInfo(ctx context.Context, req *api.GetContributorInfoRequest) (r *api.GetContributorInfoResponse, err error) {
	var _args api.CommonServiceGetContributorInfoArgs
	_args.Req = req
	var _result api.CommonServiceGetContributorInfoResult
	if err = p.c.Call(ctx, "GetContributorInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToolboxConfig(ctx context.Context, req *api.GetToolboxConfigRequest) (r *api.GetToolboxConfigResponse, err error) {
	var _args api.CommonServiceGetToolboxConfigArgs
	_args.Req = req
	var _result api.CommonServiceGetToolboxConfigResult
	if err = p.c.Call(ctx, "GetToolboxConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PutToolboxConfig(ctx context.Context, req *api.PutToolboxConfigRequest) (r *api.PutToolboxConfigResponse, err error) {
	var _args api.CommonServicePutToolboxConfigArgs
	_args.Req = req
	var _result api.CommonServicePutToolboxConfigResult
	if err = p.c.Call(ctx, "PutToolboxConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
