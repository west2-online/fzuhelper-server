// Code generated by Kitex v0.15.1. DO NOT EDIT.

package commonservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetCSS(ctx context.Context, req *api.GetCSSRequest, callOptions ...callopt.Option) (r *api.GetCSSResponse, err error)
	GetHtml(ctx context.Context, req *api.GetHtmlRequest, callOptions ...callopt.Option) (r *api.GetHtmlResponse, err error)
	GetUserAgreement(ctx context.Context, req *api.GetUserAgreementRequest, callOptions ...callopt.Option) (r *api.GetUserAgreementResponse, err error)
	GetTermsList(ctx context.Context, req *api.TermListRequest, callOptions ...callopt.Option) (r *api.TermListResponse, err error)
	GetTerm(ctx context.Context, req *api.TermRequest, callOptions ...callopt.Option) (r *api.TermResponse, err error)
	GetNotice(ctx context.Context, req *api.GetNoticeRequst, callOptions ...callopt.Option) (r *api.GetNoticeResponse, err error)
	GetContributorInfo(ctx context.Context, req *api.GetContributorInfoRequest, callOptions ...callopt.Option) (r *api.GetContributorInfoResponse, err error)
	GetToolboxConfig(ctx context.Context, req *api.GetToolboxConfigRequest, callOptions ...callopt.Option) (r *api.GetToolboxConfigResponse, err error)
	PutToolboxConfig(ctx context.Context, req *api.PutToolboxConfigRequest, callOptions ...callopt.Option) (r *api.PutToolboxConfigResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kCommonServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCommonServiceClient struct {
	*kClient
}

func (p *kCommonServiceClient) GetCSS(ctx context.Context, req *api.GetCSSRequest, callOptions ...callopt.Option) (r *api.GetCSSResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCSS(ctx, req)
}

func (p *kCommonServiceClient) GetHtml(ctx context.Context, req *api.GetHtmlRequest, callOptions ...callopt.Option) (r *api.GetHtmlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHtml(ctx, req)
}

func (p *kCommonServiceClient) GetUserAgreement(ctx context.Context, req *api.GetUserAgreementRequest, callOptions ...callopt.Option) (r *api.GetUserAgreementResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserAgreement(ctx, req)
}

func (p *kCommonServiceClient) GetTermsList(ctx context.Context, req *api.TermListRequest, callOptions ...callopt.Option) (r *api.TermListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTermsList(ctx, req)
}

func (p *kCommonServiceClient) GetTerm(ctx context.Context, req *api.TermRequest, callOptions ...callopt.Option) (r *api.TermResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTerm(ctx, req)
}

func (p *kCommonServiceClient) GetNotice(ctx context.Context, req *api.GetNoticeRequst, callOptions ...callopt.Option) (r *api.GetNoticeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNotice(ctx, req)
}

func (p *kCommonServiceClient) GetContributorInfo(ctx context.Context, req *api.GetContributorInfoRequest, callOptions ...callopt.Option) (r *api.GetContributorInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetContributorInfo(ctx, req)
}

func (p *kCommonServiceClient) GetToolboxConfig(ctx context.Context, req *api.GetToolboxConfigRequest, callOptions ...callopt.Option) (r *api.GetToolboxConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetToolboxConfig(ctx, req)
}

func (p *kCommonServiceClient) PutToolboxConfig(ctx context.Context, req *api.PutToolboxConfigRequest, callOptions ...callopt.Option) (r *api.PutToolboxConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PutToolboxConfig(ctx, req)
}
