// Code generated by Kitex v0.15.1. DO NOT EDIT.

package paperservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/west2-online/fzuhelper-server/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListDirFiles": kitex.NewMethodInfo(
		listDirFilesHandler,
		newPaperServiceListDirFilesArgs,
		newPaperServiceListDirFilesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDownloadUrl": kitex.NewMethodInfo(
		getDownloadUrlHandler,
		newPaperServiceGetDownloadUrlArgs,
		newPaperServiceGetDownloadUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDirFilesForAndroid": kitex.NewMethodInfo(
		listDirFilesForAndroidHandler,
		newPaperServiceListDirFilesForAndroidArgs,
		newPaperServiceListDirFilesForAndroidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDownloadUrlForAndroid": kitex.NewMethodInfo(
		getDownloadUrlForAndroidHandler,
		newPaperServiceGetDownloadUrlForAndroidArgs,
		newPaperServiceGetDownloadUrlForAndroidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	paperServiceServiceInfo                = NewServiceInfo()
	paperServiceServiceInfoForClient       = NewServiceInfoForClient()
	paperServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return paperServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return paperServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return paperServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PaperService"
	handlerType := (*api.PaperService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func listDirFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PaperServiceListDirFilesArgs)
	realResult := result.(*api.PaperServiceListDirFilesResult)
	success, err := handler.(api.PaperService).ListDirFiles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceListDirFilesArgs() interface{} {
	return api.NewPaperServiceListDirFilesArgs()
}

func newPaperServiceListDirFilesResult() interface{} {
	return api.NewPaperServiceListDirFilesResult()
}

func getDownloadUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PaperServiceGetDownloadUrlArgs)
	realResult := result.(*api.PaperServiceGetDownloadUrlResult)
	success, err := handler.(api.PaperService).GetDownloadUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceGetDownloadUrlArgs() interface{} {
	return api.NewPaperServiceGetDownloadUrlArgs()
}

func newPaperServiceGetDownloadUrlResult() interface{} {
	return api.NewPaperServiceGetDownloadUrlResult()
}

func listDirFilesForAndroidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PaperServiceListDirFilesForAndroidArgs)
	realResult := result.(*api.PaperServiceListDirFilesForAndroidResult)
	success, err := handler.(api.PaperService).ListDirFilesForAndroid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceListDirFilesForAndroidArgs() interface{} {
	return api.NewPaperServiceListDirFilesForAndroidArgs()
}

func newPaperServiceListDirFilesForAndroidResult() interface{} {
	return api.NewPaperServiceListDirFilesForAndroidResult()
}

func getDownloadUrlForAndroidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PaperServiceGetDownloadUrlForAndroidArgs)
	realResult := result.(*api.PaperServiceGetDownloadUrlForAndroidResult)
	success, err := handler.(api.PaperService).GetDownloadUrlForAndroid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceGetDownloadUrlForAndroidArgs() interface{} {
	return api.NewPaperServiceGetDownloadUrlForAndroidArgs()
}

func newPaperServiceGetDownloadUrlForAndroidResult() interface{} {
	return api.NewPaperServiceGetDownloadUrlForAndroidResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListDirFiles(ctx context.Context, req *api.ListDirFilesRequest) (r *api.ListDirFilesResponse, err error) {
	var _args api.PaperServiceListDirFilesArgs
	_args.Req = req
	var _result api.PaperServiceListDirFilesResult
	if err = p.c.Call(ctx, "ListDirFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDownloadUrl(ctx context.Context, req *api.GetDownloadUrlRequest) (r *api.GetDownloadUrlResponse, err error) {
	var _args api.PaperServiceGetDownloadUrlArgs
	_args.Req = req
	var _result api.PaperServiceGetDownloadUrlResult
	if err = p.c.Call(ctx, "GetDownloadUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDirFilesForAndroid(ctx context.Context, req *api.ListDirFilesForAndroidRequest) (r *api.ListDirFilesForAndroidResponse, err error) {
	var _args api.PaperServiceListDirFilesForAndroidArgs
	_args.Req = req
	var _result api.PaperServiceListDirFilesForAndroidResult
	if err = p.c.Call(ctx, "ListDirFilesForAndroid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDownloadUrlForAndroid(ctx context.Context, req *api.GetDownloadUrlForAndroidRequest) (r *api.GetDownloadUrlForAndroidResponse, err error) {
	var _args api.PaperServiceGetDownloadUrlForAndroidArgs
	_args.Req = req
	var _result api.PaperServiceGetDownloadUrlForAndroidResult
	if err = p.c.Call(ctx, "GetDownloadUrlForAndroid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
