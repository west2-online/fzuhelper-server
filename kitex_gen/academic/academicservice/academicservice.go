/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.12.0. DO NOT EDIT.

package academicservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	academic "github.com/west2-online/fzuhelper-server/kitex_gen/academic"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetScores": kitex.NewMethodInfo(
		getScoresHandler,
		newAcademicServiceGetScoresArgs,
		newAcademicServiceGetScoresResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetGPA": kitex.NewMethodInfo(
		getGPAHandler,
		newAcademicServiceGetGPAArgs,
		newAcademicServiceGetGPAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCredit": kitex.NewMethodInfo(
		getCreditHandler,
		newAcademicServiceGetCreditArgs,
		newAcademicServiceGetCreditResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUnifiedExam": kitex.NewMethodInfo(
		getUnifiedExamHandler,
		newAcademicServiceGetUnifiedExamArgs,
		newAcademicServiceGetUnifiedExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPlan": kitex.NewMethodInfo(
		getPlanHandler,
		newAcademicServiceGetPlanArgs,
		newAcademicServiceGetPlanResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	academicServiceServiceInfo                = NewServiceInfo()
	academicServiceServiceInfoForClient       = NewServiceInfoForClient()
	academicServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return academicServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return academicServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return academicServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AcademicService"
	handlerType := (*academic.AcademicService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "academic",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func getScoresHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetScoresArgs)
	realResult := result.(*academic.AcademicServiceGetScoresResult)
	success, err := handler.(academic.AcademicService).GetScores(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetScoresArgs() interface{} {
	return academic.NewAcademicServiceGetScoresArgs()
}

func newAcademicServiceGetScoresResult() interface{} {
	return academic.NewAcademicServiceGetScoresResult()
}

func getGPAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetGPAArgs)
	realResult := result.(*academic.AcademicServiceGetGPAResult)
	success, err := handler.(academic.AcademicService).GetGPA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetGPAArgs() interface{} {
	return academic.NewAcademicServiceGetGPAArgs()
}

func newAcademicServiceGetGPAResult() interface{} {
	return academic.NewAcademicServiceGetGPAResult()
}

func getCreditHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetCreditArgs)
	realResult := result.(*academic.AcademicServiceGetCreditResult)
	success, err := handler.(academic.AcademicService).GetCredit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetCreditArgs() interface{} {
	return academic.NewAcademicServiceGetCreditArgs()
}

func newAcademicServiceGetCreditResult() interface{} {
	return academic.NewAcademicServiceGetCreditResult()
}

func getUnifiedExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetUnifiedExamArgs)
	realResult := result.(*academic.AcademicServiceGetUnifiedExamResult)
	success, err := handler.(academic.AcademicService).GetUnifiedExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetUnifiedExamArgs() interface{} {
	return academic.NewAcademicServiceGetUnifiedExamArgs()
}

func newAcademicServiceGetUnifiedExamResult() interface{} {
	return academic.NewAcademicServiceGetUnifiedExamResult()
}

func getPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetPlanArgs)
	realResult := result.(*academic.AcademicServiceGetPlanResult)
	success, err := handler.(academic.AcademicService).GetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetPlanArgs() interface{} {
	return academic.NewAcademicServiceGetPlanArgs()
}

func newAcademicServiceGetPlanResult() interface{} {
	return academic.NewAcademicServiceGetPlanResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetScores(ctx context.Context, req *academic.GetScoresRequest) (r *academic.GetScoresResponse, err error) {
	var _args academic.AcademicServiceGetScoresArgs
	_args.Req = req
	var _result academic.AcademicServiceGetScoresResult
	if err = p.c.Call(ctx, "GetScores", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGPA(ctx context.Context, req *academic.GetGPARequest) (r *academic.GetGPAResponse, err error) {
	var _args academic.AcademicServiceGetGPAArgs
	_args.Req = req
	var _result academic.AcademicServiceGetGPAResult
	if err = p.c.Call(ctx, "GetGPA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCredit(ctx context.Context, req *academic.GetCreditRequest) (r *academic.GetCreditResponse, err error) {
	var _args academic.AcademicServiceGetCreditArgs
	_args.Req = req
	var _result academic.AcademicServiceGetCreditResult
	if err = p.c.Call(ctx, "GetCredit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUnifiedExam(ctx context.Context, req *academic.GetUnifiedExamRequest) (r *academic.GetUnifiedExamResponse, err error) {
	var _args academic.AcademicServiceGetUnifiedExamArgs
	_args.Req = req
	var _result academic.AcademicServiceGetUnifiedExamResult
	if err = p.c.Call(ctx, "GetUnifiedExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPlan(ctx context.Context, req *academic.GetPlanRequest) (r *academic.GetPlanResponse, err error) {
	var _args academic.AcademicServiceGetPlanArgs
	_args.Req = req
	var _result academic.AcademicServiceGetPlanResult
	if err = p.c.Call(ctx, "GetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
