// Code generated by Kitex v0.7.1. DO NOT EDIT.

package academicservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	academic "github.com/west2-online/fzuhelper-server/kitex_gen/academic"
)

func serviceInfo() *kitex.ServiceInfo {
	return academicServiceServiceInfo
}

var academicServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "academicService"
	handlerType := (*academic.AcademicService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetScores":      kitex.NewMethodInfo(getScoresHandler, newAcademicServiceGetScoresArgs, newAcademicServiceGetScoresResult, false),
		"GetGPA":         kitex.NewMethodInfo(getGPAHandler, newAcademicServiceGetGPAArgs, newAcademicServiceGetGPAResult, false),
		"GetCredit":      kitex.NewMethodInfo(getCreditHandler, newAcademicServiceGetCreditArgs, newAcademicServiceGetCreditResult, false),
		"GetUnifiedExam": kitex.NewMethodInfo(getUnifiedExamHandler, newAcademicServiceGetUnifiedExamArgs, newAcademicServiceGetUnifiedExamResult, false),
		"GetPlan":        kitex.NewMethodInfo(getPlanHandler, newAcademicServiceGetPlanArgs, newAcademicServiceGetPlanResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "academic",
		"ServiceFilePath": "../../idl/academic.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func getScoresHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetScoresArgs)
	realResult := result.(*academic.AcademicServiceGetScoresResult)
	success, err := handler.(academic.AcademicService).GetScores(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetScoresArgs() interface{} {
	return academic.NewAcademicServiceGetScoresArgs()
}

func newAcademicServiceGetScoresResult() interface{} {
	return academic.NewAcademicServiceGetScoresResult()
}

func getGPAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetGPAArgs)
	realResult := result.(*academic.AcademicServiceGetGPAResult)
	success, err := handler.(academic.AcademicService).GetGPA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetGPAArgs() interface{} {
	return academic.NewAcademicServiceGetGPAArgs()
}

func newAcademicServiceGetGPAResult() interface{} {
	return academic.NewAcademicServiceGetGPAResult()
}

func getCreditHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetCreditArgs)
	realResult := result.(*academic.AcademicServiceGetCreditResult)
	success, err := handler.(academic.AcademicService).GetCredit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetCreditArgs() interface{} {
	return academic.NewAcademicServiceGetCreditArgs()
}

func newAcademicServiceGetCreditResult() interface{} {
	return academic.NewAcademicServiceGetCreditResult()
}

func getUnifiedExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetUnifiedExamArgs)
	realResult := result.(*academic.AcademicServiceGetUnifiedExamResult)
	success, err := handler.(academic.AcademicService).GetUnifiedExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetUnifiedExamArgs() interface{} {
	return academic.NewAcademicServiceGetUnifiedExamArgs()
}

func newAcademicServiceGetUnifiedExamResult() interface{} {
	return academic.NewAcademicServiceGetUnifiedExamResult()
}

func getPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*academic.AcademicServiceGetPlanArgs)
	realResult := result.(*academic.AcademicServiceGetPlanResult)
	success, err := handler.(academic.AcademicService).GetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAcademicServiceGetPlanArgs() interface{} {
	return academic.NewAcademicServiceGetPlanArgs()
}

func newAcademicServiceGetPlanResult() interface{} {
	return academic.NewAcademicServiceGetPlanResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetScores(ctx context.Context, req *academic.ScoresRequest) (r *academic.ScoresResponse, err error) {
	var _args academic.AcademicServiceGetScoresArgs
	_args.Req = req
	var _result academic.AcademicServiceGetScoresResult
	if err = p.c.Call(ctx, "GetScores", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGPA(ctx context.Context, req *academic.GPARequest) (r *academic.GPAResp, err error) {
	var _args academic.AcademicServiceGetGPAArgs
	_args.Req = req
	var _result academic.AcademicServiceGetGPAResult
	if err = p.c.Call(ctx, "GetGPA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCredit(ctx context.Context, req *academic.CreditRequest) (r *academic.CreditResp, err error) {
	var _args academic.AcademicServiceGetCreditArgs
	_args.Req = req
	var _result academic.AcademicServiceGetCreditResult
	if err = p.c.Call(ctx, "GetCredit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUnifiedExam(ctx context.Context, req *academic.UnifiedExamRequest) (r *academic.UnifiedExamResp, err error) {
	var _args academic.AcademicServiceGetUnifiedExamArgs
	_args.Req = req
	var _result academic.AcademicServiceGetUnifiedExamResult
	if err = p.c.Call(ctx, "GetUnifiedExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPlan(ctx context.Context, req *academic.PlanRequest) (r *academic.PlanResp, err error) {
	var _args academic.AcademicServiceGetPlanArgs
	_args.Req = req
	var _result academic.AcademicServiceGetPlanResult
	if err = p.c.Call(ctx, "GetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
