/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package paper

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type ListDirFilesRequest struct {
	Path string `thrift:"path,1,required" frugal:"1,required,string" json:"path"`
}

func NewListDirFilesRequest() *ListDirFilesRequest {
	return &ListDirFilesRequest{}
}

func (p *ListDirFilesRequest) InitDefault() {
}

func (p *ListDirFilesRequest) GetPath() (v string) {
	return p.Path
}
func (p *ListDirFilesRequest) SetPath(val string) {
	p.Path = val
}

func (p *ListDirFilesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesRequest(%+v)", *p)
}

var fieldIDToName_ListDirFilesRequest = map[int16]string{
	1: "path",
}

type ListDirFilesResponse struct {
	Base *model.BaseResp     `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Dir  *model.UpYunFileDir `thrift:"dir,2,optional" frugal:"2,optional,model.UpYunFileDir" json:"dir,omitempty"`
}

func NewListDirFilesResponse() *ListDirFilesResponse {
	return &ListDirFilesResponse{}
}

func (p *ListDirFilesResponse) InitDefault() {
}

var ListDirFilesResponse_Base_DEFAULT *model.BaseResp

func (p *ListDirFilesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListDirFilesResponse_Base_DEFAULT
	}
	return p.Base
}

var ListDirFilesResponse_Dir_DEFAULT *model.UpYunFileDir

func (p *ListDirFilesResponse) GetDir() (v *model.UpYunFileDir) {
	if !p.IsSetDir() {
		return ListDirFilesResponse_Dir_DEFAULT
	}
	return p.Dir
}
func (p *ListDirFilesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListDirFilesResponse) SetDir(val *model.UpYunFileDir) {
	p.Dir = val
}

func (p *ListDirFilesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDirFilesResponse) IsSetDir() bool {
	return p.Dir != nil
}

func (p *ListDirFilesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDirFilesResponse(%+v)", *p)
}

var fieldIDToName_ListDirFilesResponse = map[int16]string{
	1: "base",
	2: "dir",
}

type GetDownloadUrlRequest struct {
	Filepath string `thrift:"filepath,1,required" frugal:"1,required,string" json:"filepath"`
}

func NewGetDownloadUrlRequest() *GetDownloadUrlRequest {
	return &GetDownloadUrlRequest{}
}

func (p *GetDownloadUrlRequest) InitDefault() {
}

func (p *GetDownloadUrlRequest) GetFilepath() (v string) {
	return p.Filepath
}
func (p *GetDownloadUrlRequest) SetFilepath(val string) {
	p.Filepath = val
}

func (p *GetDownloadUrlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlRequest(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlRequest = map[int16]string{
	1: "filepath",
}

type GetDownloadUrlResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Url  string          `thrift:"url,2,required" frugal:"2,required,string" json:"url"`
}

func NewGetDownloadUrlResponse() *GetDownloadUrlResponse {
	return &GetDownloadUrlResponse{}
}

func (p *GetDownloadUrlResponse) InitDefault() {
}

var GetDownloadUrlResponse_Base_DEFAULT *model.BaseResp

func (p *GetDownloadUrlResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetDownloadUrlResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetDownloadUrlResponse) GetUrl() (v string) {
	return p.Url
}
func (p *GetDownloadUrlResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetDownloadUrlResponse) SetUrl(val string) {
	p.Url = val
}

func (p *GetDownloadUrlResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDownloadUrlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadUrlResponse(%+v)", *p)
}

var fieldIDToName_GetDownloadUrlResponse = map[int16]string{
	1: "base",
	2: "url",
}

type PaperService interface {
	ListDirFiles(ctx context.Context, req *ListDirFilesRequest) (r *ListDirFilesResponse, err error)

	GetDownloadUrl(ctx context.Context, req *GetDownloadUrlRequest) (r *GetDownloadUrlResponse, err error)
}

type PaperServiceListDirFilesArgs struct {
	Req *ListDirFilesRequest `thrift:"req,1" frugal:"1,default,ListDirFilesRequest" json:"req"`
}

func NewPaperServiceListDirFilesArgs() *PaperServiceListDirFilesArgs {
	return &PaperServiceListDirFilesArgs{}
}

func (p *PaperServiceListDirFilesArgs) InitDefault() {
}

var PaperServiceListDirFilesArgs_Req_DEFAULT *ListDirFilesRequest

func (p *PaperServiceListDirFilesArgs) GetReq() (v *ListDirFilesRequest) {
	if !p.IsSetReq() {
		return PaperServiceListDirFilesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceListDirFilesArgs) SetReq(val *ListDirFilesRequest) {
	p.Req = val
}

func (p *PaperServiceListDirFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceListDirFilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesArgs = map[int16]string{
	1: "req",
}

type PaperServiceListDirFilesResult struct {
	Success *ListDirFilesResponse `thrift:"success,0,optional" frugal:"0,optional,ListDirFilesResponse" json:"success,omitempty"`
}

func NewPaperServiceListDirFilesResult() *PaperServiceListDirFilesResult {
	return &PaperServiceListDirFilesResult{}
}

func (p *PaperServiceListDirFilesResult) InitDefault() {
}

var PaperServiceListDirFilesResult_Success_DEFAULT *ListDirFilesResponse

func (p *PaperServiceListDirFilesResult) GetSuccess() (v *ListDirFilesResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceListDirFilesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceListDirFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDirFilesResponse)
}

func (p *PaperServiceListDirFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceListDirFilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceListDirFilesResult(%+v)", *p)
}

var fieldIDToName_PaperServiceListDirFilesResult = map[int16]string{
	0: "success",
}

type PaperServiceGetDownloadUrlArgs struct {
	Req *GetDownloadUrlRequest `thrift:"req,1" frugal:"1,default,GetDownloadUrlRequest" json:"req"`
}

func NewPaperServiceGetDownloadUrlArgs() *PaperServiceGetDownloadUrlArgs {
	return &PaperServiceGetDownloadUrlArgs{}
}

func (p *PaperServiceGetDownloadUrlArgs) InitDefault() {
}

var PaperServiceGetDownloadUrlArgs_Req_DEFAULT *GetDownloadUrlRequest

func (p *PaperServiceGetDownloadUrlArgs) GetReq() (v *GetDownloadUrlRequest) {
	if !p.IsSetReq() {
		return PaperServiceGetDownloadUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaperServiceGetDownloadUrlArgs) SetReq(val *GetDownloadUrlRequest) {
	p.Req = val
}

func (p *PaperServiceGetDownloadUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaperServiceGetDownloadUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlArgs(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlArgs = map[int16]string{
	1: "req",
}

type PaperServiceGetDownloadUrlResult struct {
	Success *GetDownloadUrlResponse `thrift:"success,0,optional" frugal:"0,optional,GetDownloadUrlResponse" json:"success,omitempty"`
}

func NewPaperServiceGetDownloadUrlResult() *PaperServiceGetDownloadUrlResult {
	return &PaperServiceGetDownloadUrlResult{}
}

func (p *PaperServiceGetDownloadUrlResult) InitDefault() {
}

var PaperServiceGetDownloadUrlResult_Success_DEFAULT *GetDownloadUrlResponse

func (p *PaperServiceGetDownloadUrlResult) GetSuccess() (v *GetDownloadUrlResponse) {
	if !p.IsSetSuccess() {
		return PaperServiceGetDownloadUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaperServiceGetDownloadUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDownloadUrlResponse)
}

func (p *PaperServiceGetDownloadUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaperServiceGetDownloadUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperServiceGetDownloadUrlResult(%+v)", *p)
}

var fieldIDToName_PaperServiceGetDownloadUrlResult = map[int16]string{
	0: "success",
}
