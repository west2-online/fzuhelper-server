// Code generated by Kitex v0.14.1. DO NOT EDIT.

package paperservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	paper "github.com/west2-online/fzuhelper-server/kitex_gen/paper"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListDirFiles": kitex.NewMethodInfo(
		listDirFilesHandler,
		newPaperServiceListDirFilesArgs,
		newPaperServiceListDirFilesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDownloadUrl": kitex.NewMethodInfo(
		getDownloadUrlHandler,
		newPaperServiceGetDownloadUrlArgs,
		newPaperServiceGetDownloadUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	paperServiceServiceInfo                = NewServiceInfo()
	paperServiceServiceInfoForClient       = NewServiceInfoForClient()
	paperServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return paperServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return paperServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return paperServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PaperService"
	handlerType := (*paper.PaperService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "paper",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func listDirFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*paper.PaperServiceListDirFilesArgs)
	realResult := result.(*paper.PaperServiceListDirFilesResult)
	success, err := handler.(paper.PaperService).ListDirFiles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceListDirFilesArgs() interface{} {
	return paper.NewPaperServiceListDirFilesArgs()
}

func newPaperServiceListDirFilesResult() interface{} {
	return paper.NewPaperServiceListDirFilesResult()
}

func getDownloadUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*paper.PaperServiceGetDownloadUrlArgs)
	realResult := result.(*paper.PaperServiceGetDownloadUrlResult)
	success, err := handler.(paper.PaperService).GetDownloadUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaperServiceGetDownloadUrlArgs() interface{} {
	return paper.NewPaperServiceGetDownloadUrlArgs()
}

func newPaperServiceGetDownloadUrlResult() interface{} {
	return paper.NewPaperServiceGetDownloadUrlResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListDirFiles(ctx context.Context, req *paper.ListDirFilesRequest) (r *paper.ListDirFilesResponse, err error) {
	var _args paper.PaperServiceListDirFilesArgs
	_args.Req = req
	var _result paper.PaperServiceListDirFilesResult
	if err = p.c.Call(ctx, "ListDirFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDownloadUrl(ctx context.Context, req *paper.GetDownloadUrlRequest) (r *paper.GetDownloadUrlResponse, err error) {
	var _args paper.PaperServiceGetDownloadUrlArgs
	_args.Req = req
	var _result paper.PaperServiceGetDownloadUrlResult
	if err = p.c.Call(ctx, "GetDownloadUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
