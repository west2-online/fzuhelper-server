// Code generated by Kitex v0.7.1. DO NOT EDIT.

package launchscreenservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	screen "github.com/west2-online/fzuhelper-server/kitex_gen/screen"
)

func serviceInfo() *kitex.ServiceInfo {
	return launchScreenServiceServiceInfo
}

var launchScreenServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LaunchScreenService"
	handlerType := (*screen.LaunchScreenService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PictureCreate":    kitex.NewMethodInfo(pictureCreateHandler, newLaunchScreenServicePictureCreateArgs, newLaunchScreenServicePictureCreateResult, false),
		"PictureGet":       kitex.NewMethodInfo(pictureGetHandler, newLaunchScreenServicePictureGetArgs, newLaunchScreenServicePictureGetResult, false),
		"PictureUpdate":    kitex.NewMethodInfo(pictureUpdateHandler, newLaunchScreenServicePictureUpdateArgs, newLaunchScreenServicePictureUpdateResult, false),
		"PictureImgUpdate": kitex.NewMethodInfo(pictureImgUpdateHandler, newLaunchScreenServicePictureImgUpdateArgs, newLaunchScreenServicePictureImgUpdateResult, false),
		"PictureDelete":    kitex.NewMethodInfo(pictureDeleteHandler, newLaunchScreenServicePictureDeleteArgs, newLaunchScreenServicePictureDeleteResult, false),
		"RetPicture":       kitex.NewMethodInfo(retPictureHandler, newLaunchScreenServiceRetPictureArgs, newLaunchScreenServiceRetPictureResult, false),
		"AddPoint":         kitex.NewMethodInfo(addPointHandler, newLaunchScreenServiceAddPointArgs, newLaunchScreenServiceAddPointResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "screen",
		"ServiceFilePath": "../../idl/screen.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func pictureCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServicePictureCreateArgs)
	realResult := result.(*screen.LaunchScreenServicePictureCreateResult)
	success, err := handler.(screen.LaunchScreenService).PictureCreate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServicePictureCreateArgs() interface{} {
	return screen.NewLaunchScreenServicePictureCreateArgs()
}

func newLaunchScreenServicePictureCreateResult() interface{} {
	return screen.NewLaunchScreenServicePictureCreateResult()
}

func pictureGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServicePictureGetArgs)
	realResult := result.(*screen.LaunchScreenServicePictureGetResult)
	success, err := handler.(screen.LaunchScreenService).PictureGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServicePictureGetArgs() interface{} {
	return screen.NewLaunchScreenServicePictureGetArgs()
}

func newLaunchScreenServicePictureGetResult() interface{} {
	return screen.NewLaunchScreenServicePictureGetResult()
}

func pictureUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServicePictureUpdateArgs)
	realResult := result.(*screen.LaunchScreenServicePictureUpdateResult)
	success, err := handler.(screen.LaunchScreenService).PictureUpdate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServicePictureUpdateArgs() interface{} {
	return screen.NewLaunchScreenServicePictureUpdateArgs()
}

func newLaunchScreenServicePictureUpdateResult() interface{} {
	return screen.NewLaunchScreenServicePictureUpdateResult()
}

func pictureImgUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServicePictureImgUpdateArgs)
	realResult := result.(*screen.LaunchScreenServicePictureImgUpdateResult)
	success, err := handler.(screen.LaunchScreenService).PictureImgUpdate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServicePictureImgUpdateArgs() interface{} {
	return screen.NewLaunchScreenServicePictureImgUpdateArgs()
}

func newLaunchScreenServicePictureImgUpdateResult() interface{} {
	return screen.NewLaunchScreenServicePictureImgUpdateResult()
}

func pictureDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServicePictureDeleteArgs)
	realResult := result.(*screen.LaunchScreenServicePictureDeleteResult)
	success, err := handler.(screen.LaunchScreenService).PictureDelete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServicePictureDeleteArgs() interface{} {
	return screen.NewLaunchScreenServicePictureDeleteArgs()
}

func newLaunchScreenServicePictureDeleteResult() interface{} {
	return screen.NewLaunchScreenServicePictureDeleteResult()
}

func retPictureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServiceRetPictureArgs)
	realResult := result.(*screen.LaunchScreenServiceRetPictureResult)
	success, err := handler.(screen.LaunchScreenService).RetPicture(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceRetPictureArgs() interface{} {
	return screen.NewLaunchScreenServiceRetPictureArgs()
}

func newLaunchScreenServiceRetPictureResult() interface{} {
	return screen.NewLaunchScreenServiceRetPictureResult()
}

func addPointHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*screen.LaunchScreenServiceAddPointArgs)
	realResult := result.(*screen.LaunchScreenServiceAddPointResult)
	success, err := handler.(screen.LaunchScreenService).AddPoint(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLaunchScreenServiceAddPointArgs() interface{} {
	return screen.NewLaunchScreenServiceAddPointArgs()
}

func newLaunchScreenServiceAddPointResult() interface{} {
	return screen.NewLaunchScreenServiceAddPointResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PictureCreate(ctx context.Context, req *screen.CreatePictureRequest) (r *screen.CreatePictureResponse, err error) {
	var _args screen.LaunchScreenServicePictureCreateArgs
	_args.Req = req
	var _result screen.LaunchScreenServicePictureCreateResult
	if err = p.c.Call(ctx, "PictureCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PictureGet(ctx context.Context, req *screen.GetPictureRequest) (r *screen.GetPictureResponse, err error) {
	var _args screen.LaunchScreenServicePictureGetArgs
	_args.Req = req
	var _result screen.LaunchScreenServicePictureGetResult
	if err = p.c.Call(ctx, "PictureGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PictureUpdate(ctx context.Context, req *screen.PutPictureRequset) (r *screen.PutPictureResponse, err error) {
	var _args screen.LaunchScreenServicePictureUpdateArgs
	_args.Req = req
	var _result screen.LaunchScreenServicePictureUpdateResult
	if err = p.c.Call(ctx, "PictureUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PictureImgUpdate(ctx context.Context, req *screen.PutPictureImgRequset) (r *screen.PutPictureResponse, err error) {
	var _args screen.LaunchScreenServicePictureImgUpdateArgs
	_args.Req = req
	var _result screen.LaunchScreenServicePictureImgUpdateResult
	if err = p.c.Call(ctx, "PictureImgUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PictureDelete(ctx context.Context, req *screen.DeletePictureRequest) (r *screen.DeletePictureResponse, err error) {
	var _args screen.LaunchScreenServicePictureDeleteArgs
	_args.Req = req
	var _result screen.LaunchScreenServicePictureDeleteResult
	if err = p.c.Call(ctx, "PictureDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetPicture(ctx context.Context, req *screen.RetPictureRequest) (r *screen.RetPictureResponse, err error) {
	var _args screen.LaunchScreenServiceRetPictureArgs
	_args.Req = req
	var _result screen.LaunchScreenServiceRetPictureResult
	if err = p.c.Call(ctx, "RetPicture", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddPoint(ctx context.Context, req *screen.AddPointRequest) (r *screen.AddPointResponse, err error) {
	var _args screen.LaunchScreenServiceAddPointArgs
	_args.Req = req
	var _result screen.LaunchScreenServiceAddPointResult
	if err = p.c.Call(ctx, "AddPoint", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
