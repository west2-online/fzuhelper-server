/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package model

import (
	"fmt"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type LoginData struct {
	Id      string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Cookies string `thrift:"cookies,2,required" frugal:"2,required,string" json:"cookies"`
}

func NewLoginData() *LoginData {
	return &LoginData{}
}

func (p *LoginData) InitDefault() {
}

func (p *LoginData) GetId() (v string) {
	return p.Id
}

func (p *LoginData) GetCookies() (v string) {
	return p.Cookies
}
func (p *LoginData) SetId(val string) {
	p.Id = val
}
func (p *LoginData) SetCookies(val string) {
	p.Cookies = val
}

func (p *LoginData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginData(%+v)", *p)
}

var fieldIDToName_LoginData = map[int16]string{
	1: "id",
	2: "cookies",
}

type UserInfo struct {
	StuId    string `thrift:"stu_id,1,required" frugal:"1,required,string" json:"stu_id"`
	Name     string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Birthday string `thrift:"birthday,3,required" frugal:"3,required,string" json:"birthday"`
	Sex      string `thrift:"sex,4,required" frugal:"4,required,string" json:"sex"`
	College  string `thrift:"college,5,required" frugal:"5,required,string" json:"college"`
	Grade    string `thrift:"grade,6,required" frugal:"6,required,string" json:"grade"`
	Major    string `thrift:"major,7,required" frugal:"7,required,string" json:"major"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetStuId() (v string) {
	return p.StuId
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}

func (p *UserInfo) GetBirthday() (v string) {
	return p.Birthday
}

func (p *UserInfo) GetSex() (v string) {
	return p.Sex
}

func (p *UserInfo) GetCollege() (v string) {
	return p.College
}

func (p *UserInfo) GetGrade() (v string) {
	return p.Grade
}

func (p *UserInfo) GetMajor() (v string) {
	return p.Major
}
func (p *UserInfo) SetStuId(val string) {
	p.StuId = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}
func (p *UserInfo) SetBirthday(val string) {
	p.Birthday = val
}
func (p *UserInfo) SetSex(val string) {
	p.Sex = val
}
func (p *UserInfo) SetCollege(val string) {
	p.College = val
}
func (p *UserInfo) SetGrade(val string) {
	p.Grade = val
}
func (p *UserInfo) SetMajor(val string) {
	p.Major = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "stu_id",
	2: "name",
	3: "birthday",
	4: "sex",
	5: "college",
	6: "grade",
	7: "major",
}

type Classroom struct {
	Build    string `thrift:"build,1,required" frugal:"1,required,string" json:"build"`
	Location string `thrift:"location,2,required" frugal:"2,required,string" json:"location"`
	Capacity string `thrift:"capacity,3,required" frugal:"3,required,string" json:"capacity"`
	Type     string `thrift:"type,4,required" frugal:"4,required,string" json:"type"`
}

func NewClassroom() *Classroom {
	return &Classroom{}
}

func (p *Classroom) InitDefault() {
}

func (p *Classroom) GetBuild() (v string) {
	return p.Build
}

func (p *Classroom) GetLocation() (v string) {
	return p.Location
}

func (p *Classroom) GetCapacity() (v string) {
	return p.Capacity
}

func (p *Classroom) GetType() (v string) {
	return p.Type
}
func (p *Classroom) SetBuild(val string) {
	p.Build = val
}
func (p *Classroom) SetLocation(val string) {
	p.Location = val
}
func (p *Classroom) SetCapacity(val string) {
	p.Capacity = val
}
func (p *Classroom) SetType(val string) {
	p.Type = val
}

func (p *Classroom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Classroom(%+v)", *p)
}

var fieldIDToName_Classroom = map[int16]string{
	1: "build",
	2: "location",
	3: "capacity",
	4: "type",
}

type ExamRoomInfo struct {
	Name     string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Credit   string `thrift:"credit,2,required" frugal:"2,required,string" json:"credit"`
	Teacher  string `thrift:"teacher,3,required" frugal:"3,required,string" json:"teacher"`
	Location string `thrift:"location,4,required" frugal:"4,required,string" json:"location"`
	Time     string `thrift:"time,5,required" frugal:"5,required,string" json:"time"`
	Date     string `thrift:"date,6,required" frugal:"6,required,string" json:"date"`
}

func NewExamRoomInfo() *ExamRoomInfo {
	return &ExamRoomInfo{}
}

func (p *ExamRoomInfo) InitDefault() {
}

func (p *ExamRoomInfo) GetName() (v string) {
	return p.Name
}

func (p *ExamRoomInfo) GetCredit() (v string) {
	return p.Credit
}

func (p *ExamRoomInfo) GetTeacher() (v string) {
	return p.Teacher
}

func (p *ExamRoomInfo) GetLocation() (v string) {
	return p.Location
}

func (p *ExamRoomInfo) GetTime() (v string) {
	return p.Time
}

func (p *ExamRoomInfo) GetDate() (v string) {
	return p.Date
}
func (p *ExamRoomInfo) SetName(val string) {
	p.Name = val
}
func (p *ExamRoomInfo) SetCredit(val string) {
	p.Credit = val
}
func (p *ExamRoomInfo) SetTeacher(val string) {
	p.Teacher = val
}
func (p *ExamRoomInfo) SetLocation(val string) {
	p.Location = val
}
func (p *ExamRoomInfo) SetTime(val string) {
	p.Time = val
}
func (p *ExamRoomInfo) SetDate(val string) {
	p.Date = val
}

func (p *ExamRoomInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamRoomInfo(%+v)", *p)
}

var fieldIDToName_ExamRoomInfo = map[int16]string{
	1: "name",
	2: "credit",
	3: "teacher",
	4: "location",
	5: "time",
	6: "date",
}

type CourseScheduleRule struct {
	Location   string `thrift:"location,1,required" frugal:"1,required,string" json:"location"`
	StartClass int64  `thrift:"startClass,2,required" frugal:"2,required,i64" json:"startClass"`
	EndClass   int64  `thrift:"endClass,3,required" frugal:"3,required,i64" json:"endClass"`
	StartWeek  int64  `thrift:"startWeek,4,required" frugal:"4,required,i64" json:"startWeek"`
	EndWeek    int64  `thrift:"endWeek,5,required" frugal:"5,required,i64" json:"endWeek"`
	Weekday    int64  `thrift:"weekday,6,required" frugal:"6,required,i64" json:"weekday"`
	Single     bool   `thrift:"single,7,required" frugal:"7,required,bool" json:"single"`
	Double     bool   `thrift:"double,8,required" frugal:"8,required,bool" json:"double"`
	Adjust     bool   `thrift:"adjust,9,required" frugal:"9,required,bool" json:"adjust"`
}

func NewCourseScheduleRule() *CourseScheduleRule {
	return &CourseScheduleRule{}
}

func (p *CourseScheduleRule) InitDefault() {
}

func (p *CourseScheduleRule) GetLocation() (v string) {
	return p.Location
}

func (p *CourseScheduleRule) GetStartClass() (v int64) {
	return p.StartClass
}

func (p *CourseScheduleRule) GetEndClass() (v int64) {
	return p.EndClass
}

func (p *CourseScheduleRule) GetStartWeek() (v int64) {
	return p.StartWeek
}

func (p *CourseScheduleRule) GetEndWeek() (v int64) {
	return p.EndWeek
}

func (p *CourseScheduleRule) GetWeekday() (v int64) {
	return p.Weekday
}

func (p *CourseScheduleRule) GetSingle() (v bool) {
	return p.Single
}

func (p *CourseScheduleRule) GetDouble() (v bool) {
	return p.Double
}

func (p *CourseScheduleRule) GetAdjust() (v bool) {
	return p.Adjust
}
func (p *CourseScheduleRule) SetLocation(val string) {
	p.Location = val
}
func (p *CourseScheduleRule) SetStartClass(val int64) {
	p.StartClass = val
}
func (p *CourseScheduleRule) SetEndClass(val int64) {
	p.EndClass = val
}
func (p *CourseScheduleRule) SetStartWeek(val int64) {
	p.StartWeek = val
}
func (p *CourseScheduleRule) SetEndWeek(val int64) {
	p.EndWeek = val
}
func (p *CourseScheduleRule) SetWeekday(val int64) {
	p.Weekday = val
}
func (p *CourseScheduleRule) SetSingle(val bool) {
	p.Single = val
}
func (p *CourseScheduleRule) SetDouble(val bool) {
	p.Double = val
}
func (p *CourseScheduleRule) SetAdjust(val bool) {
	p.Adjust = val
}

func (p *CourseScheduleRule) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseScheduleRule(%+v)", *p)
}

var fieldIDToName_CourseScheduleRule = map[int16]string{
	1: "location",
	2: "startClass",
	3: "endClass",
	4: "startWeek",
	5: "endWeek",
	6: "weekday",
	7: "single",
	8: "double",
	9: "adjust",
}

type Course struct {
	Name             string                `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Teacher          string                `thrift:"teacher,2,required" frugal:"2,required,string" json:"teacher"`
	ScheduleRules    []*CourseScheduleRule `thrift:"scheduleRules,3,required" frugal:"3,required,list<CourseScheduleRule>" json:"scheduleRules"`
	Remark           string                `thrift:"remark,4,required" frugal:"4,required,string" json:"remark"`
	Lessonplan       string                `thrift:"lessonplan,5,required" frugal:"5,required,string" json:"lessonplan"`
	Syllabus         string                `thrift:"syllabus,6,required" frugal:"6,required,string" json:"syllabus"`
	RawScheduleRules string                `thrift:"rawScheduleRules,7,required" frugal:"7,required,string" json:"rawScheduleRules"`
	RawAdjust        string                `thrift:"rawAdjust,8,required" frugal:"8,required,string" json:"rawAdjust"`
	ExamType         string                `thrift:"examType,9,required" frugal:"9,required,string" json:"examType"`
}

func NewCourse() *Course {
	return &Course{}
}

func (p *Course) InitDefault() {
}

func (p *Course) GetName() (v string) {
	return p.Name
}

func (p *Course) GetTeacher() (v string) {
	return p.Teacher
}

func (p *Course) GetScheduleRules() (v []*CourseScheduleRule) {
	return p.ScheduleRules
}

func (p *Course) GetRemark() (v string) {
	return p.Remark
}

func (p *Course) GetLessonplan() (v string) {
	return p.Lessonplan
}

func (p *Course) GetSyllabus() (v string) {
	return p.Syllabus
}

func (p *Course) GetRawScheduleRules() (v string) {
	return p.RawScheduleRules
}

func (p *Course) GetRawAdjust() (v string) {
	return p.RawAdjust
}

func (p *Course) GetExamType() (v string) {
	return p.ExamType
}
func (p *Course) SetName(val string) {
	p.Name = val
}
func (p *Course) SetTeacher(val string) {
	p.Teacher = val
}
func (p *Course) SetScheduleRules(val []*CourseScheduleRule) {
	p.ScheduleRules = val
}
func (p *Course) SetRemark(val string) {
	p.Remark = val
}
func (p *Course) SetLessonplan(val string) {
	p.Lessonplan = val
}
func (p *Course) SetSyllabus(val string) {
	p.Syllabus = val
}
func (p *Course) SetRawScheduleRules(val string) {
	p.RawScheduleRules = val
}
func (p *Course) SetRawAdjust(val string) {
	p.RawAdjust = val
}
func (p *Course) SetExamType(val string) {
	p.ExamType = val
}

func (p *Course) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Course(%+v)", *p)
}

var fieldIDToName_Course = map[int16]string{
	1: "name",
	2: "teacher",
	3: "scheduleRules",
	4: "remark",
	5: "lessonplan",
	6: "syllabus",
	7: "rawScheduleRules",
	8: "rawAdjust",
	9: "examType",
}

type LocateDate struct {
	Week string `thrift:"week,1,required" frugal:"1,required,string" json:"week"`
	Year string `thrift:"year,2,required" frugal:"2,required,string" json:"year"`
	Term string `thrift:"term,3,required" frugal:"3,required,string" json:"term"`
	Date string `thrift:"date,4,required" frugal:"4,required,string" json:"date"`
}

func NewLocateDate() *LocateDate {
	return &LocateDate{}
}

func (p *LocateDate) InitDefault() {
}

func (p *LocateDate) GetWeek() (v string) {
	return p.Week
}

func (p *LocateDate) GetYear() (v string) {
	return p.Year
}

func (p *LocateDate) GetTerm() (v string) {
	return p.Term
}

func (p *LocateDate) GetDate() (v string) {
	return p.Date
}
func (p *LocateDate) SetWeek(val string) {
	p.Week = val
}
func (p *LocateDate) SetYear(val string) {
	p.Year = val
}
func (p *LocateDate) SetTerm(val string) {
	p.Term = val
}
func (p *LocateDate) SetDate(val string) {
	p.Date = val
}

func (p *LocateDate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocateDate(%+v)", *p)
}

var fieldIDToName_LocateDate = map[int16]string{
	1: "week",
	2: "year",
	3: "term",
	4: "date",
}

type Picture struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Url        string `thrift:"url,3" frugal:"3,default,string" json:"url"`
	Href       string `thrift:"href,4" frugal:"4,default,string" json:"href"`
	Text       string `thrift:"text,5" frugal:"5,default,string" json:"text"`
	Type       int64  `thrift:"type,6" frugal:"6,default,i64" json:"type"`
	ShowTimes  *int64 `thrift:"show_times,7,optional" frugal:"7,optional,i64" json:"show_times,omitempty"`
	PointTimes *int64 `thrift:"point_times,8,optional" frugal:"8,optional,i64" json:"point_times,omitempty"`
	Duration   int64  `thrift:"duration,9" frugal:"9,default,i64" json:"duration"`
	SType      *int64 `thrift:"s_type,10,optional" frugal:"10,optional,i64" json:"s_type,omitempty"`
	Frequency  int64  `thrift:"frequency,11" frugal:"11,default,i64" json:"frequency"`
	StartAt    int64  `thrift:"start_at,12" frugal:"12,default,i64" json:"start_at"`
	EndAt      int64  `thrift:"end_at,13" frugal:"13,default,i64" json:"end_at"`
	StartTime  int64  `thrift:"start_time,14" frugal:"14,default,i64" json:"start_time"`
	EndTime    int64  `thrift:"end_time,15" frugal:"15,default,i64" json:"end_time"`
	Regex      string `thrift:"regex,16" frugal:"16,default,string" json:"regex"`
}

func NewPicture() *Picture {
	return &Picture{}
}

func (p *Picture) InitDefault() {
}

func (p *Picture) GetId() (v int64) {
	return p.Id
}

func (p *Picture) GetUrl() (v string) {
	return p.Url
}

func (p *Picture) GetHref() (v string) {
	return p.Href
}

func (p *Picture) GetText() (v string) {
	return p.Text
}

func (p *Picture) GetType() (v int64) {
	return p.Type
}

var Picture_ShowTimes_DEFAULT int64

func (p *Picture) GetShowTimes() (v int64) {
	if !p.IsSetShowTimes() {
		return Picture_ShowTimes_DEFAULT
	}
	return *p.ShowTimes
}

var Picture_PointTimes_DEFAULT int64

func (p *Picture) GetPointTimes() (v int64) {
	if !p.IsSetPointTimes() {
		return Picture_PointTimes_DEFAULT
	}
	return *p.PointTimes
}

func (p *Picture) GetDuration() (v int64) {
	return p.Duration
}

var Picture_SType_DEFAULT int64

func (p *Picture) GetSType() (v int64) {
	if !p.IsSetSType() {
		return Picture_SType_DEFAULT
	}
	return *p.SType
}

func (p *Picture) GetFrequency() (v int64) {
	return p.Frequency
}

func (p *Picture) GetStartAt() (v int64) {
	return p.StartAt
}

func (p *Picture) GetEndAt() (v int64) {
	return p.EndAt
}

func (p *Picture) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *Picture) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *Picture) GetRegex() (v string) {
	return p.Regex
}
func (p *Picture) SetId(val int64) {
	p.Id = val
}
func (p *Picture) SetUrl(val string) {
	p.Url = val
}
func (p *Picture) SetHref(val string) {
	p.Href = val
}
func (p *Picture) SetText(val string) {
	p.Text = val
}
func (p *Picture) SetType(val int64) {
	p.Type = val
}
func (p *Picture) SetShowTimes(val *int64) {
	p.ShowTimes = val
}
func (p *Picture) SetPointTimes(val *int64) {
	p.PointTimes = val
}
func (p *Picture) SetDuration(val int64) {
	p.Duration = val
}
func (p *Picture) SetSType(val *int64) {
	p.SType = val
}
func (p *Picture) SetFrequency(val int64) {
	p.Frequency = val
}
func (p *Picture) SetStartAt(val int64) {
	p.StartAt = val
}
func (p *Picture) SetEndAt(val int64) {
	p.EndAt = val
}
func (p *Picture) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *Picture) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *Picture) SetRegex(val string) {
	p.Regex = val
}

func (p *Picture) IsSetShowTimes() bool {
	return p.ShowTimes != nil
}

func (p *Picture) IsSetPointTimes() bool {
	return p.PointTimes != nil
}

func (p *Picture) IsSetSType() bool {
	return p.SType != nil
}

func (p *Picture) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Picture(%+v)", *p)
}

var fieldIDToName_Picture = map[int16]string{
	1:  "id",
	3:  "url",
	4:  "href",
	5:  "text",
	6:  "type",
	7:  "show_times",
	8:  "point_times",
	9:  "duration",
	10: "s_type",
	11: "frequency",
	12: "start_at",
	13: "end_at",
	14: "start_time",
	15: "end_time",
	16: "regex",
}

type UpYunFileDir struct {
	BasePath *string  `thrift:"basePath,1,optional" frugal:"1,optional,string" json:"basePath,omitempty"`
	Files    []string `thrift:"files,2,required" frugal:"2,required,list<string>" json:"files"`
	Folders  []string `thrift:"folders,3,required" frugal:"3,required,list<string>" json:"folders"`
}

func NewUpYunFileDir() *UpYunFileDir {
	return &UpYunFileDir{}
}

func (p *UpYunFileDir) InitDefault() {
}

var UpYunFileDir_BasePath_DEFAULT string

func (p *UpYunFileDir) GetBasePath() (v string) {
	if !p.IsSetBasePath() {
		return UpYunFileDir_BasePath_DEFAULT
	}
	return *p.BasePath
}

func (p *UpYunFileDir) GetFiles() (v []string) {
	return p.Files
}

func (p *UpYunFileDir) GetFolders() (v []string) {
	return p.Folders
}
func (p *UpYunFileDir) SetBasePath(val *string) {
	p.BasePath = val
}
func (p *UpYunFileDir) SetFiles(val []string) {
	p.Files = val
}
func (p *UpYunFileDir) SetFolders(val []string) {
	p.Folders = val
}

func (p *UpYunFileDir) IsSetBasePath() bool {
	return p.BasePath != nil
}

func (p *UpYunFileDir) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpYunFileDir(%+v)", *p)
}

var fieldIDToName_UpYunFileDir = map[int16]string{
	1: "basePath",
	2: "files",
	3: "folders",
}

type Score struct {
	Credit       string `thrift:"credit,1,required" frugal:"1,required,string" json:"credit"`
	Gpa          string `thrift:"gpa,2,required" frugal:"2,required,string" json:"gpa"`
	Name         string `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Score        string `thrift:"score,4,required" frugal:"4,required,string" json:"score"`
	Teacher      string `thrift:"teacher,5,required" frugal:"5,required,string" json:"teacher"`
	Term         string `thrift:"term,6,required" frugal:"6,required,string" json:"term"`
	ExamType     string `thrift:"exam_type,7,required" frugal:"7,required,string" json:"exam_type"`
	ElectiveType string `thrift:"elective_type,8,required" frugal:"8,required,string" json:"elective_type"`
}

func NewScore() *Score {
	return &Score{}
}

func (p *Score) InitDefault() {
}

func (p *Score) GetCredit() (v string) {
	return p.Credit
}

func (p *Score) GetGpa() (v string) {
	return p.Gpa
}

func (p *Score) GetName() (v string) {
	return p.Name
}

func (p *Score) GetScore() (v string) {
	return p.Score
}

func (p *Score) GetTeacher() (v string) {
	return p.Teacher
}

func (p *Score) GetTerm() (v string) {
	return p.Term
}

func (p *Score) GetExamType() (v string) {
	return p.ExamType
}

func (p *Score) GetElectiveType() (v string) {
	return p.ElectiveType
}
func (p *Score) SetCredit(val string) {
	p.Credit = val
}
func (p *Score) SetGpa(val string) {
	p.Gpa = val
}
func (p *Score) SetName(val string) {
	p.Name = val
}
func (p *Score) SetScore(val string) {
	p.Score = val
}
func (p *Score) SetTeacher(val string) {
	p.Teacher = val
}
func (p *Score) SetTerm(val string) {
	p.Term = val
}
func (p *Score) SetExamType(val string) {
	p.ExamType = val
}
func (p *Score) SetElectiveType(val string) {
	p.ElectiveType = val
}

func (p *Score) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Score(%+v)", *p)
}

var fieldIDToName_Score = map[int16]string{
	1: "credit",
	2: "gpa",
	3: "name",
	4: "score",
	5: "teacher",
	6: "term",
	7: "exam_type",
	8: "elective_type",
}

type GPABean struct {
	Time string     `thrift:"time,1,required" frugal:"1,required,string" json:"time"`
	Data []*GPAData `thrift:"data,2,required" frugal:"2,required,list<GPAData>" json:"data"`
}

func NewGPABean() *GPABean {
	return &GPABean{}
}

func (p *GPABean) InitDefault() {
}

func (p *GPABean) GetTime() (v string) {
	return p.Time
}

func (p *GPABean) GetData() (v []*GPAData) {
	return p.Data
}
func (p *GPABean) SetTime(val string) {
	p.Time = val
}
func (p *GPABean) SetData(val []*GPAData) {
	p.Data = val
}

func (p *GPABean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GPABean(%+v)", *p)
}

var fieldIDToName_GPABean = map[int16]string{
	1: "time",
	2: "data",
}

type GPAData struct {
	Type  string `thrift:"type,1,required" frugal:"1,required,string" json:"type"`
	Value string `thrift:"value,2,required" frugal:"2,required,string" json:"value"`
}

func NewGPAData() *GPAData {
	return &GPAData{}
}

func (p *GPAData) InitDefault() {
}

func (p *GPAData) GetType() (v string) {
	return p.Type
}

func (p *GPAData) GetValue() (v string) {
	return p.Value
}
func (p *GPAData) SetType(val string) {
	p.Type = val
}
func (p *GPAData) SetValue(val string) {
	p.Value = val
}

func (p *GPAData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GPAData(%+v)", *p)
}

var fieldIDToName_GPAData = map[int16]string{
	1: "type",
	2: "value",
}

type Credit struct {
	Type  string `thrift:"type,1,required" frugal:"1,required,string" json:"type"`
	Gain  string `thrift:"gain,2,required" frugal:"2,required,string" json:"gain"`
	Total string `thrift:"total,3,required" frugal:"3,required,string" json:"total"`
}

func NewCredit() *Credit {
	return &Credit{}
}

func (p *Credit) InitDefault() {
}

func (p *Credit) GetType() (v string) {
	return p.Type
}

func (p *Credit) GetGain() (v string) {
	return p.Gain
}

func (p *Credit) GetTotal() (v string) {
	return p.Total
}
func (p *Credit) SetType(val string) {
	p.Type = val
}
func (p *Credit) SetGain(val string) {
	p.Gain = val
}
func (p *Credit) SetTotal(val string) {
	p.Total = val
}

func (p *Credit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Credit(%+v)", *p)
}

var fieldIDToName_Credit = map[int16]string{
	1: "type",
	2: "gain",
	3: "total",
}

type UnifiedExam struct {
	Name  string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Score string `thrift:"score,2,required" frugal:"2,required,string" json:"score"`
	Term  string `thrift:"term,3,required" frugal:"3,required,string" json:"term"`
}

func NewUnifiedExam() *UnifiedExam {
	return &UnifiedExam{}
}

func (p *UnifiedExam) InitDefault() {
}

func (p *UnifiedExam) GetName() (v string) {
	return p.Name
}

func (p *UnifiedExam) GetScore() (v string) {
	return p.Score
}

func (p *UnifiedExam) GetTerm() (v string) {
	return p.Term
}
func (p *UnifiedExam) SetName(val string) {
	p.Name = val
}
func (p *UnifiedExam) SetScore(val string) {
	p.Score = val
}
func (p *UnifiedExam) SetTerm(val string) {
	p.Term = val
}

func (p *UnifiedExam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnifiedExam(%+v)", *p)
}

var fieldIDToName_UnifiedExam = map[int16]string{
	1: "name",
	2: "score",
	3: "term",
}

type PaperData struct {
	BasePath *string  `thrift:"base_path,1,optional" frugal:"1,optional,string" json:"base_path,omitempty"`
	Files    []string `thrift:"files,2,required" frugal:"2,required,list<string>" json:"files"`
	Folders  []string `thrift:"folders,3,required" frugal:"3,required,list<string>" json:"folders"`
}

func NewPaperData() *PaperData {
	return &PaperData{}
}

func (p *PaperData) InitDefault() {
}

var PaperData_BasePath_DEFAULT string

func (p *PaperData) GetBasePath() (v string) {
	if !p.IsSetBasePath() {
		return PaperData_BasePath_DEFAULT
	}
	return *p.BasePath
}

func (p *PaperData) GetFiles() (v []string) {
	return p.Files
}

func (p *PaperData) GetFolders() (v []string) {
	return p.Folders
}
func (p *PaperData) SetBasePath(val *string) {
	p.BasePath = val
}
func (p *PaperData) SetFiles(val []string) {
	p.Files = val
}
func (p *PaperData) SetFolders(val []string) {
	p.Folders = val
}

func (p *PaperData) IsSetBasePath() bool {
	return p.BasePath != nil
}

func (p *PaperData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperData(%+v)", *p)
}

var fieldIDToName_PaperData = map[int16]string{
	1: "base_path",
	2: "files",
	3: "folders",
}

type PaperUrlData struct {
	Url string `thrift:"url,1,required" frugal:"1,required,string" json:"url"`
}

func NewPaperUrlData() *PaperUrlData {
	return &PaperUrlData{}
}

func (p *PaperUrlData) InitDefault() {
}

func (p *PaperUrlData) GetUrl() (v string) {
	return p.Url
}
func (p *PaperUrlData) SetUrl(val string) {
	p.Url = val
}

func (p *PaperUrlData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaperUrlData(%+v)", *p)
}

var fieldIDToName_PaperUrlData = map[int16]string{
	1: "url",
}

type Term struct {
	TermId     *string `thrift:"term_id,1,optional" frugal:"1,optional,string" json:"term_id,omitempty"`
	SchoolYear *string `thrift:"school_year,2,optional" frugal:"2,optional,string" json:"school_year,omitempty"`
	Term       *string `thrift:"term,3,optional" frugal:"3,optional,string" json:"term,omitempty"`
	StartDate  *string `thrift:"start_date,4,optional" frugal:"4,optional,string" json:"start_date,omitempty"`
	EndDate    *string `thrift:"end_date,5,optional" frugal:"5,optional,string" json:"end_date,omitempty"`
}

func NewTerm() *Term {
	return &Term{}
}

func (p *Term) InitDefault() {
}

var Term_TermId_DEFAULT string

func (p *Term) GetTermId() (v string) {
	if !p.IsSetTermId() {
		return Term_TermId_DEFAULT
	}
	return *p.TermId
}

var Term_SchoolYear_DEFAULT string

func (p *Term) GetSchoolYear() (v string) {
	if !p.IsSetSchoolYear() {
		return Term_SchoolYear_DEFAULT
	}
	return *p.SchoolYear
}

var Term_Term_DEFAULT string

func (p *Term) GetTerm() (v string) {
	if !p.IsSetTerm() {
		return Term_Term_DEFAULT
	}
	return *p.Term
}

var Term_StartDate_DEFAULT string

func (p *Term) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return Term_StartDate_DEFAULT
	}
	return *p.StartDate
}

var Term_EndDate_DEFAULT string

func (p *Term) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return Term_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *Term) SetTermId(val *string) {
	p.TermId = val
}
func (p *Term) SetSchoolYear(val *string) {
	p.SchoolYear = val
}
func (p *Term) SetTerm(val *string) {
	p.Term = val
}
func (p *Term) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *Term) SetEndDate(val *string) {
	p.EndDate = val
}

func (p *Term) IsSetTermId() bool {
	return p.TermId != nil
}

func (p *Term) IsSetSchoolYear() bool {
	return p.SchoolYear != nil
}

func (p *Term) IsSetTerm() bool {
	return p.Term != nil
}

func (p *Term) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *Term) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *Term) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Term(%+v)", *p)
}

var fieldIDToName_Term = map[int16]string{
	1: "term_id",
	2: "school_year",
	3: "term",
	4: "start_date",
	5: "end_date",
}

type TermEvent struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	StartDate *string `thrift:"start_date,2,optional" frugal:"2,optional,string" json:"start_date,omitempty"`
	EndDate   *string `thrift:"end_date,3,optional" frugal:"3,optional,string" json:"end_date,omitempty"`
}

func NewTermEvent() *TermEvent {
	return &TermEvent{}
}

func (p *TermEvent) InitDefault() {
}

var TermEvent_Name_DEFAULT string

func (p *TermEvent) GetName() (v string) {
	if !p.IsSetName() {
		return TermEvent_Name_DEFAULT
	}
	return *p.Name
}

var TermEvent_StartDate_DEFAULT string

func (p *TermEvent) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return TermEvent_StartDate_DEFAULT
	}
	return *p.StartDate
}

var TermEvent_EndDate_DEFAULT string

func (p *TermEvent) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return TermEvent_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *TermEvent) SetName(val *string) {
	p.Name = val
}
func (p *TermEvent) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *TermEvent) SetEndDate(val *string) {
	p.EndDate = val
}

func (p *TermEvent) IsSetName() bool {
	return p.Name != nil
}

func (p *TermEvent) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *TermEvent) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *TermEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermEvent(%+v)", *p)
}

var fieldIDToName_TermEvent = map[int16]string{
	1: "name",
	2: "start_date",
	3: "end_date",
}

type TermList struct {
	CurrentTerm *string `thrift:"current_term,1,optional" frugal:"1,optional,string" json:"current_term,omitempty"`
	Terms       []*Term `thrift:"terms,2,optional" frugal:"2,optional,list<Term>" json:"terms,omitempty"`
}

func NewTermList() *TermList {
	return &TermList{}
}

func (p *TermList) InitDefault() {
}

var TermList_CurrentTerm_DEFAULT string

func (p *TermList) GetCurrentTerm() (v string) {
	if !p.IsSetCurrentTerm() {
		return TermList_CurrentTerm_DEFAULT
	}
	return *p.CurrentTerm
}

var TermList_Terms_DEFAULT []*Term

func (p *TermList) GetTerms() (v []*Term) {
	if !p.IsSetTerms() {
		return TermList_Terms_DEFAULT
	}
	return p.Terms
}
func (p *TermList) SetCurrentTerm(val *string) {
	p.CurrentTerm = val
}
func (p *TermList) SetTerms(val []*Term) {
	p.Terms = val
}

func (p *TermList) IsSetCurrentTerm() bool {
	return p.CurrentTerm != nil
}

func (p *TermList) IsSetTerms() bool {
	return p.Terms != nil
}

func (p *TermList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermList(%+v)", *p)
}

var fieldIDToName_TermList = map[int16]string{
	1: "current_term",
	2: "terms",
}

type TermInfo struct {
	TermId     *string      `thrift:"term_id,1,optional" frugal:"1,optional,string" json:"term_id,omitempty"`
	Term       *string      `thrift:"term,2,optional" frugal:"2,optional,string" json:"term,omitempty"`
	SchoolYear *string      `thrift:"school_year,3,optional" frugal:"3,optional,string" json:"school_year,omitempty"`
	Events     []*TermEvent `thrift:"events,4,optional" frugal:"4,optional,list<TermEvent>" json:"events,omitempty"`
}

func NewTermInfo() *TermInfo {
	return &TermInfo{}
}

func (p *TermInfo) InitDefault() {
}

var TermInfo_TermId_DEFAULT string

func (p *TermInfo) GetTermId() (v string) {
	if !p.IsSetTermId() {
		return TermInfo_TermId_DEFAULT
	}
	return *p.TermId
}

var TermInfo_Term_DEFAULT string

func (p *TermInfo) GetTerm() (v string) {
	if !p.IsSetTerm() {
		return TermInfo_Term_DEFAULT
	}
	return *p.Term
}

var TermInfo_SchoolYear_DEFAULT string

func (p *TermInfo) GetSchoolYear() (v string) {
	if !p.IsSetSchoolYear() {
		return TermInfo_SchoolYear_DEFAULT
	}
	return *p.SchoolYear
}

var TermInfo_Events_DEFAULT []*TermEvent

func (p *TermInfo) GetEvents() (v []*TermEvent) {
	if !p.IsSetEvents() {
		return TermInfo_Events_DEFAULT
	}
	return p.Events
}
func (p *TermInfo) SetTermId(val *string) {
	p.TermId = val
}
func (p *TermInfo) SetTerm(val *string) {
	p.Term = val
}
func (p *TermInfo) SetSchoolYear(val *string) {
	p.SchoolYear = val
}
func (p *TermInfo) SetEvents(val []*TermEvent) {
	p.Events = val
}

func (p *TermInfo) IsSetTermId() bool {
	return p.TermId != nil
}

func (p *TermInfo) IsSetTerm() bool {
	return p.Term != nil
}

func (p *TermInfo) IsSetSchoolYear() bool {
	return p.SchoolYear != nil
}

func (p *TermInfo) IsSetEvents() bool {
	return p.Events != nil
}

func (p *TermInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermInfo(%+v)", *p)
}

var fieldIDToName_TermInfo = map[int16]string{
	1: "term_id",
	2: "term",
	3: "school_year",
	4: "events",
}

type NoticeInfo struct {
	Title *string `thrift:"title,1,optional" frugal:"1,optional,string" json:"title,omitempty"`
	Url   *string `thrift:"url,2,optional" frugal:"2,optional,string" json:"url,omitempty"`
	Date  *string `thrift:"date,3,optional" frugal:"3,optional,string" json:"date,omitempty"`
}

func NewNoticeInfo() *NoticeInfo {
	return &NoticeInfo{}
}

func (p *NoticeInfo) InitDefault() {
}

var NoticeInfo_Title_DEFAULT string

func (p *NoticeInfo) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return NoticeInfo_Title_DEFAULT
	}
	return *p.Title
}

var NoticeInfo_Url_DEFAULT string

func (p *NoticeInfo) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return NoticeInfo_Url_DEFAULT
	}
	return *p.Url
}

var NoticeInfo_Date_DEFAULT string

func (p *NoticeInfo) GetDate() (v string) {
	if !p.IsSetDate() {
		return NoticeInfo_Date_DEFAULT
	}
	return *p.Date
}
func (p *NoticeInfo) SetTitle(val *string) {
	p.Title = val
}
func (p *NoticeInfo) SetUrl(val *string) {
	p.Url = val
}
func (p *NoticeInfo) SetDate(val *string) {
	p.Date = val
}

func (p *NoticeInfo) IsSetTitle() bool {
	return p.Title != nil
}

func (p *NoticeInfo) IsSetUrl() bool {
	return p.Url != nil
}

func (p *NoticeInfo) IsSetDate() bool {
	return p.Date != nil
}

func (p *NoticeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoticeInfo(%+v)", *p)
}

var fieldIDToName_NoticeInfo = map[int16]string{
	1: "title",
	2: "url",
	3: "date",
}

type Contributor struct {
	Name          string `thrift:"name,1" frugal:"1,default,string" json:"name"`
	AvatarUrl     string `thrift:"avatar_url,2" frugal:"2,default,string" json:"avatar_url"`
	Url           string `thrift:"url,3" frugal:"3,default,string" json:"url"`
	Contributions int64  `thrift:"contributions,4" frugal:"4,default,i64" json:"contributions"`
}

func NewContributor() *Contributor {
	return &Contributor{}
}

func (p *Contributor) InitDefault() {
}

func (p *Contributor) GetName() (v string) {
	return p.Name
}

func (p *Contributor) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *Contributor) GetUrl() (v string) {
	return p.Url
}

func (p *Contributor) GetContributions() (v int64) {
	return p.Contributions
}
func (p *Contributor) SetName(val string) {
	p.Name = val
}
func (p *Contributor) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}
func (p *Contributor) SetUrl(val string) {
	p.Url = val
}
func (p *Contributor) SetContributions(val int64) {
	p.Contributions = val
}

func (p *Contributor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contributor(%+v)", *p)
}

var fieldIDToName_Contributor = map[int16]string{
	1: "name",
	2: "avatar_url",
	3: "url",
	4: "contributions",
}

type Version struct {
	VersionCode *string `thrift:"version_code,1,optional" frugal:"1,optional,string" json:"version_code,omitempty"`
	VersionName *string `thrift:"version_name,2,optional" frugal:"2,optional,string" json:"version_name,omitempty"`
	Force       *bool   `thrift:"force,3,optional" frugal:"3,optional,bool" json:"force,omitempty"`
	Changelog   *string `thrift:"changelog,4,optional" frugal:"4,optional,string" json:"changelog,omitempty"`
	Url         *string `thrift:"url,5,optional" frugal:"5,optional,string" json:"url,omitempty"`
}

func NewVersion() *Version {
	return &Version{}
}

func (p *Version) InitDefault() {
}

var Version_VersionCode_DEFAULT string

func (p *Version) GetVersionCode() (v string) {
	if !p.IsSetVersionCode() {
		return Version_VersionCode_DEFAULT
	}
	return *p.VersionCode
}

var Version_VersionName_DEFAULT string

func (p *Version) GetVersionName() (v string) {
	if !p.IsSetVersionName() {
		return Version_VersionName_DEFAULT
	}
	return *p.VersionName
}

var Version_Force_DEFAULT bool

func (p *Version) GetForce() (v bool) {
	if !p.IsSetForce() {
		return Version_Force_DEFAULT
	}
	return *p.Force
}

var Version_Changelog_DEFAULT string

func (p *Version) GetChangelog() (v string) {
	if !p.IsSetChangelog() {
		return Version_Changelog_DEFAULT
	}
	return *p.Changelog
}

var Version_Url_DEFAULT string

func (p *Version) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return Version_Url_DEFAULT
	}
	return *p.Url
}
func (p *Version) SetVersionCode(val *string) {
	p.VersionCode = val
}
func (p *Version) SetVersionName(val *string) {
	p.VersionName = val
}
func (p *Version) SetForce(val *bool) {
	p.Force = val
}
func (p *Version) SetChangelog(val *string) {
	p.Changelog = val
}
func (p *Version) SetUrl(val *string) {
	p.Url = val
}

func (p *Version) IsSetVersionCode() bool {
	return p.VersionCode != nil
}

func (p *Version) IsSetVersionName() bool {
	return p.VersionName != nil
}

func (p *Version) IsSetForce() bool {
	return p.Force != nil
}

func (p *Version) IsSetChangelog() bool {
	return p.Changelog != nil
}

func (p *Version) IsSetUrl() bool {
	return p.Url != nil
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}

var fieldIDToName_Version = map[int16]string{
	1: "version_code",
	2: "version_name",
	3: "force",
	4: "changelog",
	5: "url",
}
