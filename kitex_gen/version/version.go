/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package version

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type LoginRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "password",
}

type LoginResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
}

type UploadRequest struct {
	Version  string `thrift:"version,1,required" frugal:"1,required,string" json:"version"`
	Code     string `thrift:"code,2,required" frugal:"2,required,string" json:"code"`
	Url      string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	Feature  string `thrift:"feature,4,required" frugal:"4,required,string" json:"feature"`
	Type     string `thrift:"type,5,required" frugal:"5,required,string" json:"type"`
	Password string `thrift:"password,6,required" frugal:"6,required,string" json:"password"`
	Force    bool   `thrift:"force,7,required" frugal:"7,required,bool" json:"force"`
}

func NewUploadRequest() *UploadRequest {
	return &UploadRequest{}
}

func (p *UploadRequest) InitDefault() {
}

func (p *UploadRequest) GetVersion() (v string) {
	return p.Version
}

func (p *UploadRequest) GetCode() (v string) {
	return p.Code
}

func (p *UploadRequest) GetUrl() (v string) {
	return p.Url
}

func (p *UploadRequest) GetFeature() (v string) {
	return p.Feature
}

func (p *UploadRequest) GetType() (v string) {
	return p.Type
}

func (p *UploadRequest) GetPassword() (v string) {
	return p.Password
}

func (p *UploadRequest) GetForce() (v bool) {
	return p.Force
}
func (p *UploadRequest) SetVersion(val string) {
	p.Version = val
}
func (p *UploadRequest) SetCode(val string) {
	p.Code = val
}
func (p *UploadRequest) SetUrl(val string) {
	p.Url = val
}
func (p *UploadRequest) SetFeature(val string) {
	p.Feature = val
}
func (p *UploadRequest) SetType(val string) {
	p.Type = val
}
func (p *UploadRequest) SetPassword(val string) {
	p.Password = val
}
func (p *UploadRequest) SetForce(val bool) {
	p.Force = val
}

func (p *UploadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadRequest(%+v)", *p)
}

var fieldIDToName_UploadRequest = map[int16]string{
	1: "version",
	2: "code",
	3: "url",
	4: "feature",
	5: "type",
	6: "password",
	7: "force",
}

type UploadResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewUploadResponse() *UploadResponse {
	return &UploadResponse{}
}

func (p *UploadResponse) InitDefault() {
}

var UploadResponse_Base_DEFAULT *model.BaseResp

func (p *UploadResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UploadResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadResponse(%+v)", *p)
}

var fieldIDToName_UploadResponse = map[int16]string{
	1: "base",
}

type UploadParamsRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewUploadParamsRequest() *UploadParamsRequest {
	return &UploadParamsRequest{}
}

func (p *UploadParamsRequest) InitDefault() {
}

func (p *UploadParamsRequest) GetPassword() (v string) {
	return p.Password
}
func (p *UploadParamsRequest) SetPassword(val string) {
	p.Password = val
}

func (p *UploadParamsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsRequest(%+v)", *p)
}

var fieldIDToName_UploadParamsRequest = map[int16]string{
	1: "password",
}

type UploadParamsResponse struct {
	Base          *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Policy        *string         `thrift:"policy,2,optional" frugal:"2,optional,string" json:"policy,omitempty"`
	Authorization *string         `thrift:"authorization,3,optional" frugal:"3,optional,string" json:"authorization,omitempty"`
}

func NewUploadParamsResponse() *UploadParamsResponse {
	return &UploadParamsResponse{}
}

func (p *UploadParamsResponse) InitDefault() {
}

var UploadParamsResponse_Base_DEFAULT *model.BaseResp

func (p *UploadParamsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadParamsResponse_Base_DEFAULT
	}
	return p.Base
}

var UploadParamsResponse_Policy_DEFAULT string

func (p *UploadParamsResponse) GetPolicy() (v string) {
	if !p.IsSetPolicy() {
		return UploadParamsResponse_Policy_DEFAULT
	}
	return *p.Policy
}

var UploadParamsResponse_Authorization_DEFAULT string

func (p *UploadParamsResponse) GetAuthorization() (v string) {
	if !p.IsSetAuthorization() {
		return UploadParamsResponse_Authorization_DEFAULT
	}
	return *p.Authorization
}
func (p *UploadParamsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UploadParamsResponse) SetPolicy(val *string) {
	p.Policy = val
}
func (p *UploadParamsResponse) SetAuthorization(val *string) {
	p.Authorization = val
}

func (p *UploadParamsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadParamsResponse) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *UploadParamsResponse) IsSetAuthorization() bool {
	return p.Authorization != nil
}

func (p *UploadParamsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsResponse(%+v)", *p)
}

var fieldIDToName_UploadParamsResponse = map[int16]string{
	1: "base",
	2: "policy",
	3: "authorization",
}

type DownloadReleaseApkRequest struct {
}

func NewDownloadReleaseApkRequest() *DownloadReleaseApkRequest {
	return &DownloadReleaseApkRequest{}
}

func (p *DownloadReleaseApkRequest) InitDefault() {
}

func (p *DownloadReleaseApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkRequest(%+v)", *p)
}

var fieldIDToName_DownloadReleaseApkRequest = map[int16]string{}

type DownloadReleaseApkResponse struct {
	Base        *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	RedirectUrl string          `thrift:"redirect_url,2" frugal:"2,default,string" json:"redirect_url"`
}

func NewDownloadReleaseApkResponse() *DownloadReleaseApkResponse {
	return &DownloadReleaseApkResponse{}
}

func (p *DownloadReleaseApkResponse) InitDefault() {
}

var DownloadReleaseApkResponse_Base_DEFAULT *model.BaseResp

func (p *DownloadReleaseApkResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DownloadReleaseApkResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *DownloadReleaseApkResponse) GetRedirectUrl() (v string) {
	return p.RedirectUrl
}
func (p *DownloadReleaseApkResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *DownloadReleaseApkResponse) SetRedirectUrl(val string) {
	p.RedirectUrl = val
}

func (p *DownloadReleaseApkResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DownloadReleaseApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkResponse(%+v)", *p)
}

var fieldIDToName_DownloadReleaseApkResponse = map[int16]string{
	1: "base",
	2: "redirect_url",
}

type DownloadBetaApkRequest struct {
}

func NewDownloadBetaApkRequest() *DownloadBetaApkRequest {
	return &DownloadBetaApkRequest{}
}

func (p *DownloadBetaApkRequest) InitDefault() {
}

func (p *DownloadBetaApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkRequest(%+v)", *p)
}

var fieldIDToName_DownloadBetaApkRequest = map[int16]string{}

type DownloadBetaApkResponse struct {
	Base        *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	RedirectUrl string          `thrift:"redirect_url,2" frugal:"2,default,string" json:"redirect_url"`
}

func NewDownloadBetaApkResponse() *DownloadBetaApkResponse {
	return &DownloadBetaApkResponse{}
}

func (p *DownloadBetaApkResponse) InitDefault() {
}

var DownloadBetaApkResponse_Base_DEFAULT *model.BaseResp

func (p *DownloadBetaApkResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DownloadBetaApkResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *DownloadBetaApkResponse) GetRedirectUrl() (v string) {
	return p.RedirectUrl
}
func (p *DownloadBetaApkResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *DownloadBetaApkResponse) SetRedirectUrl(val string) {
	p.RedirectUrl = val
}

func (p *DownloadBetaApkResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DownloadBetaApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkResponse(%+v)", *p)
}

var fieldIDToName_DownloadBetaApkResponse = map[int16]string{
	1: "base",
	2: "redirect_url",
}

type GetReleaseVersionRequest struct {
}

func NewGetReleaseVersionRequest() *GetReleaseVersionRequest {
	return &GetReleaseVersionRequest{}
}

func (p *GetReleaseVersionRequest) InitDefault() {
}

func (p *GetReleaseVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionRequest(%+v)", *p)
}

var fieldIDToName_GetReleaseVersionRequest = map[int16]string{}

type GetReleaseVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
	Force   *bool           `thrift:"force,6,optional" frugal:"6,optional,bool" json:"force,omitempty"`
}

func NewGetReleaseVersionResponse() *GetReleaseVersionResponse {
	return &GetReleaseVersionResponse{}
}

func (p *GetReleaseVersionResponse) InitDefault() {
}

var GetReleaseVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetReleaseVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetReleaseVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetReleaseVersionResponse_Code_DEFAULT string

func (p *GetReleaseVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetReleaseVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetReleaseVersionResponse_Feature_DEFAULT string

func (p *GetReleaseVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetReleaseVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetReleaseVersionResponse_Url_DEFAULT string

func (p *GetReleaseVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetReleaseVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetReleaseVersionResponse_Version_DEFAULT string

func (p *GetReleaseVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetReleaseVersionResponse_Version_DEFAULT
	}
	return *p.Version
}

var GetReleaseVersionResponse_Force_DEFAULT bool

func (p *GetReleaseVersionResponse) GetForce() (v bool) {
	if !p.IsSetForce() {
		return GetReleaseVersionResponse_Force_DEFAULT
	}
	return *p.Force
}
func (p *GetReleaseVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetReleaseVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetReleaseVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetReleaseVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetReleaseVersionResponse) SetVersion(val *string) {
	p.Version = val
}
func (p *GetReleaseVersionResponse) SetForce(val *bool) {
	p.Force = val
}

func (p *GetReleaseVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetReleaseVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetReleaseVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetReleaseVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetReleaseVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetReleaseVersionResponse) IsSetForce() bool {
	return p.Force != nil
}

func (p *GetReleaseVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionResponse(%+v)", *p)
}

var fieldIDToName_GetReleaseVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
	6: "force",
}

type GetBetaVersionRequest struct {
}

func NewGetBetaVersionRequest() *GetBetaVersionRequest {
	return &GetBetaVersionRequest{}
}

func (p *GetBetaVersionRequest) InitDefault() {
}

func (p *GetBetaVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionRequest(%+v)", *p)
}

var fieldIDToName_GetBetaVersionRequest = map[int16]string{}

type GetBetaVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
	Force   *bool           `thrift:"force,6,optional" frugal:"6,optional,bool" json:"force,omitempty"`
}

func NewGetBetaVersionResponse() *GetBetaVersionResponse {
	return &GetBetaVersionResponse{}
}

func (p *GetBetaVersionResponse) InitDefault() {
}

var GetBetaVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetBetaVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetBetaVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetBetaVersionResponse_Code_DEFAULT string

func (p *GetBetaVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetBetaVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetBetaVersionResponse_Feature_DEFAULT string

func (p *GetBetaVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetBetaVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetBetaVersionResponse_Url_DEFAULT string

func (p *GetBetaVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetBetaVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetBetaVersionResponse_Version_DEFAULT string

func (p *GetBetaVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetBetaVersionResponse_Version_DEFAULT
	}
	return *p.Version
}

var GetBetaVersionResponse_Force_DEFAULT bool

func (p *GetBetaVersionResponse) GetForce() (v bool) {
	if !p.IsSetForce() {
		return GetBetaVersionResponse_Force_DEFAULT
	}
	return *p.Force
}
func (p *GetBetaVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetBetaVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetBetaVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetBetaVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetBetaVersionResponse) SetVersion(val *string) {
	p.Version = val
}
func (p *GetBetaVersionResponse) SetForce(val *bool) {
	p.Force = val
}

func (p *GetBetaVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetBetaVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetBetaVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetBetaVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetBetaVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetBetaVersionResponse) IsSetForce() bool {
	return p.Force != nil
}

func (p *GetBetaVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionResponse(%+v)", *p)
}

var fieldIDToName_GetBetaVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
	6: "force",
}

type GetSettingRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
}

func NewGetSettingRequest() *GetSettingRequest {
	return &GetSettingRequest{}
}

func (p *GetSettingRequest) InitDefault() {
}

var GetSettingRequest_Account_DEFAULT string

func (p *GetSettingRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetSettingRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetSettingRequest_Version_DEFAULT string

func (p *GetSettingRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetSettingRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetSettingRequest_Beta_DEFAULT bool

func (p *GetSettingRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetSettingRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetSettingRequest_Phone_DEFAULT string

func (p *GetSettingRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetSettingRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetSettingRequest_IsLogin_DEFAULT bool

func (p *GetSettingRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetSettingRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetSettingRequest_LoginType_DEFAULT string

func (p *GetSettingRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetSettingRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}
func (p *GetSettingRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetSettingRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetSettingRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetSettingRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetSettingRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetSettingRequest) SetLoginType(val *string) {
	p.LoginType = val
}

func (p *GetSettingRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetSettingRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetSettingRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetSettingRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetSettingRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetSettingRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetSettingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingRequest(%+v)", *p)
}

var fieldIDToName_GetSettingRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
}

type GetSettingResponse struct {
	Base         *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetSettingResponse() *GetSettingResponse {
	return &GetSettingResponse{}
}

func (p *GetSettingResponse) InitDefault() {
}

var GetSettingResponse_Base_DEFAULT *model.BaseResp

func (p *GetSettingResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSettingResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetSettingResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetSettingResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSettingResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetSettingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSettingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingResponse(%+v)", *p)
}

var fieldIDToName_GetSettingResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type GetTestRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
	Setting   *string `thrift:"setting,7,optional" frugal:"7,optional,string" json:"setting,omitempty"`
}

func NewGetTestRequest() *GetTestRequest {
	return &GetTestRequest{}
}

func (p *GetTestRequest) InitDefault() {
}

var GetTestRequest_Account_DEFAULT string

func (p *GetTestRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetTestRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetTestRequest_Version_DEFAULT string

func (p *GetTestRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetTestRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetTestRequest_Beta_DEFAULT bool

func (p *GetTestRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetTestRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetTestRequest_Phone_DEFAULT string

func (p *GetTestRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetTestRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetTestRequest_IsLogin_DEFAULT bool

func (p *GetTestRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetTestRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetTestRequest_LoginType_DEFAULT string

func (p *GetTestRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetTestRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}

var GetTestRequest_Setting_DEFAULT string

func (p *GetTestRequest) GetSetting() (v string) {
	if !p.IsSetSetting() {
		return GetTestRequest_Setting_DEFAULT
	}
	return *p.Setting
}
func (p *GetTestRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetTestRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetTestRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetTestRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetTestRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetTestRequest) SetLoginType(val *string) {
	p.LoginType = val
}
func (p *GetTestRequest) SetSetting(val *string) {
	p.Setting = val
}

func (p *GetTestRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetTestRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetTestRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetTestRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetTestRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetTestRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetTestRequest) IsSetSetting() bool {
	return p.Setting != nil
}

func (p *GetTestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestRequest(%+v)", *p)
}

var fieldIDToName_GetTestRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
	7: "setting",
}

type GetTestResponse struct {
	Base         *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetTestResponse() *GetTestResponse {
	return &GetTestResponse{}
}

func (p *GetTestResponse) InitDefault() {
}

var GetTestResponse_Base_DEFAULT *model.BaseResp

func (p *GetTestResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetTestResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetTestResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetTestResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetTestResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetTestResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestResponse(%+v)", *p)
}

var fieldIDToName_GetTestResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type GetCloudRequest struct {
}

func NewGetCloudRequest() *GetCloudRequest {
	return &GetCloudRequest{}
}

func (p *GetCloudRequest) InitDefault() {
}

func (p *GetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudRequest(%+v)", *p)
}

var fieldIDToName_GetCloudRequest = map[int16]string{}

type GetCloudResponse struct {
	Base         *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetCloudResponse() *GetCloudResponse {
	return &GetCloudResponse{}
}

func (p *GetCloudResponse) InitDefault() {
}

var GetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *GetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetCloudResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCloudResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetCloudResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

func (p *GetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudResponse(%+v)", *p)
}

var fieldIDToName_GetCloudResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

type SetCloudRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
	Setting  string `thrift:"setting,2,required" frugal:"2,required,string" json:"setting"`
}

func NewSetCloudRequest() *SetCloudRequest {
	return &SetCloudRequest{}
}

func (p *SetCloudRequest) InitDefault() {
}

func (p *SetCloudRequest) GetPassword() (v string) {
	return p.Password
}

func (p *SetCloudRequest) GetSetting() (v string) {
	return p.Setting
}
func (p *SetCloudRequest) SetPassword(val string) {
	p.Password = val
}
func (p *SetCloudRequest) SetSetting(val string) {
	p.Setting = val
}

func (p *SetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudRequest(%+v)", *p)
}

var fieldIDToName_SetCloudRequest = map[int16]string{
	1: "password",
	2: "setting",
}

type SetCloudResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewSetCloudResponse() *SetCloudResponse {
	return &SetCloudResponse{}
}

func (p *SetCloudResponse) InitDefault() {
}

var SetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *SetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SetCloudResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *SetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudResponse(%+v)", *p)
}

var fieldIDToName_SetCloudResponse = map[int16]string{
	1: "base",
}

type GetDumpRequest struct {
}

func NewGetDumpRequest() *GetDumpRequest {
	return &GetDumpRequest{}
}

func (p *GetDumpRequest) InitDefault() {
}

func (p *GetDumpRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpRequest(%+v)", *p)
}

var fieldIDToName_GetDumpRequest = map[int16]string{}

type GetDumpResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data string          `thrift:"data,2" frugal:"2,default,string" json:"data"`
}

func NewGetDumpResponse() *GetDumpResponse {
	return &GetDumpResponse{}
}

func (p *GetDumpResponse) InitDefault() {
}

var GetDumpResponse_Base_DEFAULT *model.BaseResp

func (p *GetDumpResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetDumpResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetDumpResponse) GetData() (v string) {
	return p.Data
}
func (p *GetDumpResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetDumpResponse) SetData(val string) {
	p.Data = val
}

func (p *GetDumpResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDumpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpResponse(%+v)", *p)
}

var fieldIDToName_GetDumpResponse = map[int16]string{
	1: "base",
	2: "data",
}

type AndroidGetVersioneRequest struct {
}

func NewAndroidGetVersioneRequest() *AndroidGetVersioneRequest {
	return &AndroidGetVersioneRequest{}
}

func (p *AndroidGetVersioneRequest) InitDefault() {
}

func (p *AndroidGetVersioneRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AndroidGetVersioneRequest(%+v)", *p)
}

var fieldIDToName_AndroidGetVersioneRequest = map[int16]string{}

type AndroidGetVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Release *model.Version  `thrift:"release,2,optional" frugal:"2,optional,model.Version" json:"release,omitempty"`
	Beta    *model.Version  `thrift:"beta,3,optional" frugal:"3,optional,model.Version" json:"beta,omitempty"`
}

func NewAndroidGetVersionResponse() *AndroidGetVersionResponse {
	return &AndroidGetVersionResponse{}
}

func (p *AndroidGetVersionResponse) InitDefault() {
}

var AndroidGetVersionResponse_Base_DEFAULT *model.BaseResp

func (p *AndroidGetVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AndroidGetVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var AndroidGetVersionResponse_Release_DEFAULT *model.Version

func (p *AndroidGetVersionResponse) GetRelease() (v *model.Version) {
	if !p.IsSetRelease() {
		return AndroidGetVersionResponse_Release_DEFAULT
	}
	return p.Release
}

var AndroidGetVersionResponse_Beta_DEFAULT *model.Version

func (p *AndroidGetVersionResponse) GetBeta() (v *model.Version) {
	if !p.IsSetBeta() {
		return AndroidGetVersionResponse_Beta_DEFAULT
	}
	return p.Beta
}
func (p *AndroidGetVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AndroidGetVersionResponse) SetRelease(val *model.Version) {
	p.Release = val
}
func (p *AndroidGetVersionResponse) SetBeta(val *model.Version) {
	p.Beta = val
}

func (p *AndroidGetVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AndroidGetVersionResponse) IsSetRelease() bool {
	return p.Release != nil
}

func (p *AndroidGetVersionResponse) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *AndroidGetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AndroidGetVersionResponse(%+v)", *p)
}

var fieldIDToName_AndroidGetVersionResponse = map[int16]string{
	1: "base",
	2: "release",
	3: "beta",
}

type VersionService interface {
	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	UploadVersion(ctx context.Context, req *UploadRequest) (r *UploadResponse, err error)

	UploadParams(ctx context.Context, req *UploadParamsRequest) (r *UploadParamsResponse, err error)

	DownloadReleaseApk(ctx context.Context, req *DownloadReleaseApkRequest) (r *DownloadReleaseApkResponse, err error)

	DownloadBetaApk(ctx context.Context, req *DownloadBetaApkRequest) (r *DownloadBetaApkResponse, err error)

	GetReleaseVersion(ctx context.Context, req *GetReleaseVersionRequest) (r *GetReleaseVersionResponse, err error)

	GetBetaVersion(ctx context.Context, req *GetBetaVersionRequest) (r *GetBetaVersionResponse, err error)

	GetSetting(ctx context.Context, req *GetSettingRequest) (r *GetSettingResponse, err error)

	GetTest(ctx context.Context, req *GetTestRequest) (r *GetTestResponse, err error)

	GetCloud(ctx context.Context, req *GetCloudRequest) (r *GetCloudResponse, err error)

	SetCloud(ctx context.Context, req *SetCloudRequest) (r *SetCloudResponse, err error)

	GetDump(ctx context.Context, req *GetDumpRequest) (r *GetDumpResponse, err error)

	AndroidGetVersion(ctx context.Context, req *AndroidGetVersioneRequest) (r *AndroidGetVersionResponse, err error)
}

type VersionServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewVersionServiceLoginArgs() *VersionServiceLoginArgs {
	return &VersionServiceLoginArgs{}
}

func (p *VersionServiceLoginArgs) InitDefault() {
}

var VersionServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *VersionServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return VersionServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *VersionServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceLoginArgs = map[int16]string{
	1: "req",
}

type VersionServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewVersionServiceLoginResult() *VersionServiceLoginResult {
	return &VersionServiceLoginResult{}
}

func (p *VersionServiceLoginResult) InitDefault() {
}

var VersionServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *VersionServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *VersionServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginResult(%+v)", *p)
}

var fieldIDToName_VersionServiceLoginResult = map[int16]string{
	0: "success",
}

type VersionServiceUploadVersionArgs struct {
	Req *UploadRequest `thrift:"req,1" frugal:"1,default,UploadRequest" json:"req"`
}

func NewVersionServiceUploadVersionArgs() *VersionServiceUploadVersionArgs {
	return &VersionServiceUploadVersionArgs{}
}

func (p *VersionServiceUploadVersionArgs) InitDefault() {
}

var VersionServiceUploadVersionArgs_Req_DEFAULT *UploadRequest

func (p *VersionServiceUploadVersionArgs) GetReq() (v *UploadRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadVersionArgs) SetReq(val *UploadRequest) {
	p.Req = val
}

func (p *VersionServiceUploadVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceUploadVersionResult struct {
	Success *UploadResponse `thrift:"success,0,optional" frugal:"0,optional,UploadResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadVersionResult() *VersionServiceUploadVersionResult {
	return &VersionServiceUploadVersionResult{}
}

func (p *VersionServiceUploadVersionResult) InitDefault() {
}

var VersionServiceUploadVersionResult_Success_DEFAULT *UploadResponse

func (p *VersionServiceUploadVersionResult) GetSuccess() (v *UploadResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadResponse)
}

func (p *VersionServiceUploadVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceUploadParamsArgs struct {
	Req *UploadParamsRequest `thrift:"req,1" frugal:"1,default,UploadParamsRequest" json:"req"`
}

func NewVersionServiceUploadParamsArgs() *VersionServiceUploadParamsArgs {
	return &VersionServiceUploadParamsArgs{}
}

func (p *VersionServiceUploadParamsArgs) InitDefault() {
}

var VersionServiceUploadParamsArgs_Req_DEFAULT *UploadParamsRequest

func (p *VersionServiceUploadParamsArgs) GetReq() (v *UploadParamsRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadParamsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadParamsArgs) SetReq(val *UploadParamsRequest) {
	p.Req = val
}

func (p *VersionServiceUploadParamsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadParamsArgs = map[int16]string{
	1: "req",
}

type VersionServiceUploadParamsResult struct {
	Success *UploadParamsResponse `thrift:"success,0,optional" frugal:"0,optional,UploadParamsResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadParamsResult() *VersionServiceUploadParamsResult {
	return &VersionServiceUploadParamsResult{}
}

func (p *VersionServiceUploadParamsResult) InitDefault() {
}

var VersionServiceUploadParamsResult_Success_DEFAULT *UploadParamsResponse

func (p *VersionServiceUploadParamsResult) GetSuccess() (v *UploadParamsResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadParamsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadParamsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadParamsResponse)
}

func (p *VersionServiceUploadParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsResult(%+v)", *p)
}

var fieldIDToName_VersionServiceUploadParamsResult = map[int16]string{
	0: "success",
}

type VersionServiceDownloadReleaseApkArgs struct {
	Req *DownloadReleaseApkRequest `thrift:"req,1" frugal:"1,default,DownloadReleaseApkRequest" json:"req"`
}

func NewVersionServiceDownloadReleaseApkArgs() *VersionServiceDownloadReleaseApkArgs {
	return &VersionServiceDownloadReleaseApkArgs{}
}

func (p *VersionServiceDownloadReleaseApkArgs) InitDefault() {
}

var VersionServiceDownloadReleaseApkArgs_Req_DEFAULT *DownloadReleaseApkRequest

func (p *VersionServiceDownloadReleaseApkArgs) GetReq() (v *DownloadReleaseApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadReleaseApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadReleaseApkArgs) SetReq(val *DownloadReleaseApkRequest) {
	p.Req = val
}

func (p *VersionServiceDownloadReleaseApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadReleaseApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadReleaseApkArgs = map[int16]string{
	1: "req",
}

type VersionServiceDownloadReleaseApkResult struct {
	Success *DownloadReleaseApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadReleaseApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadReleaseApkResult() *VersionServiceDownloadReleaseApkResult {
	return &VersionServiceDownloadReleaseApkResult{}
}

func (p *VersionServiceDownloadReleaseApkResult) InitDefault() {
}

var VersionServiceDownloadReleaseApkResult_Success_DEFAULT *DownloadReleaseApkResponse

func (p *VersionServiceDownloadReleaseApkResult) GetSuccess() (v *DownloadReleaseApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadReleaseApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadReleaseApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadReleaseApkResponse)
}

func (p *VersionServiceDownloadReleaseApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadReleaseApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkResult(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadReleaseApkResult = map[int16]string{
	0: "success",
}

type VersionServiceDownloadBetaApkArgs struct {
	Req *DownloadBetaApkRequest `thrift:"req,1" frugal:"1,default,DownloadBetaApkRequest" json:"req"`
}

func NewVersionServiceDownloadBetaApkArgs() *VersionServiceDownloadBetaApkArgs {
	return &VersionServiceDownloadBetaApkArgs{}
}

func (p *VersionServiceDownloadBetaApkArgs) InitDefault() {
}

var VersionServiceDownloadBetaApkArgs_Req_DEFAULT *DownloadBetaApkRequest

func (p *VersionServiceDownloadBetaApkArgs) GetReq() (v *DownloadBetaApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadBetaApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadBetaApkArgs) SetReq(val *DownloadBetaApkRequest) {
	p.Req = val
}

func (p *VersionServiceDownloadBetaApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadBetaApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadBetaApkArgs = map[int16]string{
	1: "req",
}

type VersionServiceDownloadBetaApkResult struct {
	Success *DownloadBetaApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadBetaApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadBetaApkResult() *VersionServiceDownloadBetaApkResult {
	return &VersionServiceDownloadBetaApkResult{}
}

func (p *VersionServiceDownloadBetaApkResult) InitDefault() {
}

var VersionServiceDownloadBetaApkResult_Success_DEFAULT *DownloadBetaApkResponse

func (p *VersionServiceDownloadBetaApkResult) GetSuccess() (v *DownloadBetaApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadBetaApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadBetaApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadBetaApkResponse)
}

func (p *VersionServiceDownloadBetaApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadBetaApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkResult(%+v)", *p)
}

var fieldIDToName_VersionServiceDownloadBetaApkResult = map[int16]string{
	0: "success",
}

type VersionServiceGetReleaseVersionArgs struct {
	Req *GetReleaseVersionRequest `thrift:"req,1" frugal:"1,default,GetReleaseVersionRequest" json:"req"`
}

func NewVersionServiceGetReleaseVersionArgs() *VersionServiceGetReleaseVersionArgs {
	return &VersionServiceGetReleaseVersionArgs{}
}

func (p *VersionServiceGetReleaseVersionArgs) InitDefault() {
}

var VersionServiceGetReleaseVersionArgs_Req_DEFAULT *GetReleaseVersionRequest

func (p *VersionServiceGetReleaseVersionArgs) GetReq() (v *GetReleaseVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetReleaseVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetReleaseVersionArgs) SetReq(val *GetReleaseVersionRequest) {
	p.Req = val
}

func (p *VersionServiceGetReleaseVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetReleaseVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetReleaseVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetReleaseVersionResult struct {
	Success *GetReleaseVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetReleaseVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetReleaseVersionResult() *VersionServiceGetReleaseVersionResult {
	return &VersionServiceGetReleaseVersionResult{}
}

func (p *VersionServiceGetReleaseVersionResult) InitDefault() {
}

var VersionServiceGetReleaseVersionResult_Success_DEFAULT *GetReleaseVersionResponse

func (p *VersionServiceGetReleaseVersionResult) GetSuccess() (v *GetReleaseVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetReleaseVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetReleaseVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetReleaseVersionResponse)
}

func (p *VersionServiceGetReleaseVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetReleaseVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetReleaseVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceGetBetaVersionArgs struct {
	Req *GetBetaVersionRequest `thrift:"req,1" frugal:"1,default,GetBetaVersionRequest" json:"req"`
}

func NewVersionServiceGetBetaVersionArgs() *VersionServiceGetBetaVersionArgs {
	return &VersionServiceGetBetaVersionArgs{}
}

func (p *VersionServiceGetBetaVersionArgs) InitDefault() {
}

var VersionServiceGetBetaVersionArgs_Req_DEFAULT *GetBetaVersionRequest

func (p *VersionServiceGetBetaVersionArgs) GetReq() (v *GetBetaVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetBetaVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetBetaVersionArgs) SetReq(val *GetBetaVersionRequest) {
	p.Req = val
}

func (p *VersionServiceGetBetaVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetBetaVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetBetaVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetBetaVersionResult struct {
	Success *GetBetaVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetBetaVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetBetaVersionResult() *VersionServiceGetBetaVersionResult {
	return &VersionServiceGetBetaVersionResult{}
}

func (p *VersionServiceGetBetaVersionResult) InitDefault() {
}

var VersionServiceGetBetaVersionResult_Success_DEFAULT *GetBetaVersionResponse

func (p *VersionServiceGetBetaVersionResult) GetSuccess() (v *GetBetaVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetBetaVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetBetaVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetBetaVersionResponse)
}

func (p *VersionServiceGetBetaVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetBetaVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetBetaVersionResult = map[int16]string{
	0: "success",
}

type VersionServiceGetSettingArgs struct {
	Req *GetSettingRequest `thrift:"req,1" frugal:"1,default,GetSettingRequest" json:"req"`
}

func NewVersionServiceGetSettingArgs() *VersionServiceGetSettingArgs {
	return &VersionServiceGetSettingArgs{}
}

func (p *VersionServiceGetSettingArgs) InitDefault() {
}

var VersionServiceGetSettingArgs_Req_DEFAULT *GetSettingRequest

func (p *VersionServiceGetSettingArgs) GetReq() (v *GetSettingRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetSettingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetSettingArgs) SetReq(val *GetSettingRequest) {
	p.Req = val
}

func (p *VersionServiceGetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetSettingArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetSettingResult struct {
	Success *GetSettingResponse `thrift:"success,0,optional" frugal:"0,optional,GetSettingResponse" json:"success,omitempty"`
}

func NewVersionServiceGetSettingResult() *VersionServiceGetSettingResult {
	return &VersionServiceGetSettingResult{}
}

func (p *VersionServiceGetSettingResult) InitDefault() {
}

var VersionServiceGetSettingResult_Success_DEFAULT *GetSettingResponse

func (p *VersionServiceGetSettingResult) GetSuccess() (v *GetSettingResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetSettingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSettingResponse)
}

func (p *VersionServiceGetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetSettingResult = map[int16]string{
	0: "success",
}

type VersionServiceGetTestArgs struct {
	Req *GetTestRequest `thrift:"req,1" frugal:"1,default,GetTestRequest" json:"req"`
}

func NewVersionServiceGetTestArgs() *VersionServiceGetTestArgs {
	return &VersionServiceGetTestArgs{}
}

func (p *VersionServiceGetTestArgs) InitDefault() {
}

var VersionServiceGetTestArgs_Req_DEFAULT *GetTestRequest

func (p *VersionServiceGetTestArgs) GetReq() (v *GetTestRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetTestArgs) SetReq(val *GetTestRequest) {
	p.Req = val
}

func (p *VersionServiceGetTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetTestArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetTestResult struct {
	Success *GetTestResponse `thrift:"success,0,optional" frugal:"0,optional,GetTestResponse" json:"success,omitempty"`
}

func NewVersionServiceGetTestResult() *VersionServiceGetTestResult {
	return &VersionServiceGetTestResult{}
}

func (p *VersionServiceGetTestResult) InitDefault() {
}

var VersionServiceGetTestResult_Success_DEFAULT *GetTestResponse

func (p *VersionServiceGetTestResult) GetSuccess() (v *GetTestResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTestResponse)
}

func (p *VersionServiceGetTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetTestResult = map[int16]string{
	0: "success",
}

type VersionServiceGetCloudArgs struct {
	Req *GetCloudRequest `thrift:"req,1" frugal:"1,default,GetCloudRequest" json:"req"`
}

func NewVersionServiceGetCloudArgs() *VersionServiceGetCloudArgs {
	return &VersionServiceGetCloudArgs{}
}

func (p *VersionServiceGetCloudArgs) InitDefault() {
}

var VersionServiceGetCloudArgs_Req_DEFAULT *GetCloudRequest

func (p *VersionServiceGetCloudArgs) GetReq() (v *GetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetCloudArgs) SetReq(val *GetCloudRequest) {
	p.Req = val
}

func (p *VersionServiceGetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetCloudArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetCloudResult struct {
	Success *GetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,GetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceGetCloudResult() *VersionServiceGetCloudResult {
	return &VersionServiceGetCloudResult{}
}

func (p *VersionServiceGetCloudResult) InitDefault() {
}

var VersionServiceGetCloudResult_Success_DEFAULT *GetCloudResponse

func (p *VersionServiceGetCloudResult) GetSuccess() (v *GetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCloudResponse)
}

func (p *VersionServiceGetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetCloudResult = map[int16]string{
	0: "success",
}

type VersionServiceSetCloudArgs struct {
	Req *SetCloudRequest `thrift:"req,1" frugal:"1,default,SetCloudRequest" json:"req"`
}

func NewVersionServiceSetCloudArgs() *VersionServiceSetCloudArgs {
	return &VersionServiceSetCloudArgs{}
}

func (p *VersionServiceSetCloudArgs) InitDefault() {
}

var VersionServiceSetCloudArgs_Req_DEFAULT *SetCloudRequest

func (p *VersionServiceSetCloudArgs) GetReq() (v *SetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceSetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceSetCloudArgs) SetReq(val *SetCloudRequest) {
	p.Req = val
}

func (p *VersionServiceSetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceSetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceSetCloudArgs = map[int16]string{
	1: "req",
}

type VersionServiceSetCloudResult struct {
	Success *SetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,SetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceSetCloudResult() *VersionServiceSetCloudResult {
	return &VersionServiceSetCloudResult{}
}

func (p *VersionServiceSetCloudResult) InitDefault() {
}

var VersionServiceSetCloudResult_Success_DEFAULT *SetCloudResponse

func (p *VersionServiceSetCloudResult) GetSuccess() (v *SetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceSetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceSetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetCloudResponse)
}

func (p *VersionServiceSetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceSetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudResult(%+v)", *p)
}

var fieldIDToName_VersionServiceSetCloudResult = map[int16]string{
	0: "success",
}

type VersionServiceGetDumpArgs struct {
	Req *GetDumpRequest `thrift:"req,1" frugal:"1,default,GetDumpRequest" json:"req"`
}

func NewVersionServiceGetDumpArgs() *VersionServiceGetDumpArgs {
	return &VersionServiceGetDumpArgs{}
}

func (p *VersionServiceGetDumpArgs) InitDefault() {
}

var VersionServiceGetDumpArgs_Req_DEFAULT *GetDumpRequest

func (p *VersionServiceGetDumpArgs) GetReq() (v *GetDumpRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetDumpArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetDumpArgs) SetReq(val *GetDumpRequest) {
	p.Req = val
}

func (p *VersionServiceGetDumpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetDumpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceGetDumpArgs = map[int16]string{
	1: "req",
}

type VersionServiceGetDumpResult struct {
	Success *GetDumpResponse `thrift:"success,0,optional" frugal:"0,optional,GetDumpResponse" json:"success,omitempty"`
}

func NewVersionServiceGetDumpResult() *VersionServiceGetDumpResult {
	return &VersionServiceGetDumpResult{}
}

func (p *VersionServiceGetDumpResult) InitDefault() {
}

var VersionServiceGetDumpResult_Success_DEFAULT *GetDumpResponse

func (p *VersionServiceGetDumpResult) GetSuccess() (v *GetDumpResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetDumpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetDumpResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDumpResponse)
}

func (p *VersionServiceGetDumpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetDumpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpResult(%+v)", *p)
}

var fieldIDToName_VersionServiceGetDumpResult = map[int16]string{
	0: "success",
}

type VersionServiceAndroidGetVersionArgs struct {
	Req *AndroidGetVersioneRequest `thrift:"req,1" frugal:"1,default,AndroidGetVersioneRequest" json:"req"`
}

func NewVersionServiceAndroidGetVersionArgs() *VersionServiceAndroidGetVersionArgs {
	return &VersionServiceAndroidGetVersionArgs{}
}

func (p *VersionServiceAndroidGetVersionArgs) InitDefault() {
}

var VersionServiceAndroidGetVersionArgs_Req_DEFAULT *AndroidGetVersioneRequest

func (p *VersionServiceAndroidGetVersionArgs) GetReq() (v *AndroidGetVersioneRequest) {
	if !p.IsSetReq() {
		return VersionServiceAndroidGetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceAndroidGetVersionArgs) SetReq(val *AndroidGetVersioneRequest) {
	p.Req = val
}

func (p *VersionServiceAndroidGetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceAndroidGetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceAndroidGetVersionArgs(%+v)", *p)
}

var fieldIDToName_VersionServiceAndroidGetVersionArgs = map[int16]string{
	1: "req",
}

type VersionServiceAndroidGetVersionResult struct {
	Success *AndroidGetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,AndroidGetVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceAndroidGetVersionResult() *VersionServiceAndroidGetVersionResult {
	return &VersionServiceAndroidGetVersionResult{}
}

func (p *VersionServiceAndroidGetVersionResult) InitDefault() {
}

var VersionServiceAndroidGetVersionResult_Success_DEFAULT *AndroidGetVersionResponse

func (p *VersionServiceAndroidGetVersionResult) GetSuccess() (v *AndroidGetVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceAndroidGetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceAndroidGetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*AndroidGetVersionResponse)
}

func (p *VersionServiceAndroidGetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceAndroidGetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceAndroidGetVersionResult(%+v)", *p)
}

var fieldIDToName_VersionServiceAndroidGetVersionResult = map[int16]string{
	0: "success",
}
