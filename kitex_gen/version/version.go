/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package version

import (
	"bytes"
	"context"
	"fmt"
	"strings"

	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type LoginRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "password",
}

func (p *LoginRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPassword {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginRequest[fieldId]))
}

func (p *LoginRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *LoginRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)

}

func (p *LoginRequest) DeepEqual(ano *LoginRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *LoginRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type LoginResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *LoginResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)

}

func (p *LoginResponse) DeepEqual(ano *LoginResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *LoginResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UploadRequest struct {
	Version  string `thrift:"version,1,required" frugal:"1,required,string" json:"version"`
	Code     string `thrift:"code,2,required" frugal:"2,required,string" json:"code"`
	Url      string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	Feature  string `thrift:"feature,4,required" frugal:"4,required,string" json:"feature"`
	Type     string `thrift:"type,5,required" frugal:"5,required,string" json:"type"`
	Password string `thrift:"password,6,required" frugal:"6,required,string" json:"password"`
}

func NewUploadRequest() *UploadRequest {
	return &UploadRequest{}
}

func (p *UploadRequest) InitDefault() {
}

func (p *UploadRequest) GetVersion() (v string) {
	return p.Version
}

func (p *UploadRequest) GetCode() (v string) {
	return p.Code
}

func (p *UploadRequest) GetUrl() (v string) {
	return p.Url
}

func (p *UploadRequest) GetFeature() (v string) {
	return p.Feature
}

func (p *UploadRequest) GetType() (v string) {
	return p.Type
}

func (p *UploadRequest) GetPassword() (v string) {
	return p.Password
}
func (p *UploadRequest) SetVersion(val string) {
	p.Version = val
}
func (p *UploadRequest) SetCode(val string) {
	p.Code = val
}
func (p *UploadRequest) SetUrl(val string) {
	p.Url = val
}
func (p *UploadRequest) SetFeature(val string) {
	p.Feature = val
}
func (p *UploadRequest) SetType(val string) {
	p.Type = val
}
func (p *UploadRequest) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_UploadRequest = map[int16]string{
	1: "version",
	2: "code",
	3: "url",
	4: "feature",
	5: "type",
	6: "password",
}

func (p *UploadRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersion bool = false
	var issetCode bool = false
	var issetUrl bool = false
	var issetFeature bool = false
	var issetType bool = false
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFeature = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUrl {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFeature {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadRequest[fieldId]))
}

func (p *UploadRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *UploadRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *UploadRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *UploadRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Feature = _field
	return nil
}
func (p *UploadRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *UploadRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *UploadRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UploadRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("feature", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Feature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UploadRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UploadRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UploadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadRequest(%+v)", *p)

}

func (p *UploadRequest) DeepEqual(ano *UploadRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.Code) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.Feature) {
		return false
	}
	if !p.Field5DeepEqual(ano.Type) {
		return false
	}
	if !p.Field6DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *UploadRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *UploadRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *UploadRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *UploadRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Feature, src) != 0 {
		return false
	}
	return true
}
func (p *UploadRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *UploadRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type UploadResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewUploadResponse() *UploadResponse {
	return &UploadResponse{}
}

func (p *UploadResponse) InitDefault() {
}

var UploadResponse_Base_DEFAULT *model.BaseResp

func (p *UploadResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

var fieldIDToName_UploadResponse = map[int16]string{
	1: "base",
}

func (p *UploadResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UploadResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadResponse(%+v)", *p)

}

func (p *UploadResponse) DeepEqual(ano *UploadResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UploadResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UploadParamsRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
}

func NewUploadParamsRequest() *UploadParamsRequest {
	return &UploadParamsRequest{}
}

func (p *UploadParamsRequest) InitDefault() {
}

func (p *UploadParamsRequest) GetPassword() (v string) {
	return p.Password
}
func (p *UploadParamsRequest) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_UploadParamsRequest = map[int16]string{
	1: "password",
}

func (p *UploadParamsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPassword {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadParamsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadParamsRequest[fieldId]))
}

func (p *UploadParamsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *UploadParamsRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadParamsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadParamsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadParamsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsRequest(%+v)", *p)

}

func (p *UploadParamsRequest) DeepEqual(ano *UploadParamsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *UploadParamsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type UploadParamsResponse struct {
	Base          *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Policy        *string         `thrift:"policy,2,optional" frugal:"2,optional,string" json:"policy,omitempty"`
	Authorization *string         `thrift:"authorization,3,optional" frugal:"3,optional,string" json:"authorization,omitempty"`
}

func NewUploadParamsResponse() *UploadParamsResponse {
	return &UploadParamsResponse{}
}

func (p *UploadParamsResponse) InitDefault() {
}

var UploadParamsResponse_Base_DEFAULT *model.BaseResp

func (p *UploadParamsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadParamsResponse_Base_DEFAULT
	}
	return p.Base
}

var UploadParamsResponse_Policy_DEFAULT string

func (p *UploadParamsResponse) GetPolicy() (v string) {
	if !p.IsSetPolicy() {
		return UploadParamsResponse_Policy_DEFAULT
	}
	return *p.Policy
}

var UploadParamsResponse_Authorization_DEFAULT string

func (p *UploadParamsResponse) GetAuthorization() (v string) {
	if !p.IsSetAuthorization() {
		return UploadParamsResponse_Authorization_DEFAULT
	}
	return *p.Authorization
}
func (p *UploadParamsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UploadParamsResponse) SetPolicy(val *string) {
	p.Policy = val
}
func (p *UploadParamsResponse) SetAuthorization(val *string) {
	p.Authorization = val
}

var fieldIDToName_UploadParamsResponse = map[int16]string{
	1: "base",
	2: "policy",
	3: "authorization",
}

func (p *UploadParamsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadParamsResponse) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *UploadParamsResponse) IsSetAuthorization() bool {
	return p.Authorization != nil
}

func (p *UploadParamsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadParamsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadParamsResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *UploadParamsResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Policy = _field
	return nil
}
func (p *UploadParamsResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Authorization = _field
	return nil
}

func (p *UploadParamsResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadParamsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadParamsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadParamsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPolicy() {
		if err = oprot.WriteFieldBegin("policy", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Policy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadParamsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorization() {
		if err = oprot.WriteFieldBegin("authorization", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Authorization); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UploadParamsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadParamsResponse(%+v)", *p)

}

func (p *UploadParamsResponse) DeepEqual(ano *UploadParamsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Policy) {
		return false
	}
	if !p.Field3DeepEqual(ano.Authorization) {
		return false
	}
	return true
}

func (p *UploadParamsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadParamsResponse) Field2DeepEqual(src *string) bool {

	if p.Policy == src {
		return true
	} else if p.Policy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Policy, *src) != 0 {
		return false
	}
	return true
}
func (p *UploadParamsResponse) Field3DeepEqual(src *string) bool {

	if p.Authorization == src {
		return true
	} else if p.Authorization == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Authorization, *src) != 0 {
		return false
	}
	return true
}

type DownloadReleaseApkRequest struct {
}

func NewDownloadReleaseApkRequest() *DownloadReleaseApkRequest {
	return &DownloadReleaseApkRequest{}
}

func (p *DownloadReleaseApkRequest) InitDefault() {
}

var fieldIDToName_DownloadReleaseApkRequest = map[int16]string{}

func (p *DownloadReleaseApkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DownloadReleaseApkRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("DownloadReleaseApkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DownloadReleaseApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkRequest(%+v)", *p)

}

func (p *DownloadReleaseApkRequest) DeepEqual(ano *DownloadReleaseApkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DownloadReleaseApkResponse struct {
	Base        *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	RedirectUrl string          `thrift:"redirect_url,2" frugal:"2,default,string" json:"redirect_url"`
}

func NewDownloadReleaseApkResponse() *DownloadReleaseApkResponse {
	return &DownloadReleaseApkResponse{}
}

func (p *DownloadReleaseApkResponse) InitDefault() {
}

var DownloadReleaseApkResponse_Base_DEFAULT *model.BaseResp

func (p *DownloadReleaseApkResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DownloadReleaseApkResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *DownloadReleaseApkResponse) GetRedirectUrl() (v string) {
	return p.RedirectUrl
}
func (p *DownloadReleaseApkResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *DownloadReleaseApkResponse) SetRedirectUrl(val string) {
	p.RedirectUrl = val
}

var fieldIDToName_DownloadReleaseApkResponse = map[int16]string{
	1: "base",
	2: "redirect_url",
}

func (p *DownloadReleaseApkResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DownloadReleaseApkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DownloadReleaseApkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DownloadReleaseApkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *DownloadReleaseApkResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RedirectUrl = _field
	return nil
}

func (p *DownloadReleaseApkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadReleaseApkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DownloadReleaseApkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DownloadReleaseApkResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("redirect_url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RedirectUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DownloadReleaseApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadReleaseApkResponse(%+v)", *p)

}

func (p *DownloadReleaseApkResponse) DeepEqual(ano *DownloadReleaseApkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.RedirectUrl) {
		return false
	}
	return true
}

func (p *DownloadReleaseApkResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DownloadReleaseApkResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.RedirectUrl, src) != 0 {
		return false
	}
	return true
}

type DownloadBetaApkRequest struct {
}

func NewDownloadBetaApkRequest() *DownloadBetaApkRequest {
	return &DownloadBetaApkRequest{}
}

func (p *DownloadBetaApkRequest) InitDefault() {
}

var fieldIDToName_DownloadBetaApkRequest = map[int16]string{}

func (p *DownloadBetaApkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DownloadBetaApkRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("DownloadBetaApkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DownloadBetaApkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkRequest(%+v)", *p)

}

func (p *DownloadBetaApkRequest) DeepEqual(ano *DownloadBetaApkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DownloadBetaApkResponse struct {
	Base        *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	RedirectUrl string          `thrift:"redirect_url,2" frugal:"2,default,string" json:"redirect_url"`
}

func NewDownloadBetaApkResponse() *DownloadBetaApkResponse {
	return &DownloadBetaApkResponse{}
}

func (p *DownloadBetaApkResponse) InitDefault() {
}

var DownloadBetaApkResponse_Base_DEFAULT *model.BaseResp

func (p *DownloadBetaApkResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DownloadBetaApkResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *DownloadBetaApkResponse) GetRedirectUrl() (v string) {
	return p.RedirectUrl
}
func (p *DownloadBetaApkResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *DownloadBetaApkResponse) SetRedirectUrl(val string) {
	p.RedirectUrl = val
}

var fieldIDToName_DownloadBetaApkResponse = map[int16]string{
	1: "base",
	2: "redirect_url",
}

func (p *DownloadBetaApkResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DownloadBetaApkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DownloadBetaApkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DownloadBetaApkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *DownloadBetaApkResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RedirectUrl = _field
	return nil
}

func (p *DownloadBetaApkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadBetaApkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DownloadBetaApkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DownloadBetaApkResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("redirect_url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RedirectUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DownloadBetaApkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadBetaApkResponse(%+v)", *p)

}

func (p *DownloadBetaApkResponse) DeepEqual(ano *DownloadBetaApkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.RedirectUrl) {
		return false
	}
	return true
}

func (p *DownloadBetaApkResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DownloadBetaApkResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.RedirectUrl, src) != 0 {
		return false
	}
	return true
}

type GetReleaseVersionRequest struct {
}

func NewGetReleaseVersionRequest() *GetReleaseVersionRequest {
	return &GetReleaseVersionRequest{}
}

func (p *GetReleaseVersionRequest) InitDefault() {
}

var fieldIDToName_GetReleaseVersionRequest = map[int16]string{}

func (p *GetReleaseVersionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetReleaseVersionRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetReleaseVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetReleaseVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionRequest(%+v)", *p)

}

func (p *GetReleaseVersionRequest) DeepEqual(ano *GetReleaseVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetReleaseVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
}

func NewGetReleaseVersionResponse() *GetReleaseVersionResponse {
	return &GetReleaseVersionResponse{}
}

func (p *GetReleaseVersionResponse) InitDefault() {
}

var GetReleaseVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetReleaseVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetReleaseVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetReleaseVersionResponse_Code_DEFAULT string

func (p *GetReleaseVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetReleaseVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetReleaseVersionResponse_Feature_DEFAULT string

func (p *GetReleaseVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetReleaseVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetReleaseVersionResponse_Url_DEFAULT string

func (p *GetReleaseVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetReleaseVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetReleaseVersionResponse_Version_DEFAULT string

func (p *GetReleaseVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetReleaseVersionResponse_Version_DEFAULT
	}
	return *p.Version
}
func (p *GetReleaseVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetReleaseVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetReleaseVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetReleaseVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetReleaseVersionResponse) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_GetReleaseVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
}

func (p *GetReleaseVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetReleaseVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetReleaseVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetReleaseVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetReleaseVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetReleaseVersionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetReleaseVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetReleaseVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetReleaseVersionResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetReleaseVersionResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Feature = _field
	return nil
}
func (p *GetReleaseVersionResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Url = _field
	return nil
}
func (p *GetReleaseVersionResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *GetReleaseVersionResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleaseVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetReleaseVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetReleaseVersionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetReleaseVersionResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeature() {
		if err = oprot.WriteFieldBegin("feature", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Feature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetReleaseVersionResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUrl() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Url); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetReleaseVersionResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetReleaseVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseVersionResponse(%+v)", *p)

}

func (p *GetReleaseVersionResponse) DeepEqual(ano *GetReleaseVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Code) {
		return false
	}
	if !p.Field3DeepEqual(ano.Feature) {
		return false
	}
	if !p.Field4DeepEqual(ano.Url) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *GetReleaseVersionResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetReleaseVersionResponse) Field2DeepEqual(src *string) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Code, *src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseVersionResponse) Field3DeepEqual(src *string) bool {

	if p.Feature == src {
		return true
	} else if p.Feature == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Feature, *src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseVersionResponse) Field4DeepEqual(src *string) bool {

	if p.Url == src {
		return true
	} else if p.Url == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Url, *src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseVersionResponse) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

type GetBetaVersionRequest struct {
}

func NewGetBetaVersionRequest() *GetBetaVersionRequest {
	return &GetBetaVersionRequest{}
}

func (p *GetBetaVersionRequest) InitDefault() {
}

var fieldIDToName_GetBetaVersionRequest = map[int16]string{}

func (p *GetBetaVersionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetBetaVersionRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetBetaVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetBetaVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionRequest(%+v)", *p)

}

func (p *GetBetaVersionRequest) DeepEqual(ano *GetBetaVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetBetaVersionResponse struct {
	Base    *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Code    *string         `thrift:"code,2,optional" frugal:"2,optional,string" json:"code,omitempty"`
	Feature *string         `thrift:"feature,3,optional" frugal:"3,optional,string" json:"feature,omitempty"`
	Url     *string         `thrift:"url,4,optional" frugal:"4,optional,string" json:"url,omitempty"`
	Version *string         `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
}

func NewGetBetaVersionResponse() *GetBetaVersionResponse {
	return &GetBetaVersionResponse{}
}

func (p *GetBetaVersionResponse) InitDefault() {
}

var GetBetaVersionResponse_Base_DEFAULT *model.BaseResp

func (p *GetBetaVersionResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetBetaVersionResponse_Base_DEFAULT
	}
	return p.Base
}

var GetBetaVersionResponse_Code_DEFAULT string

func (p *GetBetaVersionResponse) GetCode() (v string) {
	if !p.IsSetCode() {
		return GetBetaVersionResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetBetaVersionResponse_Feature_DEFAULT string

func (p *GetBetaVersionResponse) GetFeature() (v string) {
	if !p.IsSetFeature() {
		return GetBetaVersionResponse_Feature_DEFAULT
	}
	return *p.Feature
}

var GetBetaVersionResponse_Url_DEFAULT string

func (p *GetBetaVersionResponse) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return GetBetaVersionResponse_Url_DEFAULT
	}
	return *p.Url
}

var GetBetaVersionResponse_Version_DEFAULT string

func (p *GetBetaVersionResponse) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetBetaVersionResponse_Version_DEFAULT
	}
	return *p.Version
}
func (p *GetBetaVersionResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetBetaVersionResponse) SetCode(val *string) {
	p.Code = val
}
func (p *GetBetaVersionResponse) SetFeature(val *string) {
	p.Feature = val
}
func (p *GetBetaVersionResponse) SetUrl(val *string) {
	p.Url = val
}
func (p *GetBetaVersionResponse) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_GetBetaVersionResponse = map[int16]string{
	1: "base",
	2: "code",
	3: "feature",
	4: "url",
	5: "version",
}

func (p *GetBetaVersionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetBetaVersionResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetBetaVersionResponse) IsSetFeature() bool {
	return p.Feature != nil
}

func (p *GetBetaVersionResponse) IsSetUrl() bool {
	return p.Url != nil
}

func (p *GetBetaVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetBetaVersionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetBetaVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetBetaVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetBetaVersionResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetBetaVersionResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Feature = _field
	return nil
}
func (p *GetBetaVersionResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Url = _field
	return nil
}
func (p *GetBetaVersionResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *GetBetaVersionResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetBetaVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetBetaVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetBetaVersionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetBetaVersionResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeature() {
		if err = oprot.WriteFieldBegin("feature", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Feature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetBetaVersionResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUrl() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Url); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetBetaVersionResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetBetaVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBetaVersionResponse(%+v)", *p)

}

func (p *GetBetaVersionResponse) DeepEqual(ano *GetBetaVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Code) {
		return false
	}
	if !p.Field3DeepEqual(ano.Feature) {
		return false
	}
	if !p.Field4DeepEqual(ano.Url) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *GetBetaVersionResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetBetaVersionResponse) Field2DeepEqual(src *string) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Code, *src) != 0 {
		return false
	}
	return true
}
func (p *GetBetaVersionResponse) Field3DeepEqual(src *string) bool {

	if p.Feature == src {
		return true
	} else if p.Feature == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Feature, *src) != 0 {
		return false
	}
	return true
}
func (p *GetBetaVersionResponse) Field4DeepEqual(src *string) bool {

	if p.Url == src {
		return true
	} else if p.Url == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Url, *src) != 0 {
		return false
	}
	return true
}
func (p *GetBetaVersionResponse) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

type GetSettingRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
}

func NewGetSettingRequest() *GetSettingRequest {
	return &GetSettingRequest{}
}

func (p *GetSettingRequest) InitDefault() {
}

var GetSettingRequest_Account_DEFAULT string

func (p *GetSettingRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetSettingRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetSettingRequest_Version_DEFAULT string

func (p *GetSettingRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetSettingRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetSettingRequest_Beta_DEFAULT bool

func (p *GetSettingRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetSettingRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetSettingRequest_Phone_DEFAULT string

func (p *GetSettingRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetSettingRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetSettingRequest_IsLogin_DEFAULT bool

func (p *GetSettingRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetSettingRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetSettingRequest_LoginType_DEFAULT string

func (p *GetSettingRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetSettingRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}
func (p *GetSettingRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetSettingRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetSettingRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetSettingRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetSettingRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetSettingRequest) SetLoginType(val *string) {
	p.LoginType = val
}

var fieldIDToName_GetSettingRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
}

func (p *GetSettingRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetSettingRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetSettingRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetSettingRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetSettingRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetSettingRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetSettingRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSettingRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSettingRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Account = _field
	return nil
}
func (p *GetSettingRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *GetSettingRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Beta = _field
	return nil
}
func (p *GetSettingRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Phone = _field
	return nil
}
func (p *GetSettingRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsLogin = _field
	return nil
}
func (p *GetSettingRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoginType = _field
	return nil
}

func (p *GetSettingRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetSettingRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSettingRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccount() {
		if err = oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Account); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSettingRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSettingRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeta() {
		if err = oprot.WriteFieldBegin("beta", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Beta); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSettingRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhone() {
		if err = oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Phone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetSettingRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsLogin() {
		if err = oprot.WriteFieldBegin("isLogin", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsLogin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetSettingRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoginType() {
		if err = oprot.WriteFieldBegin("loginType", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoginType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetSettingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingRequest(%+v)", *p)

}

func (p *GetSettingRequest) DeepEqual(ano *GetSettingRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Account) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Beta) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsLogin) {
		return false
	}
	if !p.Field6DeepEqual(ano.LoginType) {
		return false
	}
	return true
}

func (p *GetSettingRequest) Field1DeepEqual(src *string) bool {

	if p.Account == src {
		return true
	} else if p.Account == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Account, *src) != 0 {
		return false
	}
	return true
}
func (p *GetSettingRequest) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *GetSettingRequest) Field3DeepEqual(src *bool) bool {

	if p.Beta == src {
		return true
	} else if p.Beta == nil || src == nil {
		return false
	}
	if *p.Beta != *src {
		return false
	}
	return true
}
func (p *GetSettingRequest) Field4DeepEqual(src *string) bool {

	if p.Phone == src {
		return true
	} else if p.Phone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Phone, *src) != 0 {
		return false
	}
	return true
}
func (p *GetSettingRequest) Field5DeepEqual(src *bool) bool {

	if p.IsLogin == src {
		return true
	} else if p.IsLogin == nil || src == nil {
		return false
	}
	if *p.IsLogin != *src {
		return false
	}
	return true
}
func (p *GetSettingRequest) Field6DeepEqual(src *string) bool {

	if p.LoginType == src {
		return true
	} else if p.LoginType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoginType, *src) != 0 {
		return false
	}
	return true
}

type GetSettingResponse struct {
	Base         *model.BaseResp `thrift:"base,1,optional" frugal:"1,optional,model.BaseResp" json:"base,omitempty"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetSettingResponse() *GetSettingResponse {
	return &GetSettingResponse{}
}

func (p *GetSettingResponse) InitDefault() {
}

var GetSettingResponse_Base_DEFAULT *model.BaseResp

func (p *GetSettingResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSettingResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetSettingResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetSettingResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSettingResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

var fieldIDToName_GetSettingResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

func (p *GetSettingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSettingResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSettingResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSettingResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetSettingResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.CloudSetting = _field
	return nil
}

func (p *GetSettingResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetSettingResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSettingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSettingResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cloud_setting", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CloudSetting)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSettingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingResponse(%+v)", *p)

}

func (p *GetSettingResponse) DeepEqual(ano *GetSettingResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CloudSetting) {
		return false
	}
	return true
}

func (p *GetSettingResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetSettingResponse) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CloudSetting, src) != 0 {
		return false
	}
	return true
}

type GetTestRequest struct {
	Account   *string `thrift:"account,1,optional" frugal:"1,optional,string" json:"account,omitempty"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" json:"version,omitempty"`
	Beta      *bool   `thrift:"beta,3,optional" frugal:"3,optional,bool" json:"beta,omitempty"`
	Phone     *string `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	IsLogin   *bool   `thrift:"isLogin,5,optional" frugal:"5,optional,bool" json:"isLogin,omitempty"`
	LoginType *string `thrift:"loginType,6,optional" frugal:"6,optional,string" json:"loginType,omitempty"`
	Setting   *string `thrift:"setting,7,optional" frugal:"7,optional,string" json:"setting,omitempty"`
}

func NewGetTestRequest() *GetTestRequest {
	return &GetTestRequest{}
}

func (p *GetTestRequest) InitDefault() {
}

var GetTestRequest_Account_DEFAULT string

func (p *GetTestRequest) GetAccount() (v string) {
	if !p.IsSetAccount() {
		return GetTestRequest_Account_DEFAULT
	}
	return *p.Account
}

var GetTestRequest_Version_DEFAULT string

func (p *GetTestRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetTestRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetTestRequest_Beta_DEFAULT bool

func (p *GetTestRequest) GetBeta() (v bool) {
	if !p.IsSetBeta() {
		return GetTestRequest_Beta_DEFAULT
	}
	return *p.Beta
}

var GetTestRequest_Phone_DEFAULT string

func (p *GetTestRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return GetTestRequest_Phone_DEFAULT
	}
	return *p.Phone
}

var GetTestRequest_IsLogin_DEFAULT bool

func (p *GetTestRequest) GetIsLogin() (v bool) {
	if !p.IsSetIsLogin() {
		return GetTestRequest_IsLogin_DEFAULT
	}
	return *p.IsLogin
}

var GetTestRequest_LoginType_DEFAULT string

func (p *GetTestRequest) GetLoginType() (v string) {
	if !p.IsSetLoginType() {
		return GetTestRequest_LoginType_DEFAULT
	}
	return *p.LoginType
}

var GetTestRequest_Setting_DEFAULT string

func (p *GetTestRequest) GetSetting() (v string) {
	if !p.IsSetSetting() {
		return GetTestRequest_Setting_DEFAULT
	}
	return *p.Setting
}
func (p *GetTestRequest) SetAccount(val *string) {
	p.Account = val
}
func (p *GetTestRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetTestRequest) SetBeta(val *bool) {
	p.Beta = val
}
func (p *GetTestRequest) SetPhone(val *string) {
	p.Phone = val
}
func (p *GetTestRequest) SetIsLogin(val *bool) {
	p.IsLogin = val
}
func (p *GetTestRequest) SetLoginType(val *string) {
	p.LoginType = val
}
func (p *GetTestRequest) SetSetting(val *string) {
	p.Setting = val
}

var fieldIDToName_GetTestRequest = map[int16]string{
	1: "account",
	2: "version",
	3: "beta",
	4: "phone",
	5: "isLogin",
	6: "loginType",
	7: "setting",
}

func (p *GetTestRequest) IsSetAccount() bool {
	return p.Account != nil
}

func (p *GetTestRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetTestRequest) IsSetBeta() bool {
	return p.Beta != nil
}

func (p *GetTestRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *GetTestRequest) IsSetIsLogin() bool {
	return p.IsLogin != nil
}

func (p *GetTestRequest) IsSetLoginType() bool {
	return p.LoginType != nil
}

func (p *GetTestRequest) IsSetSetting() bool {
	return p.Setting != nil
}

func (p *GetTestRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTestRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTestRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Account = _field
	return nil
}
func (p *GetTestRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *GetTestRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Beta = _field
	return nil
}
func (p *GetTestRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Phone = _field
	return nil
}
func (p *GetTestRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsLogin = _field
	return nil
}
func (p *GetTestRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoginType = _field
	return nil
}
func (p *GetTestRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Setting = _field
	return nil
}

func (p *GetTestRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTestRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTestRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccount() {
		if err = oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Account); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTestRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTestRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeta() {
		if err = oprot.WriteFieldBegin("beta", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Beta); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetTestRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhone() {
		if err = oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Phone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetTestRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsLogin() {
		if err = oprot.WriteFieldBegin("isLogin", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsLogin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetTestRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoginType() {
		if err = oprot.WriteFieldBegin("loginType", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoginType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetTestRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetting() {
		if err = oprot.WriteFieldBegin("setting", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Setting); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetTestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestRequest(%+v)", *p)

}

func (p *GetTestRequest) DeepEqual(ano *GetTestRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Account) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Beta) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsLogin) {
		return false
	}
	if !p.Field6DeepEqual(ano.LoginType) {
		return false
	}
	if !p.Field7DeepEqual(ano.Setting) {
		return false
	}
	return true
}

func (p *GetTestRequest) Field1DeepEqual(src *string) bool {

	if p.Account == src {
		return true
	} else if p.Account == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Account, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTestRequest) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTestRequest) Field3DeepEqual(src *bool) bool {

	if p.Beta == src {
		return true
	} else if p.Beta == nil || src == nil {
		return false
	}
	if *p.Beta != *src {
		return false
	}
	return true
}
func (p *GetTestRequest) Field4DeepEqual(src *string) bool {

	if p.Phone == src {
		return true
	} else if p.Phone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Phone, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTestRequest) Field5DeepEqual(src *bool) bool {

	if p.IsLogin == src {
		return true
	} else if p.IsLogin == nil || src == nil {
		return false
	}
	if *p.IsLogin != *src {
		return false
	}
	return true
}
func (p *GetTestRequest) Field6DeepEqual(src *string) bool {

	if p.LoginType == src {
		return true
	} else if p.LoginType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoginType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTestRequest) Field7DeepEqual(src *string) bool {

	if p.Setting == src {
		return true
	} else if p.Setting == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Setting, *src) != 0 {
		return false
	}
	return true
}

type GetTestResponse struct {
	Base         *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetTestResponse() *GetTestResponse {
	return &GetTestResponse{}
}

func (p *GetTestResponse) InitDefault() {
}

var GetTestResponse_Base_DEFAULT *model.BaseResp

func (p *GetTestResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetTestResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetTestResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetTestResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetTestResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

var fieldIDToName_GetTestResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

func (p *GetTestResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTestResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTestResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTestResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetTestResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.CloudSetting = _field
	return nil
}

func (p *GetTestResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTestResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTestResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTestResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cloud_setting", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CloudSetting)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTestResponse(%+v)", *p)

}

func (p *GetTestResponse) DeepEqual(ano *GetTestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CloudSetting) {
		return false
	}
	return true
}

func (p *GetTestResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTestResponse) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CloudSetting, src) != 0 {
		return false
	}
	return true
}

type GetCloudRequest struct {
}

func NewGetCloudRequest() *GetCloudRequest {
	return &GetCloudRequest{}
}

func (p *GetCloudRequest) InitDefault() {
}

var fieldIDToName_GetCloudRequest = map[int16]string{}

func (p *GetCloudRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCloudRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetCloudRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudRequest(%+v)", *p)

}

func (p *GetCloudRequest) DeepEqual(ano *GetCloudRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetCloudResponse struct {
	Base         *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	CloudSetting []byte          `thrift:"cloud_setting,2" frugal:"2,default,binary" json:"cloud_setting"`
}

func NewGetCloudResponse() *GetCloudResponse {
	return &GetCloudResponse{}
}

func (p *GetCloudResponse) InitDefault() {
}

var GetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *GetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetCloudResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCloudResponse) GetCloudSetting() (v []byte) {
	return p.CloudSetting
}
func (p *GetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetCloudResponse) SetCloudSetting(val []byte) {
	p.CloudSetting = val
}

var fieldIDToName_GetCloudResponse = map[int16]string{
	1: "base",
	2: "cloud_setting",
}

func (p *GetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCloudResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCloudResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCloudResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetCloudResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.CloudSetting = _field
	return nil
}

func (p *GetCloudResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCloudResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCloudResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCloudResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cloud_setting", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CloudSetting)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCloudResponse(%+v)", *p)

}

func (p *GetCloudResponse) DeepEqual(ano *GetCloudResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CloudSetting) {
		return false
	}
	return true
}

func (p *GetCloudResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetCloudResponse) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CloudSetting, src) != 0 {
		return false
	}
	return true
}

type SetCloudRequest struct {
	Password string `thrift:"password,1,required" frugal:"1,required,string" json:"password"`
	Setting  string `thrift:"setting,2,required" frugal:"2,required,string" json:"setting"`
}

func NewSetCloudRequest() *SetCloudRequest {
	return &SetCloudRequest{}
}

func (p *SetCloudRequest) InitDefault() {
}

func (p *SetCloudRequest) GetPassword() (v string) {
	return p.Password
}

func (p *SetCloudRequest) GetSetting() (v string) {
	return p.Setting
}
func (p *SetCloudRequest) SetPassword(val string) {
	p.Password = val
}
func (p *SetCloudRequest) SetSetting(val string) {
	p.Setting = val
}

var fieldIDToName_SetCloudRequest = map[int16]string{
	1: "password",
	2: "setting",
}

func (p *SetCloudRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPassword bool = false
	var issetSetting bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSetting = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPassword {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSetting {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetCloudRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SetCloudRequest[fieldId]))
}

func (p *SetCloudRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}
func (p *SetCloudRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Setting = _field
	return nil
}

func (p *SetCloudRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SetCloudRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetCloudRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetCloudRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("setting", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Setting); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetCloudRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudRequest(%+v)", *p)

}

func (p *SetCloudRequest) DeepEqual(ano *SetCloudRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Password) {
		return false
	}
	if !p.Field2DeepEqual(ano.Setting) {
		return false
	}
	return true
}

func (p *SetCloudRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *SetCloudRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Setting, src) != 0 {
		return false
	}
	return true
}

type SetCloudResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
}

func NewSetCloudResponse() *SetCloudResponse {
	return &SetCloudResponse{}
}

func (p *SetCloudResponse) InitDefault() {
}

var SetCloudResponse_Base_DEFAULT *model.BaseResp

func (p *SetCloudResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SetCloudResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SetCloudResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

var fieldIDToName_SetCloudResponse = map[int16]string{
	1: "base",
}

func (p *SetCloudResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SetCloudResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetCloudResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetCloudResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SetCloudResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SetCloudResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetCloudResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetCloudResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCloudResponse(%+v)", *p)

}

func (p *SetCloudResponse) DeepEqual(ano *SetCloudResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SetCloudResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDumpRequest struct {
}

func NewGetDumpRequest() *GetDumpRequest {
	return &GetDumpRequest{}
}

func (p *GetDumpRequest) InitDefault() {
}

var fieldIDToName_GetDumpRequest = map[int16]string{}

func (p *GetDumpRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDumpRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetDumpRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDumpRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpRequest(%+v)", *p)

}

func (p *GetDumpRequest) DeepEqual(ano *GetDumpRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetDumpResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	Data string          `thrift:"data,2" frugal:"2,default,string" json:"data"`
}

func NewGetDumpResponse() *GetDumpResponse {
	return &GetDumpResponse{}
}

func (p *GetDumpResponse) InitDefault() {
}

var GetDumpResponse_Base_DEFAULT *model.BaseResp

func (p *GetDumpResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetDumpResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetDumpResponse) GetData() (v string) {
	return p.Data
}
func (p *GetDumpResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetDumpResponse) SetData(val string) {
	p.Data = val
}

var fieldIDToName_GetDumpResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *GetDumpResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDumpResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDumpResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDumpResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetDumpResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Data = _field
	return nil
}

func (p *GetDumpResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDumpResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDumpResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDumpResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Data); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDumpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDumpResponse(%+v)", *p)

}

func (p *GetDumpResponse) DeepEqual(ano *GetDumpResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetDumpResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDumpResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}

type VersionService interface {
	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	UploadVersion(ctx context.Context, req *UploadRequest) (r *UploadResponse, err error)

	UploadParams(ctx context.Context, req *UploadParamsRequest) (r *UploadParamsResponse, err error)

	DownloadReleaseApk(ctx context.Context, req *DownloadReleaseApkRequest) (r *DownloadReleaseApkResponse, err error)

	DownloadBetaApk(ctx context.Context, req *DownloadBetaApkRequest) (r *DownloadBetaApkResponse, err error)

	GetReleaseVersion(ctx context.Context, req *GetReleaseVersionRequest) (r *GetReleaseVersionResponse, err error)

	GetBetaVersion(ctx context.Context, req *GetBetaVersionRequest) (r *GetBetaVersionResponse, err error)

	GetSetting(ctx context.Context, req *GetSettingRequest) (r *GetSettingResponse, err error)

	GetTest(ctx context.Context, req *GetTestRequest) (r *GetTestResponse, err error)

	GetCloud(ctx context.Context, req *GetCloudRequest) (r *GetCloudResponse, err error)

	SetCloud(ctx context.Context, req *SetCloudRequest) (r *SetCloudResponse, err error)

	GetDump(ctx context.Context, req *GetDumpRequest) (r *GetDumpResponse, err error)
}

type VersionServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewVersionServiceLoginArgs() *VersionServiceLoginArgs {
	return &VersionServiceLoginArgs{}
}

func (p *VersionServiceLoginArgs) InitDefault() {
}

var VersionServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *VersionServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return VersionServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceLoginArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceLoginArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginArgs(%+v)", *p)

}

func (p *VersionServiceLoginArgs) DeepEqual(ano *VersionServiceLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceLoginArgs) Field1DeepEqual(src *LoginRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewVersionServiceLoginResult() *VersionServiceLoginResult {
	return &VersionServiceLoginResult{}
}

func (p *VersionServiceLoginResult) InitDefault() {
}

var VersionServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *VersionServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

var fieldIDToName_VersionServiceLoginResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceLoginResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceLoginResult(%+v)", *p)

}

func (p *VersionServiceLoginResult) DeepEqual(ano *VersionServiceLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceLoginResult) Field0DeepEqual(src *LoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceUploadVersionArgs struct {
	Req *UploadRequest `thrift:"req,1" frugal:"1,default,UploadRequest" json:"req"`
}

func NewVersionServiceUploadVersionArgs() *VersionServiceUploadVersionArgs {
	return &VersionServiceUploadVersionArgs{}
}

func (p *VersionServiceUploadVersionArgs) InitDefault() {
}

var VersionServiceUploadVersionArgs_Req_DEFAULT *UploadRequest

func (p *VersionServiceUploadVersionArgs) GetReq() (v *UploadRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadVersionArgs) SetReq(val *UploadRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceUploadVersionArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceUploadVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadVersionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceUploadVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceUploadVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUploadRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceUploadVersionArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceUploadVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceUploadVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionArgs(%+v)", *p)

}

func (p *VersionServiceUploadVersionArgs) DeepEqual(ano *VersionServiceUploadVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceUploadVersionArgs) Field1DeepEqual(src *UploadRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceUploadVersionResult struct {
	Success *UploadResponse `thrift:"success,0,optional" frugal:"0,optional,UploadResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadVersionResult() *VersionServiceUploadVersionResult {
	return &VersionServiceUploadVersionResult{}
}

func (p *VersionServiceUploadVersionResult) InitDefault() {
}

var VersionServiceUploadVersionResult_Success_DEFAULT *UploadResponse

func (p *VersionServiceUploadVersionResult) GetSuccess() (v *UploadResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadResponse)
}

var fieldIDToName_VersionServiceUploadVersionResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceUploadVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadVersionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceUploadVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceUploadVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUploadResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceUploadVersionResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceUploadVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceUploadVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadVersionResult(%+v)", *p)

}

func (p *VersionServiceUploadVersionResult) DeepEqual(ano *VersionServiceUploadVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceUploadVersionResult) Field0DeepEqual(src *UploadResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceUploadParamsArgs struct {
	Req *UploadParamsRequest `thrift:"req,1" frugal:"1,default,UploadParamsRequest" json:"req"`
}

func NewVersionServiceUploadParamsArgs() *VersionServiceUploadParamsArgs {
	return &VersionServiceUploadParamsArgs{}
}

func (p *VersionServiceUploadParamsArgs) InitDefault() {
}

var VersionServiceUploadParamsArgs_Req_DEFAULT *UploadParamsRequest

func (p *VersionServiceUploadParamsArgs) GetReq() (v *UploadParamsRequest) {
	if !p.IsSetReq() {
		return VersionServiceUploadParamsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceUploadParamsArgs) SetReq(val *UploadParamsRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceUploadParamsArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceUploadParamsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceUploadParamsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceUploadParamsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceUploadParamsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUploadParamsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceUploadParamsArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadParams_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceUploadParamsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceUploadParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsArgs(%+v)", *p)

}

func (p *VersionServiceUploadParamsArgs) DeepEqual(ano *VersionServiceUploadParamsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceUploadParamsArgs) Field1DeepEqual(src *UploadParamsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceUploadParamsResult struct {
	Success *UploadParamsResponse `thrift:"success,0,optional" frugal:"0,optional,UploadParamsResponse" json:"success,omitempty"`
}

func NewVersionServiceUploadParamsResult() *VersionServiceUploadParamsResult {
	return &VersionServiceUploadParamsResult{}
}

func (p *VersionServiceUploadParamsResult) InitDefault() {
}

var VersionServiceUploadParamsResult_Success_DEFAULT *UploadParamsResponse

func (p *VersionServiceUploadParamsResult) GetSuccess() (v *UploadParamsResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceUploadParamsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceUploadParamsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadParamsResponse)
}

var fieldIDToName_VersionServiceUploadParamsResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceUploadParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceUploadParamsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceUploadParamsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceUploadParamsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUploadParamsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceUploadParamsResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadParams_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceUploadParamsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceUploadParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceUploadParamsResult(%+v)", *p)

}

func (p *VersionServiceUploadParamsResult) DeepEqual(ano *VersionServiceUploadParamsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceUploadParamsResult) Field0DeepEqual(src *UploadParamsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceDownloadReleaseApkArgs struct {
	Req *DownloadReleaseApkRequest `thrift:"req,1" frugal:"1,default,DownloadReleaseApkRequest" json:"req"`
}

func NewVersionServiceDownloadReleaseApkArgs() *VersionServiceDownloadReleaseApkArgs {
	return &VersionServiceDownloadReleaseApkArgs{}
}

func (p *VersionServiceDownloadReleaseApkArgs) InitDefault() {
}

var VersionServiceDownloadReleaseApkArgs_Req_DEFAULT *DownloadReleaseApkRequest

func (p *VersionServiceDownloadReleaseApkArgs) GetReq() (v *DownloadReleaseApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadReleaseApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadReleaseApkArgs) SetReq(val *DownloadReleaseApkRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceDownloadReleaseApkArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceDownloadReleaseApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadReleaseApkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceDownloadReleaseApkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDownloadReleaseApkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceDownloadReleaseApkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadReleaseApk_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkArgs(%+v)", *p)

}

func (p *VersionServiceDownloadReleaseApkArgs) DeepEqual(ano *VersionServiceDownloadReleaseApkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceDownloadReleaseApkArgs) Field1DeepEqual(src *DownloadReleaseApkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceDownloadReleaseApkResult struct {
	Success *DownloadReleaseApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadReleaseApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadReleaseApkResult() *VersionServiceDownloadReleaseApkResult {
	return &VersionServiceDownloadReleaseApkResult{}
}

func (p *VersionServiceDownloadReleaseApkResult) InitDefault() {
}

var VersionServiceDownloadReleaseApkResult_Success_DEFAULT *DownloadReleaseApkResponse

func (p *VersionServiceDownloadReleaseApkResult) GetSuccess() (v *DownloadReleaseApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadReleaseApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadReleaseApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadReleaseApkResponse)
}

var fieldIDToName_VersionServiceDownloadReleaseApkResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceDownloadReleaseApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadReleaseApkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceDownloadReleaseApkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDownloadReleaseApkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceDownloadReleaseApkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadReleaseApk_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceDownloadReleaseApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadReleaseApkResult(%+v)", *p)

}

func (p *VersionServiceDownloadReleaseApkResult) DeepEqual(ano *VersionServiceDownloadReleaseApkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceDownloadReleaseApkResult) Field0DeepEqual(src *DownloadReleaseApkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceDownloadBetaApkArgs struct {
	Req *DownloadBetaApkRequest `thrift:"req,1" frugal:"1,default,DownloadBetaApkRequest" json:"req"`
}

func NewVersionServiceDownloadBetaApkArgs() *VersionServiceDownloadBetaApkArgs {
	return &VersionServiceDownloadBetaApkArgs{}
}

func (p *VersionServiceDownloadBetaApkArgs) InitDefault() {
}

var VersionServiceDownloadBetaApkArgs_Req_DEFAULT *DownloadBetaApkRequest

func (p *VersionServiceDownloadBetaApkArgs) GetReq() (v *DownloadBetaApkRequest) {
	if !p.IsSetReq() {
		return VersionServiceDownloadBetaApkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceDownloadBetaApkArgs) SetReq(val *DownloadBetaApkRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceDownloadBetaApkArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceDownloadBetaApkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceDownloadBetaApkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceDownloadBetaApkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDownloadBetaApkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceDownloadBetaApkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadBetaApk_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkArgs(%+v)", *p)

}

func (p *VersionServiceDownloadBetaApkArgs) DeepEqual(ano *VersionServiceDownloadBetaApkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceDownloadBetaApkArgs) Field1DeepEqual(src *DownloadBetaApkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceDownloadBetaApkResult struct {
	Success *DownloadBetaApkResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadBetaApkResponse" json:"success,omitempty"`
}

func NewVersionServiceDownloadBetaApkResult() *VersionServiceDownloadBetaApkResult {
	return &VersionServiceDownloadBetaApkResult{}
}

func (p *VersionServiceDownloadBetaApkResult) InitDefault() {
}

var VersionServiceDownloadBetaApkResult_Success_DEFAULT *DownloadBetaApkResponse

func (p *VersionServiceDownloadBetaApkResult) GetSuccess() (v *DownloadBetaApkResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceDownloadBetaApkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceDownloadBetaApkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadBetaApkResponse)
}

var fieldIDToName_VersionServiceDownloadBetaApkResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceDownloadBetaApkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceDownloadBetaApkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceDownloadBetaApkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDownloadBetaApkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceDownloadBetaApkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadBetaApk_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceDownloadBetaApkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceDownloadBetaApkResult(%+v)", *p)

}

func (p *VersionServiceDownloadBetaApkResult) DeepEqual(ano *VersionServiceDownloadBetaApkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceDownloadBetaApkResult) Field0DeepEqual(src *DownloadBetaApkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetReleaseVersionArgs struct {
	Req *GetReleaseVersionRequest `thrift:"req,1" frugal:"1,default,GetReleaseVersionRequest" json:"req"`
}

func NewVersionServiceGetReleaseVersionArgs() *VersionServiceGetReleaseVersionArgs {
	return &VersionServiceGetReleaseVersionArgs{}
}

func (p *VersionServiceGetReleaseVersionArgs) InitDefault() {
}

var VersionServiceGetReleaseVersionArgs_Req_DEFAULT *GetReleaseVersionRequest

func (p *VersionServiceGetReleaseVersionArgs) GetReq() (v *GetReleaseVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetReleaseVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetReleaseVersionArgs) SetReq(val *GetReleaseVersionRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetReleaseVersionArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetReleaseVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetReleaseVersionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetReleaseVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetReleaseVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetReleaseVersionArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleaseVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionArgs(%+v)", *p)

}

func (p *VersionServiceGetReleaseVersionArgs) DeepEqual(ano *VersionServiceGetReleaseVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetReleaseVersionArgs) Field1DeepEqual(src *GetReleaseVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetReleaseVersionResult struct {
	Success *GetReleaseVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetReleaseVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetReleaseVersionResult() *VersionServiceGetReleaseVersionResult {
	return &VersionServiceGetReleaseVersionResult{}
}

func (p *VersionServiceGetReleaseVersionResult) InitDefault() {
}

var VersionServiceGetReleaseVersionResult_Success_DEFAULT *GetReleaseVersionResponse

func (p *VersionServiceGetReleaseVersionResult) GetSuccess() (v *GetReleaseVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetReleaseVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetReleaseVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetReleaseVersionResponse)
}

var fieldIDToName_VersionServiceGetReleaseVersionResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetReleaseVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetReleaseVersionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetReleaseVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetReleaseVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetReleaseVersionResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleaseVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetReleaseVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetReleaseVersionResult(%+v)", *p)

}

func (p *VersionServiceGetReleaseVersionResult) DeepEqual(ano *VersionServiceGetReleaseVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetReleaseVersionResult) Field0DeepEqual(src *GetReleaseVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetBetaVersionArgs struct {
	Req *GetBetaVersionRequest `thrift:"req,1" frugal:"1,default,GetBetaVersionRequest" json:"req"`
}

func NewVersionServiceGetBetaVersionArgs() *VersionServiceGetBetaVersionArgs {
	return &VersionServiceGetBetaVersionArgs{}
}

func (p *VersionServiceGetBetaVersionArgs) InitDefault() {
}

var VersionServiceGetBetaVersionArgs_Req_DEFAULT *GetBetaVersionRequest

func (p *VersionServiceGetBetaVersionArgs) GetReq() (v *GetBetaVersionRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetBetaVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetBetaVersionArgs) SetReq(val *GetBetaVersionRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetBetaVersionArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetBetaVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetBetaVersionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetBetaVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetBetaVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetBetaVersionArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetBetaVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionArgs(%+v)", *p)

}

func (p *VersionServiceGetBetaVersionArgs) DeepEqual(ano *VersionServiceGetBetaVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetBetaVersionArgs) Field1DeepEqual(src *GetBetaVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetBetaVersionResult struct {
	Success *GetBetaVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetBetaVersionResponse" json:"success,omitempty"`
}

func NewVersionServiceGetBetaVersionResult() *VersionServiceGetBetaVersionResult {
	return &VersionServiceGetBetaVersionResult{}
}

func (p *VersionServiceGetBetaVersionResult) InitDefault() {
}

var VersionServiceGetBetaVersionResult_Success_DEFAULT *GetBetaVersionResponse

func (p *VersionServiceGetBetaVersionResult) GetSuccess() (v *GetBetaVersionResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetBetaVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetBetaVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetBetaVersionResponse)
}

var fieldIDToName_VersionServiceGetBetaVersionResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetBetaVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetBetaVersionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetBetaVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetBetaVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetBetaVersionResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetBetaVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetBetaVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetBetaVersionResult(%+v)", *p)

}

func (p *VersionServiceGetBetaVersionResult) DeepEqual(ano *VersionServiceGetBetaVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetBetaVersionResult) Field0DeepEqual(src *GetBetaVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetSettingArgs struct {
	Req *GetSettingRequest `thrift:"req,1" frugal:"1,default,GetSettingRequest" json:"req"`
}

func NewVersionServiceGetSettingArgs() *VersionServiceGetSettingArgs {
	return &VersionServiceGetSettingArgs{}
}

func (p *VersionServiceGetSettingArgs) InitDefault() {
}

var VersionServiceGetSettingArgs_Req_DEFAULT *GetSettingRequest

func (p *VersionServiceGetSettingArgs) GetReq() (v *GetSettingRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetSettingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetSettingArgs) SetReq(val *GetSettingRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetSettingArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetSettingArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetSettingArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetSettingArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSettingRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetSettingArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetSetting_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingArgs(%+v)", *p)

}

func (p *VersionServiceGetSettingArgs) DeepEqual(ano *VersionServiceGetSettingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetSettingArgs) Field1DeepEqual(src *GetSettingRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetSettingResult struct {
	Success *GetSettingResponse `thrift:"success,0,optional" frugal:"0,optional,GetSettingResponse" json:"success,omitempty"`
}

func NewVersionServiceGetSettingResult() *VersionServiceGetSettingResult {
	return &VersionServiceGetSettingResult{}
}

func (p *VersionServiceGetSettingResult) InitDefault() {
}

var VersionServiceGetSettingResult_Success_DEFAULT *GetSettingResponse

func (p *VersionServiceGetSettingResult) GetSuccess() (v *GetSettingResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetSettingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSettingResponse)
}

var fieldIDToName_VersionServiceGetSettingResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetSettingResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetSettingResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetSettingResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSettingResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetSettingResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetSetting_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetSettingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetSettingResult(%+v)", *p)

}

func (p *VersionServiceGetSettingResult) DeepEqual(ano *VersionServiceGetSettingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetSettingResult) Field0DeepEqual(src *GetSettingResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetTestArgs struct {
	Req *GetTestRequest `thrift:"req,1" frugal:"1,default,GetTestRequest" json:"req"`
}

func NewVersionServiceGetTestArgs() *VersionServiceGetTestArgs {
	return &VersionServiceGetTestArgs{}
}

func (p *VersionServiceGetTestArgs) InitDefault() {
}

var VersionServiceGetTestArgs_Req_DEFAULT *GetTestRequest

func (p *VersionServiceGetTestArgs) GetReq() (v *GetTestRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetTestArgs) SetReq(val *GetTestRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetTestArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetTestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetTestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetTestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTestRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetTestArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestArgs(%+v)", *p)

}

func (p *VersionServiceGetTestArgs) DeepEqual(ano *VersionServiceGetTestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetTestArgs) Field1DeepEqual(src *GetTestRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetTestResult struct {
	Success *GetTestResponse `thrift:"success,0,optional" frugal:"0,optional,GetTestResponse" json:"success,omitempty"`
}

func NewVersionServiceGetTestResult() *VersionServiceGetTestResult {
	return &VersionServiceGetTestResult{}
}

func (p *VersionServiceGetTestResult) InitDefault() {
}

var VersionServiceGetTestResult_Success_DEFAULT *GetTestResponse

func (p *VersionServiceGetTestResult) GetSuccess() (v *GetTestResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTestResponse)
}

var fieldIDToName_VersionServiceGetTestResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetTestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetTestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetTestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTestResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetTestResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetTestResult(%+v)", *p)

}

func (p *VersionServiceGetTestResult) DeepEqual(ano *VersionServiceGetTestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetTestResult) Field0DeepEqual(src *GetTestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetCloudArgs struct {
	Req *GetCloudRequest `thrift:"req,1" frugal:"1,default,GetCloudRequest" json:"req"`
}

func NewVersionServiceGetCloudArgs() *VersionServiceGetCloudArgs {
	return &VersionServiceGetCloudArgs{}
}

func (p *VersionServiceGetCloudArgs) InitDefault() {
}

var VersionServiceGetCloudArgs_Req_DEFAULT *GetCloudRequest

func (p *VersionServiceGetCloudArgs) GetReq() (v *GetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetCloudArgs) SetReq(val *GetCloudRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetCloudArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetCloudArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetCloudArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetCloudArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCloudRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetCloudArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCloud_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetCloudArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudArgs(%+v)", *p)

}

func (p *VersionServiceGetCloudArgs) DeepEqual(ano *VersionServiceGetCloudArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetCloudArgs) Field1DeepEqual(src *GetCloudRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetCloudResult struct {
	Success *GetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,GetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceGetCloudResult() *VersionServiceGetCloudResult {
	return &VersionServiceGetCloudResult{}
}

func (p *VersionServiceGetCloudResult) InitDefault() {
}

var VersionServiceGetCloudResult_Success_DEFAULT *GetCloudResponse

func (p *VersionServiceGetCloudResult) GetSuccess() (v *GetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCloudResponse)
}

var fieldIDToName_VersionServiceGetCloudResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetCloudResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetCloudResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetCloudResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCloudResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetCloudResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCloud_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetCloudResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetCloudResult(%+v)", *p)

}

func (p *VersionServiceGetCloudResult) DeepEqual(ano *VersionServiceGetCloudResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetCloudResult) Field0DeepEqual(src *GetCloudResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceSetCloudArgs struct {
	Req *SetCloudRequest `thrift:"req,1" frugal:"1,default,SetCloudRequest" json:"req"`
}

func NewVersionServiceSetCloudArgs() *VersionServiceSetCloudArgs {
	return &VersionServiceSetCloudArgs{}
}

func (p *VersionServiceSetCloudArgs) InitDefault() {
}

var VersionServiceSetCloudArgs_Req_DEFAULT *SetCloudRequest

func (p *VersionServiceSetCloudArgs) GetReq() (v *SetCloudRequest) {
	if !p.IsSetReq() {
		return VersionServiceSetCloudArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceSetCloudArgs) SetReq(val *SetCloudRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceSetCloudArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceSetCloudArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceSetCloudArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceSetCloudArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceSetCloudArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetCloudRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceSetCloudArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SetCloud_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceSetCloudArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceSetCloudArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudArgs(%+v)", *p)

}

func (p *VersionServiceSetCloudArgs) DeepEqual(ano *VersionServiceSetCloudArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceSetCloudArgs) Field1DeepEqual(src *SetCloudRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceSetCloudResult struct {
	Success *SetCloudResponse `thrift:"success,0,optional" frugal:"0,optional,SetCloudResponse" json:"success,omitempty"`
}

func NewVersionServiceSetCloudResult() *VersionServiceSetCloudResult {
	return &VersionServiceSetCloudResult{}
}

func (p *VersionServiceSetCloudResult) InitDefault() {
}

var VersionServiceSetCloudResult_Success_DEFAULT *SetCloudResponse

func (p *VersionServiceSetCloudResult) GetSuccess() (v *SetCloudResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceSetCloudResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceSetCloudResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetCloudResponse)
}

var fieldIDToName_VersionServiceSetCloudResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceSetCloudResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceSetCloudResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceSetCloudResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceSetCloudResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetCloudResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceSetCloudResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SetCloud_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceSetCloudResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceSetCloudResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceSetCloudResult(%+v)", *p)

}

func (p *VersionServiceSetCloudResult) DeepEqual(ano *VersionServiceSetCloudResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceSetCloudResult) Field0DeepEqual(src *SetCloudResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetDumpArgs struct {
	Req *GetDumpRequest `thrift:"req,1" frugal:"1,default,GetDumpRequest" json:"req"`
}

func NewVersionServiceGetDumpArgs() *VersionServiceGetDumpArgs {
	return &VersionServiceGetDumpArgs{}
}

func (p *VersionServiceGetDumpArgs) InitDefault() {
}

var VersionServiceGetDumpArgs_Req_DEFAULT *GetDumpRequest

func (p *VersionServiceGetDumpArgs) GetReq() (v *GetDumpRequest) {
	if !p.IsSetReq() {
		return VersionServiceGetDumpArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VersionServiceGetDumpArgs) SetReq(val *GetDumpRequest) {
	p.Req = val
}

var fieldIDToName_VersionServiceGetDumpArgs = map[int16]string{
	1: "req",
}

func (p *VersionServiceGetDumpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VersionServiceGetDumpArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetDumpArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetDumpArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDumpRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VersionServiceGetDumpArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDump_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetDumpArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersionServiceGetDumpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpArgs(%+v)", *p)

}

func (p *VersionServiceGetDumpArgs) DeepEqual(ano *VersionServiceGetDumpArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VersionServiceGetDumpArgs) Field1DeepEqual(src *GetDumpRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VersionServiceGetDumpResult struct {
	Success *GetDumpResponse `thrift:"success,0,optional" frugal:"0,optional,GetDumpResponse" json:"success,omitempty"`
}

func NewVersionServiceGetDumpResult() *VersionServiceGetDumpResult {
	return &VersionServiceGetDumpResult{}
}

func (p *VersionServiceGetDumpResult) InitDefault() {
}

var VersionServiceGetDumpResult_Success_DEFAULT *GetDumpResponse

func (p *VersionServiceGetDumpResult) GetSuccess() (v *GetDumpResponse) {
	if !p.IsSetSuccess() {
		return VersionServiceGetDumpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VersionServiceGetDumpResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDumpResponse)
}

var fieldIDToName_VersionServiceGetDumpResult = map[int16]string{
	0: "success",
}

func (p *VersionServiceGetDumpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VersionServiceGetDumpResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionServiceGetDumpResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionServiceGetDumpResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDumpResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VersionServiceGetDumpResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDump_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionServiceGetDumpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VersionServiceGetDumpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionServiceGetDumpResult(%+v)", *p)

}

func (p *VersionServiceGetDumpResult) DeepEqual(ano *VersionServiceGetDumpResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VersionServiceGetDumpResult) Field0DeepEqual(src *GetDumpResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
