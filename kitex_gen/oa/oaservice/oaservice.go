/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.15.1. DO NOT EDIT.

package oaservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	oa "github.com/west2-online/fzuhelper-server/kitex_gen/oa"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateFeedback": kitex.NewMethodInfo(
		createFeedbackHandler,
		newOAServiceCreateFeedbackArgs,
		newOAServiceCreateFeedbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFeedbackById": kitex.NewMethodInfo(
		getFeedbackByIdHandler,
		newOAServiceGetFeedbackByIdArgs,
		newOAServiceGetFeedbackByIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFeedbackList": kitex.NewMethodInfo(
		getFeedbackListHandler,
		newOAServiceGetFeedbackListArgs,
		newOAServiceGetFeedbackListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	oAServiceServiceInfo                = NewServiceInfo()
	oAServiceServiceInfoForClient       = NewServiceInfoForClient()
	oAServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return oAServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return oAServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return oAServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OAService"
	handlerType := (*oa.OAService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "oa",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createFeedbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oa.OAServiceCreateFeedbackArgs)
	realResult := result.(*oa.OAServiceCreateFeedbackResult)
	success, err := handler.(oa.OAService).CreateFeedback(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOAServiceCreateFeedbackArgs() interface{} {
	return oa.NewOAServiceCreateFeedbackArgs()
}

func newOAServiceCreateFeedbackResult() interface{} {
	return oa.NewOAServiceCreateFeedbackResult()
}

func getFeedbackByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oa.OAServiceGetFeedbackByIdArgs)
	realResult := result.(*oa.OAServiceGetFeedbackByIdResult)
	success, err := handler.(oa.OAService).GetFeedbackById(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOAServiceGetFeedbackByIdArgs() interface{} {
	return oa.NewOAServiceGetFeedbackByIdArgs()
}

func newOAServiceGetFeedbackByIdResult() interface{} {
	return oa.NewOAServiceGetFeedbackByIdResult()
}

func getFeedbackListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oa.OAServiceGetFeedbackListArgs)
	realResult := result.(*oa.OAServiceGetFeedbackListResult)
	success, err := handler.(oa.OAService).GetFeedbackList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOAServiceGetFeedbackListArgs() interface{} {
	return oa.NewOAServiceGetFeedbackListArgs()
}

func newOAServiceGetFeedbackListResult() interface{} {
	return oa.NewOAServiceGetFeedbackListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateFeedback(ctx context.Context, request *oa.CreateFeedbackRequest) (r *oa.CreateFeedbackResponse, err error) {
	var _args oa.OAServiceCreateFeedbackArgs
	_args.Request = request
	var _result oa.OAServiceCreateFeedbackResult
	if err = p.c.Call(ctx, "CreateFeedback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeedbackById(ctx context.Context, request *oa.GetFeedbackByIDRequest) (r *oa.FeedbackDetailResponse, err error) {
	var _args oa.OAServiceGetFeedbackByIdArgs
	_args.Request = request
	var _result oa.OAServiceGetFeedbackByIdResult
	if err = p.c.Call(ctx, "GetFeedbackById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeedbackList(ctx context.Context, request *oa.GetListFeedbackRequest) (r *oa.GetListFeedbackResponse, err error) {
	var _args oa.OAServiceGetFeedbackListArgs
	_args.Request = request
	var _result oa.OAServiceGetFeedbackListResult
	if err = p.c.Call(ctx, "GetFeedbackList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
