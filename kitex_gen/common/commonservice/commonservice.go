/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.11.3. DO NOT EDIT.

package commonservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	common "github.com/west2-online/fzuhelper-server/kitex_gen/common"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetCSS": kitex.NewMethodInfo(
		getCSSHandler,
		newCommonServiceGetCSSArgs,
		newCommonServiceGetCSSResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHtml": kitex.NewMethodInfo(
		getHtmlHandler,
		newCommonServiceGetHtmlArgs,
		newCommonServiceGetHtmlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserAgreement": kitex.NewMethodInfo(
		getUserAgreementHandler,
		newCommonServiceGetUserAgreementArgs,
		newCommonServiceGetUserAgreementResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTermsList": kitex.NewMethodInfo(
		getTermsListHandler,
		newCommonServiceGetTermsListArgs,
		newCommonServiceGetTermsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTerm": kitex.NewMethodInfo(
		getTermHandler,
		newCommonServiceGetTermArgs,
		newCommonServiceGetTermResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	commonServiceServiceInfo                = NewServiceInfo()
	commonServiceServiceInfoForClient       = NewServiceInfoForClient()
	commonServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commonServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commonServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commonServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommonService"
	handlerType := (*common.CommonService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "common",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getCSSHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*common.CommonServiceGetCSSArgs)
	realResult := result.(*common.CommonServiceGetCSSResult)
	success, err := handler.(common.CommonService).GetCSS(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetCSSArgs() interface{} {
	return common.NewCommonServiceGetCSSArgs()
}

func newCommonServiceGetCSSResult() interface{} {
	return common.NewCommonServiceGetCSSResult()
}

func getHtmlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*common.CommonServiceGetHtmlArgs)
	realResult := result.(*common.CommonServiceGetHtmlResult)
	success, err := handler.(common.CommonService).GetHtml(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetHtmlArgs() interface{} {
	return common.NewCommonServiceGetHtmlArgs()
}

func newCommonServiceGetHtmlResult() interface{} {
	return common.NewCommonServiceGetHtmlResult()
}

func getUserAgreementHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*common.CommonServiceGetUserAgreementArgs)
	realResult := result.(*common.CommonServiceGetUserAgreementResult)
	success, err := handler.(common.CommonService).GetUserAgreement(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetUserAgreementArgs() interface{} {
	return common.NewCommonServiceGetUserAgreementArgs()
}

func newCommonServiceGetUserAgreementResult() interface{} {
	return common.NewCommonServiceGetUserAgreementResult()
}

func getTermsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*common.CommonServiceGetTermsListArgs)
	realResult := result.(*common.CommonServiceGetTermsListResult)
	success, err := handler.(common.CommonService).GetTermsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetTermsListArgs() interface{} {
	return common.NewCommonServiceGetTermsListArgs()
}

func newCommonServiceGetTermsListResult() interface{} {
	return common.NewCommonServiceGetTermsListResult()
}

func getTermHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*common.CommonServiceGetTermArgs)
	realResult := result.(*common.CommonServiceGetTermResult)
	success, err := handler.(common.CommonService).GetTerm(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommonServiceGetTermArgs() interface{} {
	return common.NewCommonServiceGetTermArgs()
}

func newCommonServiceGetTermResult() interface{} {
	return common.NewCommonServiceGetTermResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCSS(ctx context.Context, req *common.GetCSSRequest) (r *common.GetCSSResponse, err error) {
	var _args common.CommonServiceGetCSSArgs
	_args.Req = req
	var _result common.CommonServiceGetCSSResult
	if err = p.c.Call(ctx, "GetCSS", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHtml(ctx context.Context, req *common.GetHtmlRequest) (r *common.GetHtmlResponse, err error) {
	var _args common.CommonServiceGetHtmlArgs
	_args.Req = req
	var _result common.CommonServiceGetHtmlResult
	if err = p.c.Call(ctx, "GetHtml", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserAgreement(ctx context.Context, req *common.GetUserAgreementRequest) (r *common.GetUserAgreementResponse, err error) {
	var _args common.CommonServiceGetUserAgreementArgs
	_args.Req = req
	var _result common.CommonServiceGetUserAgreementResult
	if err = p.c.Call(ctx, "GetUserAgreement", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTermsList(ctx context.Context, req *common.TermListRequest) (r *common.TermListResponse, err error) {
	var _args common.CommonServiceGetTermsListArgs
	_args.Req = req
	var _result common.CommonServiceGetTermsListResult
	if err = p.c.Call(ctx, "GetTermsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTerm(ctx context.Context, req *common.TermRequest) (r *common.TermResponse, err error) {
	var _args common.CommonServiceGetTermArgs
	_args.Req = req
	var _result common.CommonServiceGetTermResult
	if err = p.c.Call(ctx, "GetTerm", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
