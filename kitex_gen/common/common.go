/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package common

import (
	"context"
	"fmt"

	"github.com/west2-online/fzuhelper-server/kitex_gen/model"
)

type GetCSSRequest struct {
}

func NewGetCSSRequest() *GetCSSRequest {
	return &GetCSSRequest{}
}

func (p *GetCSSRequest) InitDefault() {
}

func (p *GetCSSRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCSSRequest(%+v)", *p)
}

var fieldIDToName_GetCSSRequest = map[int16]string{}

type GetCSSResponse struct {
	Css []byte `thrift:"css,1" frugal:"1,default,binary" json:"css"`
}

func NewGetCSSResponse() *GetCSSResponse {
	return &GetCSSResponse{}
}

func (p *GetCSSResponse) InitDefault() {
}

func (p *GetCSSResponse) GetCss() (v []byte) {
	return p.Css
}
func (p *GetCSSResponse) SetCss(val []byte) {
	p.Css = val
}

func (p *GetCSSResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCSSResponse(%+v)", *p)
}

var fieldIDToName_GetCSSResponse = map[int16]string{
	1: "css",
}

type GetHtmlRequest struct {
}

func NewGetHtmlRequest() *GetHtmlRequest {
	return &GetHtmlRequest{}
}

func (p *GetHtmlRequest) InitDefault() {
}

func (p *GetHtmlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHtmlRequest(%+v)", *p)
}

var fieldIDToName_GetHtmlRequest = map[int16]string{}

type GetHtmlResponse struct {
	Html []byte `thrift:"html,1" frugal:"1,default,binary" json:"html"`
}

func NewGetHtmlResponse() *GetHtmlResponse {
	return &GetHtmlResponse{}
}

func (p *GetHtmlResponse) InitDefault() {
}

func (p *GetHtmlResponse) GetHtml() (v []byte) {
	return p.Html
}
func (p *GetHtmlResponse) SetHtml(val []byte) {
	p.Html = val
}

func (p *GetHtmlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHtmlResponse(%+v)", *p)
}

var fieldIDToName_GetHtmlResponse = map[int16]string{
	1: "html",
}

type GetUserAgreementRequest struct {
}

func NewGetUserAgreementRequest() *GetUserAgreementRequest {
	return &GetUserAgreementRequest{}
}

func (p *GetUserAgreementRequest) InitDefault() {
}

func (p *GetUserAgreementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAgreementRequest(%+v)", *p)
}

var fieldIDToName_GetUserAgreementRequest = map[int16]string{}

type GetUserAgreementResponse struct {
	UserAgreement []byte `thrift:"user_agreement,1" frugal:"1,default,binary" json:"user_agreement"`
}

func NewGetUserAgreementResponse() *GetUserAgreementResponse {
	return &GetUserAgreementResponse{}
}

func (p *GetUserAgreementResponse) InitDefault() {
}

func (p *GetUserAgreementResponse) GetUserAgreement() (v []byte) {
	return p.UserAgreement
}
func (p *GetUserAgreementResponse) SetUserAgreement(val []byte) {
	p.UserAgreement = val
}

func (p *GetUserAgreementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAgreementResponse(%+v)", *p)
}

var fieldIDToName_GetUserAgreementResponse = map[int16]string{
	1: "user_agreement",
}

type TermRequest struct {
	Term string `thrift:"term,1,required" frugal:"1,required,string" json:"term"`
}

func NewTermRequest() *TermRequest {
	return &TermRequest{}
}

func (p *TermRequest) InitDefault() {
}

func (p *TermRequest) GetTerm() (v string) {
	return p.Term
}
func (p *TermRequest) SetTerm(val string) {
	p.Term = val
}

func (p *TermRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermRequest(%+v)", *p)
}

var fieldIDToName_TermRequest = map[int16]string{
	1: "term",
}

type TermResponse struct {
	Base     *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	TermInfo *model.TermInfo `thrift:"term_info,2,required" frugal:"2,required,model.TermInfo" json:"term_info"`
}

func NewTermResponse() *TermResponse {
	return &TermResponse{}
}

func (p *TermResponse) InitDefault() {
}

var TermResponse_Base_DEFAULT *model.BaseResp

func (p *TermResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return TermResponse_Base_DEFAULT
	}
	return p.Base
}

var TermResponse_TermInfo_DEFAULT *model.TermInfo

func (p *TermResponse) GetTermInfo() (v *model.TermInfo) {
	if !p.IsSetTermInfo() {
		return TermResponse_TermInfo_DEFAULT
	}
	return p.TermInfo
}
func (p *TermResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *TermResponse) SetTermInfo(val *model.TermInfo) {
	p.TermInfo = val
}

func (p *TermResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *TermResponse) IsSetTermInfo() bool {
	return p.TermInfo != nil
}

func (p *TermResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermResponse(%+v)", *p)
}

var fieldIDToName_TermResponse = map[int16]string{
	1: "base",
	2: "term_info",
}

type TermListRequest struct {
}

func NewTermListRequest() *TermListRequest {
	return &TermListRequest{}
}

func (p *TermListRequest) InitDefault() {
}

func (p *TermListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListRequest(%+v)", *p)
}

var fieldIDToName_TermListRequest = map[int16]string{}

type TermListResponse struct {
	Base      *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	TermLists *model.TermList `thrift:"term_lists,2,required" frugal:"2,required,model.TermList" json:"term_lists"`
}

func NewTermListResponse() *TermListResponse {
	return &TermListResponse{}
}

func (p *TermListResponse) InitDefault() {
}

var TermListResponse_Base_DEFAULT *model.BaseResp

func (p *TermListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return TermListResponse_Base_DEFAULT
	}
	return p.Base
}

var TermListResponse_TermLists_DEFAULT *model.TermList

func (p *TermListResponse) GetTermLists() (v *model.TermList) {
	if !p.IsSetTermLists() {
		return TermListResponse_TermLists_DEFAULT
	}
	return p.TermLists
}
func (p *TermListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *TermListResponse) SetTermLists(val *model.TermList) {
	p.TermLists = val
}

func (p *TermListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *TermListResponse) IsSetTermLists() bool {
	return p.TermLists != nil
}

func (p *TermListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermListResponse(%+v)", *p)
}

var fieldIDToName_TermListResponse = map[int16]string{
	1: "base",
	2: "term_lists",
}

type NoticeRequest struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewNoticeRequest() *NoticeRequest {
	return &NoticeRequest{}
}

func (p *NoticeRequest) InitDefault() {
}

func (p *NoticeRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *NoticeRequest) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *NoticeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoticeRequest(%+v)", *p)
}

var fieldIDToName_NoticeRequest = map[int16]string{
	1: "pageNum",
}

type NoticeResponse struct {
	Base    *model.BaseResp     `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Notices []*model.NoticeInfo `thrift:"notices,2,optional" frugal:"2,optional,list<model.NoticeInfo>" json:"notices,omitempty"`
	Total   int64               `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewNoticeResponse() *NoticeResponse {
	return &NoticeResponse{}
}

func (p *NoticeResponse) InitDefault() {
}

var NoticeResponse_Base_DEFAULT *model.BaseResp

func (p *NoticeResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return NoticeResponse_Base_DEFAULT
	}
	return p.Base
}

var NoticeResponse_Notices_DEFAULT []*model.NoticeInfo

func (p *NoticeResponse) GetNotices() (v []*model.NoticeInfo) {
	if !p.IsSetNotices() {
		return NoticeResponse_Notices_DEFAULT
	}
	return p.Notices
}

func (p *NoticeResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *NoticeResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *NoticeResponse) SetNotices(val []*model.NoticeInfo) {
	p.Notices = val
}
func (p *NoticeResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *NoticeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *NoticeResponse) IsSetNotices() bool {
	return p.Notices != nil
}

func (p *NoticeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoticeResponse(%+v)", *p)
}

var fieldIDToName_NoticeResponse = map[int16]string{
	1: "base",
	2: "notices",
	3: "total",
}

type GetContributorInfoRequest struct {
}

func NewGetContributorInfoRequest() *GetContributorInfoRequest {
	return &GetContributorInfoRequest{}
}

func (p *GetContributorInfoRequest) InitDefault() {
}

func (p *GetContributorInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContributorInfoRequest(%+v)", *p)
}

var fieldIDToName_GetContributorInfoRequest = map[int16]string{}

type GetContributorInfoResponse struct {
	Base            *model.BaseResp      `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	FzuhelperApp    []*model.Contributor `thrift:"fzuhelper_app,2,required" frugal:"2,required,list<model.Contributor>" json:"fzuhelper_app"`
	FzuhelperServer []*model.Contributor `thrift:"fzuhelper_server,3,required" frugal:"3,required,list<model.Contributor>" json:"fzuhelper_server"`
	Jwch            []*model.Contributor `thrift:"jwch,4,required" frugal:"4,required,list<model.Contributor>" json:"jwch"`
	Yjsy            []*model.Contributor `thrift:"yjsy,5,required" frugal:"5,required,list<model.Contributor>" json:"yjsy"`
}

func NewGetContributorInfoResponse() *GetContributorInfoResponse {
	return &GetContributorInfoResponse{}
}

func (p *GetContributorInfoResponse) InitDefault() {
}

var GetContributorInfoResponse_Base_DEFAULT *model.BaseResp

func (p *GetContributorInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetContributorInfoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetContributorInfoResponse) GetFzuhelperApp() (v []*model.Contributor) {
	return p.FzuhelperApp
}

func (p *GetContributorInfoResponse) GetFzuhelperServer() (v []*model.Contributor) {
	return p.FzuhelperServer
}

func (p *GetContributorInfoResponse) GetJwch() (v []*model.Contributor) {
	return p.Jwch
}

func (p *GetContributorInfoResponse) GetYjsy() (v []*model.Contributor) {
	return p.Yjsy
}
func (p *GetContributorInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetContributorInfoResponse) SetFzuhelperApp(val []*model.Contributor) {
	p.FzuhelperApp = val
}
func (p *GetContributorInfoResponse) SetFzuhelperServer(val []*model.Contributor) {
	p.FzuhelperServer = val
}
func (p *GetContributorInfoResponse) SetJwch(val []*model.Contributor) {
	p.Jwch = val
}
func (p *GetContributorInfoResponse) SetYjsy(val []*model.Contributor) {
	p.Yjsy = val
}

func (p *GetContributorInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetContributorInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContributorInfoResponse(%+v)", *p)
}

var fieldIDToName_GetContributorInfoResponse = map[int16]string{
	1: "base",
	2: "fzuhelper_app",
	3: "fzuhelper_server",
	4: "jwch",
	5: "yjsy",
}

type CommonService interface {
	GetCSS(ctx context.Context, req *GetCSSRequest) (r *GetCSSResponse, err error)

	GetHtml(ctx context.Context, req *GetHtmlRequest) (r *GetHtmlResponse, err error)

	GetUserAgreement(ctx context.Context, req *GetUserAgreementRequest) (r *GetUserAgreementResponse, err error)

	GetTermsList(ctx context.Context, req *TermListRequest) (r *TermListResponse, err error)

	GetTerm(ctx context.Context, req *TermRequest) (r *TermResponse, err error)

	GetNotices(ctx context.Context, req *NoticeRequest) (r *NoticeResponse, err error)

	GetContributorInfo(ctx context.Context, req *GetContributorInfoRequest) (r *GetContributorInfoResponse, err error)
}

type CommonServiceGetCSSArgs struct {
	Req *GetCSSRequest `thrift:"req,1" frugal:"1,default,GetCSSRequest" json:"req"`
}

func NewCommonServiceGetCSSArgs() *CommonServiceGetCSSArgs {
	return &CommonServiceGetCSSArgs{}
}

func (p *CommonServiceGetCSSArgs) InitDefault() {
}

var CommonServiceGetCSSArgs_Req_DEFAULT *GetCSSRequest

func (p *CommonServiceGetCSSArgs) GetReq() (v *GetCSSRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetCSSArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetCSSArgs) SetReq(val *GetCSSRequest) {
	p.Req = val
}

func (p *CommonServiceGetCSSArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetCSSArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetCSSArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetCSSArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetCSSResult struct {
	Success *GetCSSResponse `thrift:"success,0,optional" frugal:"0,optional,GetCSSResponse" json:"success,omitempty"`
}

func NewCommonServiceGetCSSResult() *CommonServiceGetCSSResult {
	return &CommonServiceGetCSSResult{}
}

func (p *CommonServiceGetCSSResult) InitDefault() {
}

var CommonServiceGetCSSResult_Success_DEFAULT *GetCSSResponse

func (p *CommonServiceGetCSSResult) GetSuccess() (v *GetCSSResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetCSSResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetCSSResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCSSResponse)
}

func (p *CommonServiceGetCSSResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetCSSResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetCSSResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetCSSResult = map[int16]string{
	0: "success",
}

type CommonServiceGetHtmlArgs struct {
	Req *GetHtmlRequest `thrift:"req,1" frugal:"1,default,GetHtmlRequest" json:"req"`
}

func NewCommonServiceGetHtmlArgs() *CommonServiceGetHtmlArgs {
	return &CommonServiceGetHtmlArgs{}
}

func (p *CommonServiceGetHtmlArgs) InitDefault() {
}

var CommonServiceGetHtmlArgs_Req_DEFAULT *GetHtmlRequest

func (p *CommonServiceGetHtmlArgs) GetReq() (v *GetHtmlRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetHtmlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetHtmlArgs) SetReq(val *GetHtmlRequest) {
	p.Req = val
}

func (p *CommonServiceGetHtmlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetHtmlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetHtmlArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetHtmlArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetHtmlResult struct {
	Success *GetHtmlResponse `thrift:"success,0,optional" frugal:"0,optional,GetHtmlResponse" json:"success,omitempty"`
}

func NewCommonServiceGetHtmlResult() *CommonServiceGetHtmlResult {
	return &CommonServiceGetHtmlResult{}
}

func (p *CommonServiceGetHtmlResult) InitDefault() {
}

var CommonServiceGetHtmlResult_Success_DEFAULT *GetHtmlResponse

func (p *CommonServiceGetHtmlResult) GetSuccess() (v *GetHtmlResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetHtmlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetHtmlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHtmlResponse)
}

func (p *CommonServiceGetHtmlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetHtmlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetHtmlResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetHtmlResult = map[int16]string{
	0: "success",
}

type CommonServiceGetUserAgreementArgs struct {
	Req *GetUserAgreementRequest `thrift:"req,1" frugal:"1,default,GetUserAgreementRequest" json:"req"`
}

func NewCommonServiceGetUserAgreementArgs() *CommonServiceGetUserAgreementArgs {
	return &CommonServiceGetUserAgreementArgs{}
}

func (p *CommonServiceGetUserAgreementArgs) InitDefault() {
}

var CommonServiceGetUserAgreementArgs_Req_DEFAULT *GetUserAgreementRequest

func (p *CommonServiceGetUserAgreementArgs) GetReq() (v *GetUserAgreementRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetUserAgreementArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetUserAgreementArgs) SetReq(val *GetUserAgreementRequest) {
	p.Req = val
}

func (p *CommonServiceGetUserAgreementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetUserAgreementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetUserAgreementArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetUserAgreementArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetUserAgreementResult struct {
	Success *GetUserAgreementResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserAgreementResponse" json:"success,omitempty"`
}

func NewCommonServiceGetUserAgreementResult() *CommonServiceGetUserAgreementResult {
	return &CommonServiceGetUserAgreementResult{}
}

func (p *CommonServiceGetUserAgreementResult) InitDefault() {
}

var CommonServiceGetUserAgreementResult_Success_DEFAULT *GetUserAgreementResponse

func (p *CommonServiceGetUserAgreementResult) GetSuccess() (v *GetUserAgreementResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetUserAgreementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetUserAgreementResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserAgreementResponse)
}

func (p *CommonServiceGetUserAgreementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetUserAgreementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetUserAgreementResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetUserAgreementResult = map[int16]string{
	0: "success",
}

type CommonServiceGetTermsListArgs struct {
	Req *TermListRequest `thrift:"req,1" frugal:"1,default,TermListRequest" json:"req"`
}

func NewCommonServiceGetTermsListArgs() *CommonServiceGetTermsListArgs {
	return &CommonServiceGetTermsListArgs{}
}

func (p *CommonServiceGetTermsListArgs) InitDefault() {
}

var CommonServiceGetTermsListArgs_Req_DEFAULT *TermListRequest

func (p *CommonServiceGetTermsListArgs) GetReq() (v *TermListRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetTermsListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetTermsListArgs) SetReq(val *TermListRequest) {
	p.Req = val
}

func (p *CommonServiceGetTermsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetTermsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermsListArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermsListArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetTermsListResult struct {
	Success *TermListResponse `thrift:"success,0,optional" frugal:"0,optional,TermListResponse" json:"success,omitempty"`
}

func NewCommonServiceGetTermsListResult() *CommonServiceGetTermsListResult {
	return &CommonServiceGetTermsListResult{}
}

func (p *CommonServiceGetTermsListResult) InitDefault() {
}

var CommonServiceGetTermsListResult_Success_DEFAULT *TermListResponse

func (p *CommonServiceGetTermsListResult) GetSuccess() (v *TermListResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetTermsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetTermsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*TermListResponse)
}

func (p *CommonServiceGetTermsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetTermsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermsListResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermsListResult = map[int16]string{
	0: "success",
}

type CommonServiceGetTermArgs struct {
	Req *TermRequest `thrift:"req,1" frugal:"1,default,TermRequest" json:"req"`
}

func NewCommonServiceGetTermArgs() *CommonServiceGetTermArgs {
	return &CommonServiceGetTermArgs{}
}

func (p *CommonServiceGetTermArgs) InitDefault() {
}

var CommonServiceGetTermArgs_Req_DEFAULT *TermRequest

func (p *CommonServiceGetTermArgs) GetReq() (v *TermRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetTermArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetTermArgs) SetReq(val *TermRequest) {
	p.Req = val
}

func (p *CommonServiceGetTermArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetTermArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetTermResult struct {
	Success *TermResponse `thrift:"success,0,optional" frugal:"0,optional,TermResponse" json:"success,omitempty"`
}

func NewCommonServiceGetTermResult() *CommonServiceGetTermResult {
	return &CommonServiceGetTermResult{}
}

func (p *CommonServiceGetTermResult) InitDefault() {
}

var CommonServiceGetTermResult_Success_DEFAULT *TermResponse

func (p *CommonServiceGetTermResult) GetSuccess() (v *TermResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetTermResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetTermResult) SetSuccess(x interface{}) {
	p.Success = x.(*TermResponse)
}

func (p *CommonServiceGetTermResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetTermResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetTermResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetTermResult = map[int16]string{
	0: "success",
}

type CommonServiceGetNoticesArgs struct {
	Req *NoticeRequest `thrift:"req,1" frugal:"1,default,NoticeRequest" json:"req"`
}

func NewCommonServiceGetNoticesArgs() *CommonServiceGetNoticesArgs {
	return &CommonServiceGetNoticesArgs{}
}

func (p *CommonServiceGetNoticesArgs) InitDefault() {
}

var CommonServiceGetNoticesArgs_Req_DEFAULT *NoticeRequest

func (p *CommonServiceGetNoticesArgs) GetReq() (v *NoticeRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetNoticesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetNoticesArgs) SetReq(val *NoticeRequest) {
	p.Req = val
}

func (p *CommonServiceGetNoticesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetNoticesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetNoticesArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetNoticesArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetNoticesResult struct {
	Success *NoticeResponse `thrift:"success,0,optional" frugal:"0,optional,NoticeResponse" json:"success,omitempty"`
}

func NewCommonServiceGetNoticesResult() *CommonServiceGetNoticesResult {
	return &CommonServiceGetNoticesResult{}
}

func (p *CommonServiceGetNoticesResult) InitDefault() {
}

var CommonServiceGetNoticesResult_Success_DEFAULT *NoticeResponse

func (p *CommonServiceGetNoticesResult) GetSuccess() (v *NoticeResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetNoticesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetNoticesResult) SetSuccess(x interface{}) {
	p.Success = x.(*NoticeResponse)
}

func (p *CommonServiceGetNoticesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetNoticesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetNoticesResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetNoticesResult = map[int16]string{
	0: "success",
}

type CommonServiceGetContributorInfoArgs struct {
	Req *GetContributorInfoRequest `thrift:"req,1" frugal:"1,default,GetContributorInfoRequest" json:"req"`
}

func NewCommonServiceGetContributorInfoArgs() *CommonServiceGetContributorInfoArgs {
	return &CommonServiceGetContributorInfoArgs{}
}

func (p *CommonServiceGetContributorInfoArgs) InitDefault() {
}

var CommonServiceGetContributorInfoArgs_Req_DEFAULT *GetContributorInfoRequest

func (p *CommonServiceGetContributorInfoArgs) GetReq() (v *GetContributorInfoRequest) {
	if !p.IsSetReq() {
		return CommonServiceGetContributorInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommonServiceGetContributorInfoArgs) SetReq(val *GetContributorInfoRequest) {
	p.Req = val
}

func (p *CommonServiceGetContributorInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommonServiceGetContributorInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetContributorInfoArgs(%+v)", *p)
}

var fieldIDToName_CommonServiceGetContributorInfoArgs = map[int16]string{
	1: "req",
}

type CommonServiceGetContributorInfoResult struct {
	Success *GetContributorInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetContributorInfoResponse" json:"success,omitempty"`
}

func NewCommonServiceGetContributorInfoResult() *CommonServiceGetContributorInfoResult {
	return &CommonServiceGetContributorInfoResult{}
}

func (p *CommonServiceGetContributorInfoResult) InitDefault() {
}

var CommonServiceGetContributorInfoResult_Success_DEFAULT *GetContributorInfoResponse

func (p *CommonServiceGetContributorInfoResult) GetSuccess() (v *GetContributorInfoResponse) {
	if !p.IsSetSuccess() {
		return CommonServiceGetContributorInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommonServiceGetContributorInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetContributorInfoResponse)
}

func (p *CommonServiceGetContributorInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommonServiceGetContributorInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonServiceGetContributorInfoResult(%+v)", *p)
}

var fieldIDToName_CommonServiceGetContributorInfoResult = map[int16]string{
	0: "success",
}
