/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.11.3. DO NOT EDIT.

package urlservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	url "github.com/west2-online/fzuhelper-server/kitex_gen/url"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUrlServiceLoginArgs,
		newUrlServiceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadVersion": kitex.NewMethodInfo(
		uploadVersionHandler,
		newUrlServiceUploadVersionArgs,
		newUrlServiceUploadVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadParams": kitex.NewMethodInfo(
		uploadParamsHandler,
		newUrlServiceUploadParamsArgs,
		newUrlServiceUploadParamsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DownloadReleaseApk": kitex.NewMethodInfo(
		downloadReleaseApkHandler,
		newUrlServiceDownloadReleaseApkArgs,
		newUrlServiceDownloadReleaseApkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DownloadBetaApk": kitex.NewMethodInfo(
		downloadBetaApkHandler,
		newUrlServiceDownloadBetaApkArgs,
		newUrlServiceDownloadBetaApkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetReleaseVersion": kitex.NewMethodInfo(
		getReleaseVersionHandler,
		newUrlServiceGetReleaseVersionArgs,
		newUrlServiceGetReleaseVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetBetaVersion": kitex.NewMethodInfo(
		getBetaVersionHandler,
		newUrlServiceGetBetaVersionArgs,
		newUrlServiceGetBetaVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSetting": kitex.NewMethodInfo(
		getSettingHandler,
		newUrlServiceGetSettingArgs,
		newUrlServiceGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTest": kitex.NewMethodInfo(
		getTestHandler,
		newUrlServiceGetTestArgs,
		newUrlServiceGetTestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCloud": kitex.NewMethodInfo(
		getCloudHandler,
		newUrlServiceGetCloudArgs,
		newUrlServiceGetCloudResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetCloud": kitex.NewMethodInfo(
		setCloudHandler,
		newUrlServiceSetCloudArgs,
		newUrlServiceSetCloudResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDump": kitex.NewMethodInfo(
		getDumpHandler,
		newUrlServiceGetDumpArgs,
		newUrlServiceGetDumpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	urlServiceServiceInfo                = NewServiceInfo()
	urlServiceServiceInfoForClient       = NewServiceInfoForClient()
	urlServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return urlServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return urlServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return urlServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UrlService"
	handlerType := (*url.UrlService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "url",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceLoginArgs)
	realResult := result.(*url.UrlServiceLoginResult)
	success, err := handler.(url.UrlService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceLoginArgs() interface{} {
	return url.NewUrlServiceLoginArgs()
}

func newUrlServiceLoginResult() interface{} {
	return url.NewUrlServiceLoginResult()
}

func uploadVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceUploadVersionArgs)
	realResult := result.(*url.UrlServiceUploadVersionResult)
	success, err := handler.(url.UrlService).UploadVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceUploadVersionArgs() interface{} {
	return url.NewUrlServiceUploadVersionArgs()
}

func newUrlServiceUploadVersionResult() interface{} {
	return url.NewUrlServiceUploadVersionResult()
}

func uploadParamsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceUploadParamsArgs)
	realResult := result.(*url.UrlServiceUploadParamsResult)
	success, err := handler.(url.UrlService).UploadParams(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceUploadParamsArgs() interface{} {
	return url.NewUrlServiceUploadParamsArgs()
}

func newUrlServiceUploadParamsResult() interface{} {
	return url.NewUrlServiceUploadParamsResult()
}

func downloadReleaseApkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceDownloadReleaseApkArgs)
	realResult := result.(*url.UrlServiceDownloadReleaseApkResult)
	success, err := handler.(url.UrlService).DownloadReleaseApk(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceDownloadReleaseApkArgs() interface{} {
	return url.NewUrlServiceDownloadReleaseApkArgs()
}

func newUrlServiceDownloadReleaseApkResult() interface{} {
	return url.NewUrlServiceDownloadReleaseApkResult()
}

func downloadBetaApkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceDownloadBetaApkArgs)
	realResult := result.(*url.UrlServiceDownloadBetaApkResult)
	success, err := handler.(url.UrlService).DownloadBetaApk(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceDownloadBetaApkArgs() interface{} {
	return url.NewUrlServiceDownloadBetaApkArgs()
}

func newUrlServiceDownloadBetaApkResult() interface{} {
	return url.NewUrlServiceDownloadBetaApkResult()
}

func getReleaseVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetReleaseVersionArgs)
	realResult := result.(*url.UrlServiceGetReleaseVersionResult)
	success, err := handler.(url.UrlService).GetReleaseVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetReleaseVersionArgs() interface{} {
	return url.NewUrlServiceGetReleaseVersionArgs()
}

func newUrlServiceGetReleaseVersionResult() interface{} {
	return url.NewUrlServiceGetReleaseVersionResult()
}

func getBetaVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetBetaVersionArgs)
	realResult := result.(*url.UrlServiceGetBetaVersionResult)
	success, err := handler.(url.UrlService).GetBetaVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetBetaVersionArgs() interface{} {
	return url.NewUrlServiceGetBetaVersionArgs()
}

func newUrlServiceGetBetaVersionResult() interface{} {
	return url.NewUrlServiceGetBetaVersionResult()
}

func getSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetSettingArgs)
	realResult := result.(*url.UrlServiceGetSettingResult)
	success, err := handler.(url.UrlService).GetSetting(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetSettingArgs() interface{} {
	return url.NewUrlServiceGetSettingArgs()
}

func newUrlServiceGetSettingResult() interface{} {
	return url.NewUrlServiceGetSettingResult()
}

func getTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetTestArgs)
	realResult := result.(*url.UrlServiceGetTestResult)
	success, err := handler.(url.UrlService).GetTest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetTestArgs() interface{} {
	return url.NewUrlServiceGetTestArgs()
}

func newUrlServiceGetTestResult() interface{} {
	return url.NewUrlServiceGetTestResult()
}

func getCloudHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetCloudArgs)
	realResult := result.(*url.UrlServiceGetCloudResult)
	success, err := handler.(url.UrlService).GetCloud(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetCloudArgs() interface{} {
	return url.NewUrlServiceGetCloudArgs()
}

func newUrlServiceGetCloudResult() interface{} {
	return url.NewUrlServiceGetCloudResult()
}

func setCloudHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceSetCloudArgs)
	realResult := result.(*url.UrlServiceSetCloudResult)
	success, err := handler.(url.UrlService).SetCloud(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceSetCloudArgs() interface{} {
	return url.NewUrlServiceSetCloudArgs()
}

func newUrlServiceSetCloudResult() interface{} {
	return url.NewUrlServiceSetCloudResult()
}

func getDumpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceGetDumpArgs)
	realResult := result.(*url.UrlServiceGetDumpResult)
	success, err := handler.(url.UrlService).GetDump(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceGetDumpArgs() interface{} {
	return url.NewUrlServiceGetDumpArgs()
}

func newUrlServiceGetDumpResult() interface{} {
	return url.NewUrlServiceGetDumpResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *url.LoginRequest) (r *url.LoginResponse, err error) {
	var _args url.UrlServiceLoginArgs
	_args.Req = req
	var _result url.UrlServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadVersion(ctx context.Context, req *url.UploadRequest) (r *url.UploadResponse, err error) {
	var _args url.UrlServiceUploadVersionArgs
	_args.Req = req
	var _result url.UrlServiceUploadVersionResult
	if err = p.c.Call(ctx, "UploadVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadParams(ctx context.Context, req *url.UploadParamsRequest) (r *url.UploadParamsResponse, err error) {
	var _args url.UrlServiceUploadParamsArgs
	_args.Req = req
	var _result url.UrlServiceUploadParamsResult
	if err = p.c.Call(ctx, "UploadParams", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadReleaseApk(ctx context.Context, req *url.DownloadReleaseApkRequest) (r *url.DownloadReleaseApkResponse, err error) {
	var _args url.UrlServiceDownloadReleaseApkArgs
	_args.Req = req
	var _result url.UrlServiceDownloadReleaseApkResult
	if err = p.c.Call(ctx, "DownloadReleaseApk", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadBetaApk(ctx context.Context, req *url.DownloadBetaApkRequest) (r *url.DownloadBetaApkResponse, err error) {
	var _args url.UrlServiceDownloadBetaApkArgs
	_args.Req = req
	var _result url.UrlServiceDownloadBetaApkResult
	if err = p.c.Call(ctx, "DownloadBetaApk", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetReleaseVersion(ctx context.Context, req *url.GetReleaseVersionRequest) (r *url.GetReleaseVersionResponse, err error) {
	var _args url.UrlServiceGetReleaseVersionArgs
	_args.Req = req
	var _result url.UrlServiceGetReleaseVersionResult
	if err = p.c.Call(ctx, "GetReleaseVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBetaVersion(ctx context.Context, req *url.GetBetaVersionRequest) (r *url.GetBetaVersionResponse, err error) {
	var _args url.UrlServiceGetBetaVersionArgs
	_args.Req = req
	var _result url.UrlServiceGetBetaVersionResult
	if err = p.c.Call(ctx, "GetBetaVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSetting(ctx context.Context, req *url.GetSettingRequest) (r *url.GetSettingResponse, err error) {
	var _args url.UrlServiceGetSettingArgs
	_args.Req = req
	var _result url.UrlServiceGetSettingResult
	if err = p.c.Call(ctx, "GetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTest(ctx context.Context, req *url.GetTestRequest) (r *url.GetTestResponse, err error) {
	var _args url.UrlServiceGetTestArgs
	_args.Req = req
	var _result url.UrlServiceGetTestResult
	if err = p.c.Call(ctx, "GetTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCloud(ctx context.Context, req *url.GetCloudRequest) (r *url.GetCloudResponse, err error) {
	var _args url.UrlServiceGetCloudArgs
	_args.Req = req
	var _result url.UrlServiceGetCloudResult
	if err = p.c.Call(ctx, "GetCloud", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCloud(ctx context.Context, req *url.SetCloudRequest) (r *url.SetCloudResponse, err error) {
	var _args url.UrlServiceSetCloudArgs
	_args.Req = req
	var _result url.UrlServiceSetCloudResult
	if err = p.c.Call(ctx, "SetCloud", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDump(ctx context.Context, req *url.GetDumpRequest) (r *url.GetDumpResponse, err error) {
	var _args url.UrlServiceGetDumpArgs
	_args.Req = req
	var _result url.UrlServiceGetDumpResult
	if err = p.c.Call(ctx, "GetDump", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
