/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by hertz generator.

package api

import (
	"context"
	"errors"
	"io/ioutil"

	"github.com/cloudwego/hertz/pkg/app"

	api "github.com/west2-online/fzuhelper-server/cmd/api/biz/model/api"
	"github.com/west2-online/fzuhelper-server/cmd/api/biz/pack"
	"github.com/west2-online/fzuhelper-server/cmd/api/biz/rpc"
	"github.com/west2-online/fzuhelper-server/kitex_gen/paper"
	"github.com/west2-online/fzuhelper-server/pkg/errno"
	"github.com/west2-online/fzuhelper-server/pkg/logger"
)

// UploadFile .
// @router /api/v1/paper/upload [POST]
func UploadFile(ctx context.Context, c *app.RequestContext) {
	var err error

	file, err := c.FormFile("file")
	if err != nil {
		logger.Errorf("api.UploadFile: FormFile error %v", err)
		pack.RespError(c, errno.ParamError.WithError(err))
		return
	}

	src, err := file.Open()
	if err != nil {
		logger.Errorf("api.UploadFile: open file error %v", err)
		pack.RespError(c, errno.ParamError.WithError(err))
		return
	}

	content, err := ioutil.ReadAll(src)
	if err != nil {
		logger.Errorf("api.UploadFile: read file error %v", err)
		pack.RespError(c, errno.ParamError.WithError(err))
		return
	}

	ussPath, exist := c.GetPostForm("path")
	if !exist {
		logger.Errorf("api.UploadFile: path not exist")
		pack.RespError(c, errno.ParamError.WithError(errors.New("path not exist")))
		return
	}

	user, exist := c.GetPostForm("user")
	if !exist {
		logger.Errorf("api.UploadFile: user not exist")
		pack.RespError(c, errno.ParamError.WithError(errors.New("user not exist")))
		return
	}

	err = rpc.UploadFileRPC(ctx, &paper.UploadFileRequest{
		UssPath:  ussPath,
		Filename: file.Filename,
		Content:  content,
		User:     user,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespSuccess(c)
}

// ListDirFiles .
// @router /api/v1/paper/list [GET]
func ListDirFiles(ctx context.Context, c *app.RequestContext) {
	var err error

	path := c.DefaultQuery("path", "")
	if path == "" {
		logger.Errorf("api.ListDirFiles: path is empty")
		pack.RespError(c, errno.ParamError.WithError(errors.New("path is empty")))
		return
	}

	res, err := rpc.GetDirFilesRPC(ctx, &paper.ListDirFilesRequest{
		Path: path,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	resp := new(api.ListDirFilesResponse)
	resp.Dir = pack.BuildUpYunFileDir(res)
	pack.RespData(c, resp.Dir)
}

// GetDownloadUrl .
// @router /api/v1/paper/download [GET]
func GetDownloadUrl(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetDownloadUrlRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorf("api.GetDownloadUrl: BindAndValidate error %v", err)
		pack.RespError(c, errno.ParamError.WithError(err))
		return
	}

	url, err := rpc.GetDownloadUrlRPC(ctx, &paper.GetDownloadUrlRequest{
		Url: req.URL,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	resp := new(api.GetDownloadUrlResponse)
	resp.URL = url

	pack.RespData(c, resp)
}
